
max-booster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e504  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800e6d8  0800e6d8  0001e6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb58  0800eb58  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb58  0800eb58  0001eb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb60  0800eb60  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb60  0800eb60  0001eb60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb64  0800eb64  0001eb64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800eb68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  20000240  0800eda8  00020240  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a14  0800eda8  00020a14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018162  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003678  00000000  00000000  00038415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001648  00000000  00000000  0003ba90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001174  00000000  00000000  0003d0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cbe  00000000  00000000  0003e24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d5b2  00000000  00000000  00064f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6ad9  00000000  00000000  000824bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000073d0  00000000  00000000  00168f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00170368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000240 	.word	0x20000240
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e6bc 	.word	0x0800e6bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000244 	.word	0x20000244
 800020c:	0800e6bc 	.word	0x0800e6bc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f1 	b.w	80010bc <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a6 	b.w	80010bc <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9e08      	ldr	r6, [sp, #32]
 8000dfa:	460d      	mov	r5, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	460f      	mov	r7, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4694      	mov	ip, r2
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0xe2>
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	b143      	cbz	r3, 8000e22 <__udivmoddi4+0x2e>
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	f1c3 0220 	rsb	r2, r3, #32
 8000e18:	409f      	lsls	r7, r3
 8000e1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1e:	4317      	orrs	r7, r2
 8000e20:	409c      	lsls	r4, r3
 8000e22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e26:	fa1f f58c 	uxth.w	r5, ip
 8000e2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e2e:	0c22      	lsrs	r2, r4, #16
 8000e30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e38:	fb01 f005 	mul.w	r0, r1, r5
 8000e3c:	4290      	cmp	r0, r2
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e40:	eb1c 0202 	adds.w	r2, ip, r2
 8000e44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e48:	f080 811c 	bcs.w	8001084 <__udivmoddi4+0x290>
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	f240 8119 	bls.w	8001084 <__udivmoddi4+0x290>
 8000e52:	3902      	subs	r1, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a12      	subs	r2, r2, r0
 8000e58:	b2a4      	uxth	r4, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e66:	fb00 f505 	mul.w	r5, r0, r5
 8000e6a:	42a5      	cmp	r5, r4
 8000e6c:	d90a      	bls.n	8000e84 <__udivmoddi4+0x90>
 8000e6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e76:	f080 8107 	bcs.w	8001088 <__udivmoddi4+0x294>
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	f240 8104 	bls.w	8001088 <__udivmoddi4+0x294>
 8000e80:	4464      	add	r4, ip
 8000e82:	3802      	subs	r0, #2
 8000e84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11e      	cbz	r6, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40dc      	lsrs	r4, r3
 8000e90:	2300      	movs	r3, #0
 8000e92:	e9c6 4300 	strd	r4, r3, [r6]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0xbc>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	f000 80ed 	beq.w	800107e <__udivmoddi4+0x28a>
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	fab3 f183 	clz	r1, r3
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	d149      	bne.n	8000f4c <__udivmoddi4+0x158>
 8000eb8:	42ab      	cmp	r3, r5
 8000eba:	d302      	bcc.n	8000ec2 <__udivmoddi4+0xce>
 8000ebc:	4282      	cmp	r2, r0
 8000ebe:	f200 80f8 	bhi.w	80010b2 <__udivmoddi4+0x2be>
 8000ec2:	1a84      	subs	r4, r0, r2
 8000ec4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ec8:	2001      	movs	r0, #1
 8000eca:	4617      	mov	r7, r2
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d0e2      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ed4:	e7df      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed6:	b902      	cbnz	r2, 8000eda <__udivmoddi4+0xe6>
 8000ed8:	deff      	udf	#255	; 0xff
 8000eda:	fab2 f382 	clz	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8090 	bne.w	8001004 <__udivmoddi4+0x210>
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ef4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ef8:	0c22      	lsrs	r2, r4, #16
 8000efa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000efe:	fb0e f005 	mul.w	r0, lr, r5
 8000f02:	4290      	cmp	r0, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x124>
 8000f06:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x122>
 8000f10:	4290      	cmp	r0, r2
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2b8>
 8000f16:	4645      	mov	r5, r8
 8000f18:	1a12      	subs	r2, r2, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f20:	fb07 2210 	mls	r2, r7, r0, r2
 8000f24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x14e>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x14c>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2c2>
 8000f40:	4610      	mov	r0, r2
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f4a:	e79f      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f4c:	f1c1 0720 	rsb	r7, r1, #32
 8000f50:	408b      	lsls	r3, r1
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f62:	40fd      	lsrs	r5, r7
 8000f64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f6e:	fa1f fe8c 	uxth.w	lr, ip
 8000f72:	fb09 5518 	mls	r5, r9, r8, r5
 8000f76:	0c1c      	lsrs	r4, r3, #16
 8000f78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f80:	42a5      	cmp	r5, r4
 8000f82:	fa02 f201 	lsl.w	r2, r2, r1
 8000f86:	fa00 f001 	lsl.w	r0, r0, r1
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b0>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2b4>
 8000f98:	42a5      	cmp	r5, r4
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2b4>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4464      	add	r4, ip
 8000fa4:	1b64      	subs	r4, r4, r5
 8000fa6:	b29d      	uxth	r5, r3
 8000fa8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fac:	fb09 4413 	mls	r4, r9, r3, r4
 8000fb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fb8:	45a6      	cmp	lr, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1da>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2ac>
 8000fc6:	45a6      	cmp	lr, r4
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2ac>
 8000fca:	3b02      	subs	r3, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fd6:	eba4 040e 	sub.w	r4, r4, lr
 8000fda:	42ac      	cmp	r4, r5
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46ae      	mov	lr, r5
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x29c>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x298>
 8000fe4:	b156      	cbz	r6, 8000ffc <__udivmoddi4+0x208>
 8000fe6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fea:	eb64 040e 	sbc.w	r4, r4, lr
 8000fee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ff2:	40ca      	lsrs	r2, r1
 8000ff4:	40cc      	lsrs	r4, r1
 8000ff6:	4317      	orrs	r7, r2
 8000ff8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001004:	f1c3 0120 	rsb	r1, r3, #32
 8001008:	fa02 fc03 	lsl.w	ip, r2, r3
 800100c:	fa20 f201 	lsr.w	r2, r0, r1
 8001010:	fa25 f101 	lsr.w	r1, r5, r1
 8001014:	409d      	lsls	r5, r3
 8001016:	432a      	orrs	r2, r5
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb1 f0f7 	udiv	r0, r1, r7
 8001024:	fb07 1510 	mls	r5, r7, r0, r1
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800102e:	fb00 f50e 	mul.w	r5, r0, lr
 8001032:	428d      	cmp	r5, r1
 8001034:	fa04 f403 	lsl.w	r4, r4, r3
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x258>
 800103a:	eb1c 0101 	adds.w	r1, ip, r1
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001044:	428d      	cmp	r5, r1
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 8001048:	3802      	subs	r0, #2
 800104a:	4461      	add	r1, ip
 800104c:	1b49      	subs	r1, r1, r5
 800104e:	b292      	uxth	r2, r2
 8001050:	fbb1 f5f7 	udiv	r5, r1, r7
 8001054:	fb07 1115 	mls	r1, r7, r5, r1
 8001058:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800105c:	fb05 f10e 	mul.w	r1, r5, lr
 8001060:	4291      	cmp	r1, r2
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x282>
 8001064:	eb1c 0202 	adds.w	r2, ip, r2
 8001068:	f105 38ff 	add.w	r8, r5, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2a8>
 800106e:	4291      	cmp	r1, r2
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2a8>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	1a52      	subs	r2, r2, r1
 8001078:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0xfc>
 800107e:	4631      	mov	r1, r6
 8001080:	4630      	mov	r0, r6
 8001082:	e708      	b.n	8000e96 <__udivmoddi4+0xa2>
 8001084:	4639      	mov	r1, r7
 8001086:	e6e6      	b.n	8000e56 <__udivmoddi4+0x62>
 8001088:	4610      	mov	r0, r2
 800108a:	e6fb      	b.n	8000e84 <__udivmoddi4+0x90>
 800108c:	4548      	cmp	r0, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f0>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001098:	3b01      	subs	r3, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f0>
 800109c:	4645      	mov	r5, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x282>
 80010a0:	462b      	mov	r3, r5
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1da>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x258>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b0>
 80010ac:	3d02      	subs	r5, #2
 80010ae:	4462      	add	r2, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x124>
 80010b2:	4608      	mov	r0, r1
 80010b4:	e70a      	b.n	8000ecc <__udivmoddi4+0xd8>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x14e>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 80010c8:	2305      	movs	r3, #5
 80010ca:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f001 facb 	bl	800266c <null_ptr_check>
 80010d6:	4603      	mov	r3, r0
 80010d8:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d133      	bne.n	800114a <bme280_init+0x8a>
		while (try_count) {
 80010e2:	e028      	b.n	8001136 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80010e4:	f107 010d 	add.w	r1, r7, #13
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	20d0      	movs	r0, #208	; 0xd0
 80010ee:	f000 f832 	bl	8001156 <bme280_get_regs>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d114      	bne.n	8001128 <bme280_init+0x68>
 80010fe:	7b7b      	ldrb	r3, [r7, #13]
 8001100:	2b60      	cmp	r3, #96	; 0x60
 8001102:	d111      	bne.n	8001128 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8001104:	7b7a      	ldrb	r2, [r7, #13]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f978 	bl	8001400 <bme280_soft_reset>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8001114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d110      	bne.n	800113e <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f001 f919 	bl	8002354 <get_calib_data>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8001126:	e00a      	b.n	800113e <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	2001      	movs	r0, #1
 800112e:	4798      	blx	r3
			--try_count;
 8001130:	7bbb      	ldrb	r3, [r7, #14]
 8001132:	3b01      	subs	r3, #1
 8001134:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1d3      	bne.n	80010e4 <bme280_init+0x24>
 800113c:	e000      	b.n	8001140 <bme280_init+0x80>
				break;
 800113e:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8001146:	23fe      	movs	r3, #254	; 0xfe
 8001148:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8001156:	b590      	push	{r4, r7, lr}
 8001158:	b087      	sub	sp, #28
 800115a:	af00      	add	r7, sp, #0
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
 8001164:	4613      	mov	r3, r2
 8001166:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f001 fa7f 	bl	800266c <null_ptr_check>
 800116e:	4603      	mov	r3, r0
 8001170:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001172:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d117      	bne.n	80011aa <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	789b      	ldrb	r3, [r3, #2]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d003      	beq.n	800118a <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001188:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685c      	ldr	r4, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7858      	ldrb	r0, [r3, #1]
 8001192:	89bb      	ldrh	r3, [r7, #12]
 8001194:	7bf9      	ldrb	r1, [r7, #15]
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	47a0      	blx	r4
 800119a:	4603      	mov	r3, r0
 800119c:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800119e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 80011a6:	23fc      	movs	r3, #252	; 0xfc
 80011a8:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80011aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	371c      	adds	r7, #28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd90      	pop	{r4, r7, pc}

080011b6 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80011b6:	b590      	push	{r4, r7, lr}
 80011b8:	b08d      	sub	sp, #52	; 0x34
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4613      	mov	r3, r2
 80011c4:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b0a      	cmp	r3, #10
 80011ca:	d901      	bls.n	80011d0 <bme280_set_regs+0x1a>
		len = 10;
 80011cc:	230a      	movs	r3, #10
 80011ce:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f001 fa4b 	bl	800266c <null_ptr_check>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80011dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d156      	bne.n	8001292 <bme280_set_regs+0xdc>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d053      	beq.n	8001292 <bme280_set_regs+0xdc>
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d050      	beq.n	8001292 <bme280_set_regs+0xdc>
		if (len != 0) {
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d049      	beq.n	800128a <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	789b      	ldrb	r3, [r3, #2]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d01a      	beq.n	800123a <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001204:	2300      	movs	r3, #0
 8001206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800120a:	e011      	b.n	8001230 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800120c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800121a:	68f9      	ldr	r1, [r7, #12]
 800121c:	440b      	add	r3, r1
 800121e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001226:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800122a:	3301      	adds	r3, #1
 800122c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001230:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	429a      	cmp	r2, r3
 8001238:	d3e8      	bcc.n	800120c <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d90d      	bls.n	800125c <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f107 0114 	add.w	r1, r7, #20
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f001 f8c8 	bl	80023de <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	b29b      	uxth	r3, r3
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	b29b      	uxth	r3, r3
 8001256:	3b01      	subs	r3, #1
 8001258:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800125a:	e001      	b.n	8001260 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689c      	ldr	r4, [r3, #8]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	7858      	ldrb	r0, [r3, #1]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	7819      	ldrb	r1, [r3, #0]
 800126c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800126e:	f107 0214 	add.w	r2, r7, #20
 8001272:	47a0      	blx	r4
 8001274:	4603      	mov	r3, r0
 8001276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800127a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 8001282:	23fc      	movs	r3, #252	; 0xfc
 8001284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001288:	e007      	b.n	800129a <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 800128a:	23fd      	movs	r3, #253	; 0xfd
 800128c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001290:	e003      	b.n	800129a <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001292:	23ff      	movs	r3, #255	; 0xff
 8001294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001298:	e000      	b.n	800129c <bme280_set_regs+0xe6>
		if (len != 0) {
 800129a:	bf00      	nop
	}


	return rslt;
 800129c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3734      	adds	r7, #52	; 0x34
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}

080012a8 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012b4:	6838      	ldr	r0, [r7, #0]
 80012b6:	f001 f9d9 	bl	800266c <null_ptr_check>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d13f      	bne.n	8001346 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80012c6:	f107 030e 	add.w	r3, r7, #14
 80012ca:	6839      	ldr	r1, [r7, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f874 	bl	80013ba <bme280_get_sensor_mode>
 80012d2:	4603      	mov	r3, r0
 80012d4:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d107      	bne.n	80012ee <bme280_set_sensor_settings+0x46>
 80012de:	7bbb      	ldrb	r3, [r7, #14]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d004      	beq.n	80012ee <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 80012e4:	6838      	ldr	r0, [r7, #0]
 80012e6:	f000 fb36 	bl	8001956 <put_device_to_sleep>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d127      	bne.n	8001346 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	4619      	mov	r1, r3
 80012fa:	2007      	movs	r0, #7
 80012fc:	f001 f99a 	bl	8002634 <are_settings_changed>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d009      	beq.n	800131a <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f972 	bl	80015fa <set_osr_settings>
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d111      	bne.n	8001346 <bme280_set_sensor_settings+0x9e>
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4619      	mov	r1, r3
 8001326:	2018      	movs	r0, #24
 8001328:	f001 f984 	bl	8002634 <are_settings_changed>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d009      	beq.n	8001346 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 f9f9 	bl	8001734 <set_filter_standby_settings>
 8001342:	4603      	mov	r3, r0
 8001344:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b084      	sub	sp, #16
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	6039      	str	r1, [r7, #0]
 800135c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800135e:	6838      	ldr	r0, [r7, #0]
 8001360:	f001 f984 	bl	800266c <null_ptr_check>
 8001364:	4603      	mov	r3, r0
 8001366:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8001368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d11e      	bne.n	80013ae <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001370:	f107 030e 	add.w	r3, r7, #14
 8001374:	6839      	ldr	r1, [r7, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f81f 	bl	80013ba <bme280_get_sensor_mode>
 800137c:	4603      	mov	r3, r0
 800137e:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d107      	bne.n	8001398 <bme280_set_sensor_mode+0x46>
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800138e:	6838      	ldr	r0, [r7, #0]
 8001390:	f000 fae1 	bl	8001956 <put_device_to_sleep>
 8001394:	4603      	mov	r3, r0
 8001396:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d106      	bne.n	80013ae <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 faa3 	bl	80018f0 <write_power_mode>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f001 f951 	bl	800266c <null_ptr_check>
 80013ca:	4603      	mov	r3, r0
 80013cc:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10e      	bne.n	80013f4 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	2201      	movs	r2, #1
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	20f4      	movs	r0, #244	; 0xf4
 80013de:	f7ff feba 	bl	8001156 <bme280_get_regs>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80013f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001408:	23e0      	movs	r3, #224	; 0xe0
 800140a:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 800140c:	23b6      	movs	r3, #182	; 0xb6
 800140e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f001 f92b 	bl	800266c <null_ptr_check>
 8001416:	4603      	mov	r3, r0
 8001418:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10d      	bne.n	800143e <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001422:	f107 010d 	add.w	r1, r7, #13
 8001426:	f107 000e 	add.w	r0, r7, #14
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f7ff fec2 	bl	80011b6 <bme280_set_regs>
 8001432:	4603      	mov	r3, r0
 8001434:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2002      	movs	r0, #2
 800143c:	4798      	blx	r3
	}

	return rslt;
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b08a      	sub	sp, #40	; 0x28
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f001 f8fd 	bl	800266c <null_ptr_check>
 8001472:	4603      	mov	r3, r0
 8001474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8001478:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800147c:	2b00      	cmp	r3, #0
 800147e:	d124      	bne.n	80014ca <bme280_get_sensor_data+0x80>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d021      	beq.n	80014ca <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001486:	f107 011c 	add.w	r1, r7, #28
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2208      	movs	r2, #8
 800148e:	20f7      	movs	r0, #247	; 0xf7
 8001490:	f7ff fe61 	bl	8001156 <bme280_get_regs>
 8001494:	4603      	mov	r3, r0
 8001496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 800149a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d116      	bne.n	80014d0 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80014a2:	f107 0210 	add.w	r2, r7, #16
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f815 	bl	80014dc <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3310      	adds	r3, #16
 80014b6:	f107 0110 	add.w	r1, r7, #16
 80014ba:	7bf8      	ldrb	r0, [r7, #15]
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	f000 f853 	bl	8001568 <bme280_compensate_data>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80014c8:	e002      	b.n	80014d0 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80014ca:	23ff      	movs	r3, #255	; 0xff
 80014cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 80014d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3728      	adds	r7, #40	; 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	031b      	lsls	r3, r3, #12
 80014ec:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3301      	adds	r3, #1
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3302      	adds	r3, #2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	b2db      	uxtb	r3, r3
 8001502:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	431a      	orrs	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	431a      	orrs	r2, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3303      	adds	r3, #3
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	031b      	lsls	r3, r3, #12
 800151a:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3304      	adds	r3, #4
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3305      	adds	r3, #5
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	b2db      	uxtb	r3, r3
 8001530:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	431a      	orrs	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	431a      	orrs	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3306      	adds	r3, #6
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3307      	adds	r3, #7
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	431a      	orrs	r2, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	609a      	str	r2, [r3, #8]
}
 800155c:	bf00      	nop
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d033      	beq.n	80015ea <bme280_compensate_data+0x82>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d030      	beq.n	80015ea <bme280_compensate_data+0x82>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d02d      	beq.n	80015ea <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80015aa:	6839      	ldr	r1, [r7, #0]
 80015ac:	68b8      	ldr	r0, [r7, #8]
 80015ae:	f000 fa1f 	bl	80019f0 <compensate_temperature>
 80015b2:	4602      	mov	r2, r0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80015c2:	6839      	ldr	r1, [r7, #0]
 80015c4:	68b8      	ldr	r0, [r7, #8]
 80015c6:	f000 fa75 	bl	8001ab4 <compensate_pressure>
 80015ca:	4602      	mov	r2, r0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d009      	beq.n	80015ee <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80015da:	6839      	ldr	r1, [r7, #0]
 80015dc:	68b8      	ldr	r0, [r7, #8]
 80015de:	f000 fe0d 	bl	80021fc <compensate_humidity>
 80015e2:	4602      	mov	r2, r0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 80015e8:	e001      	b.n	80015ee <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80015ea:	23ff      	movs	r3, #255	; 0xff
 80015ec:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001608:	2301      	movs	r3, #1
 800160a:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	68b8      	ldr	r0, [r7, #8]
 800161a:	f000 f815 	bl	8001648 <set_osr_humidity_settings>
 800161e:	4603      	mov	r3, r0
 8001620:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f842 	bl	80016bc <set_osr_press_temp_settings>
 8001638:	4603      	mov	r3, r0
 800163a:	75fb      	strb	r3, [r7, #23]

	return rslt;
 800163c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001652:	23f2      	movs	r3, #242	; 0xf2
 8001654:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	789b      	ldrb	r3, [r3, #2]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	b2db      	uxtb	r3, r3
 8001660:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001662:	f107 010e 	add.w	r1, r7, #14
 8001666:	f107 000c 	add.w	r0, r7, #12
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2201      	movs	r2, #1
 800166e:	f7ff fda2 	bl	80011b6 <bme280_set_regs>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d118      	bne.n	80016b0 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800167e:	23f4      	movs	r3, #244	; 0xf4
 8001680:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8001682:	7b38      	ldrb	r0, [r7, #12]
 8001684:	f107 010d 	add.w	r1, r7, #13
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2201      	movs	r2, #1
 800168c:	f7ff fd63 	bl	8001156 <bme280_get_regs>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800169c:	f107 010d 	add.w	r1, r7, #13
 80016a0:	f107 000c 	add.w	r0, r7, #12
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f7ff fd85 	bl	80011b6 <bme280_set_regs>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80016b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80016ca:	23f4      	movs	r3, #244	; 0xf4
 80016cc:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80016ce:	7db8      	ldrb	r0, [r7, #22]
 80016d0:	f107 0115 	add.w	r1, r7, #21
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f7ff fd3d 	bl	8001156 <bme280_get_regs>
 80016dc:	4603      	mov	r3, r0
 80016de:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80016e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d11f      	bne.n	8001728 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80016f2:	f107 0315 	add.w	r3, r7, #21
 80016f6:	68b9      	ldr	r1, [r7, #8]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f88e 	bl	800181a <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8001708:	f107 0315 	add.w	r3, r7, #21
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f8a0 	bl	8001854 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001714:	f107 0115 	add.w	r1, r7, #21
 8001718:	f107 0016 	add.w	r0, r7, #22
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f7ff fd49 	bl	80011b6 <bme280_set_regs>
 8001724:	4603      	mov	r3, r0
 8001726:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001728:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001742:	23f5      	movs	r3, #245	; 0xf5
 8001744:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001746:	7db8      	ldrb	r0, [r7, #22]
 8001748:	f107 0115 	add.w	r1, r7, #21
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f7ff fd01 	bl	8001156 <bme280_get_regs>
 8001754:	4603      	mov	r3, r0
 8001756:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11f      	bne.n	80017a0 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800176a:	f107 0315 	add.w	r3, r7, #21
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f81b 	bl	80017ac <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001780:	f107 0315 	add.w	r3, r7, #21
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f82d 	bl	80017e6 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800178c:	f107 0115 	add.w	r1, r7, #21
 8001790:	f107 0016 	add.w	r0, r7, #22
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f7ff fd0d 	bl	80011b6 <bme280_set_regs>
 800179c:	4603      	mov	r3, r0
 800179e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80017a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	f023 031c 	bic.w	r3, r3, #28
 80017c0:	b25a      	sxtb	r2, r3
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	78db      	ldrb	r3, [r3, #3]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f003 031c 	and.w	r3, r3, #28
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	701a      	strb	r2, [r3, #0]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	b25a      	sxtb	r2, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	791b      	ldrb	r3, [r3, #4]
 8001800:	015b      	lsls	r3, r3, #5
 8001802:	b25b      	sxtb	r3, r3
 8001804:	4313      	orrs	r3, r2
 8001806:	b25b      	sxtb	r3, r3
 8001808:	b2da      	uxtb	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	701a      	strb	r2, [r3, #0]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b25b      	sxtb	r3, r3
 800182a:	f023 031c 	bic.w	r3, r3, #28
 800182e:	b25a      	sxtb	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	b25b      	sxtb	r3, r3
 8001838:	f003 031c 	and.w	r3, r3, #28
 800183c:	b25b      	sxtb	r3, r3
 800183e:	4313      	orrs	r3, r2
 8001840:	b25b      	sxtb	r3, r3
 8001842:	b2da      	uxtb	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	701a      	strb	r2, [r3, #0]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b25b      	sxtb	r3, r3
 8001864:	f003 031f 	and.w	r3, r3, #31
 8001868:	b25a      	sxtb	r2, r3
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	015b      	lsls	r3, r3, #5
 8001870:	b25b      	sxtb	r3, r3
 8001872:	4313      	orrs	r3, r2
 8001874:	b25b      	sxtb	r3, r3
 8001876:	b2da      	uxtb	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	701a      	strb	r2, [r3, #0]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	b2da      	uxtb	r2, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3302      	adds	r3, #2
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	109b      	asrs	r3, r3, #2
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3302      	adds	r3, #2
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3303      	adds	r3, #3
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	109b      	asrs	r3, r3, #2
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3303      	adds	r3, #3
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	095b      	lsrs	r3, r3, #5
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	711a      	strb	r2, [r3, #4]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80018fc:	23f4      	movs	r3, #244	; 0xf4
 80018fe:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001900:	7bb8      	ldrb	r0, [r7, #14]
 8001902:	f107 010d 	add.w	r1, r7, #13
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	2201      	movs	r2, #1
 800190a:	f7ff fc24 	bl	8001156 <bme280_get_regs>
 800190e:	4603      	mov	r3, r0
 8001910:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d117      	bne.n	800194a <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800191a:	7b7b      	ldrb	r3, [r7, #13]
 800191c:	b25b      	sxtb	r3, r3
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	b25a      	sxtb	r2, r3
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	b25b      	sxtb	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b25b      	sxtb	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001936:	f107 010d 	add.w	r1, r7, #13
 800193a:	f107 000e 	add.w	r0, r7, #14
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	f7ff fc38 	bl	80011b6 <bme280_set_regs>
 8001946:	4603      	mov	r3, r0
 8001948:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800195e:	f107 0110 	add.w	r1, r7, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2204      	movs	r2, #4
 8001966:	20f2      	movs	r0, #242	; 0xf2
 8001968:	f7ff fbf5 	bl	8001156 <bme280_get_regs>
 800196c:	4603      	mov	r3, r0
 800196e:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001970:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d118      	bne.n	80019aa <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001978:	f107 0208 	add.w	r2, r7, #8
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff80 	bl	8001888 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fd39 	bl	8001400 <bme280_soft_reset>
 800198e:	4603      	mov	r3, r0
 8001990:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8001992:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d107      	bne.n	80019aa <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f808 	bl	80019b6 <reload_device_settings>
 80019a6:	4603      	mov	r3, r0
 80019a8:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80019aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	201f      	movs	r0, #31
 80019c6:	f7ff fe18 	bl	80015fa <set_osr_settings>
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80019ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	201f      	movs	r0, #31
 80019dc:	f7ff feaa 	bl	8001734 <set_filter_standby_settings>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80019e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <compensate_temperature+0xc0>)
 80019fc:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 80019fe:	f242 1334 	movw	r3, #8500	; 0x2134
 8001a02:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	08db      	lsrs	r3, r3, #3
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	8812      	ldrh	r2, [r2, #0]
 8001a0e:	0052      	lsls	r2, r2, #1
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	da01      	bge.n	8001a2a <compensate_temperature+0x3a>
 8001a26:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001a2a:	12db      	asrs	r3, r3, #11
 8001a2c:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	8812      	ldrh	r2, [r2, #0]
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	fb03 f303 	mul.w	r3, r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da01      	bge.n	8001a4a <compensate_temperature+0x5a>
 8001a46:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001a4a:	131b      	asrs	r3, r3, #12
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	da02      	bge.n	8001a62 <compensate_temperature+0x72>
 8001a5c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001a60:	333f      	adds	r3, #63	; 0x3f
 8001a62:	139b      	asrs	r3, r3, #14
 8001a64:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	441a      	add	r2, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	3380      	adds	r3, #128	; 0x80
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	da00      	bge.n	8001a82 <compensate_temperature+0x92>
 8001a80:	33ff      	adds	r3, #255	; 0xff
 8001a82:	121b      	asrs	r3, r3, #8
 8001a84:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	da02      	bge.n	8001a94 <compensate_temperature+0xa4>
		temperature = temperature_min;
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e005      	b.n	8001aa0 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dd01      	ble.n	8001aa0 <compensate_temperature+0xb0>
		temperature = temperature_max;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001aa0:	69fb      	ldr	r3, [r7, #28]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	fffff060 	.word	0xfffff060

08001ab4 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab8:	b0ea      	sub	sp, #424	; 0x1a8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
 8001ac0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001ac4:	4bbf      	ldr	r3, [pc, #764]	; (8001dc4 <compensate_pressure+0x310>)
 8001ac6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	uint32_t pressure_max = 11000000;
 8001aca:	4bbf      	ldr	r3, [pc, #764]	; (8001dc8 <compensate_pressure+0x314>)
 8001acc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001ad0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	17da      	asrs	r2, r3, #31
 8001ad8:	4698      	mov	r8, r3
 8001ada:	4691      	mov	r9, r2
 8001adc:	f5b8 3afa 	subs.w	sl, r8, #128000	; 0x1f400
 8001ae0:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001ae4:	e9c7 ab64 	strd	sl, fp, [r7, #400]	; 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001ae8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001aec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001af0:	fb03 f102 	mul.w	r1, r3, r2
 8001af4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001af8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	18ca      	adds	r2, r1, r3
 8001b02:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b06:	fba3 4503 	umull	r4, r5, r3, r3
 8001b0a:	1953      	adds	r3, r2, r5
 8001b0c:	461d      	mov	r5, r3
 8001b0e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001b12:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	17da      	asrs	r2, r3, #31
 8001b1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b1e:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8001b22:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8001b26:	4603      	mov	r3, r0
 8001b28:	fb03 f205 	mul.w	r2, r3, r5
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	fb04 f303 	mul.w	r3, r4, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	4602      	mov	r2, r0
 8001b36:	fba4 1202 	umull	r1, r2, r4, r2
 8001b3a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8001b3e:	460a      	mov	r2, r1
 8001b40:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 8001b44:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001b48:	4413      	add	r3, r2
 8001b4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001b4e:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8001b52:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8001b56:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001b5a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001b5e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	17da      	asrs	r2, r3, #31
 8001b66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001b6a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001b6e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b72:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8001b76:	462a      	mov	r2, r5
 8001b78:	fb02 f203 	mul.w	r2, r2, r3
 8001b7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001b80:	4621      	mov	r1, r4
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	441a      	add	r2, r3
 8001b88:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	fba3 1301 	umull	r1, r3, r3, r1
 8001b92:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001b96:	460b      	mov	r3, r1
 8001b98:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001b9c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001ba0:	18d3      	adds	r3, r2, r3
 8001ba2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001ba6:	f04f 0000 	mov.w	r0, #0
 8001baa:	f04f 0100 	mov.w	r1, #0
 8001bae:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8001bb2:	462b      	mov	r3, r5
 8001bb4:	0459      	lsls	r1, r3, #17
 8001bb6:	4623      	mov	r3, r4
 8001bb8:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001bbc:	4623      	mov	r3, r4
 8001bbe:	0458      	lsls	r0, r3, #17
 8001bc0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001bc4:	1814      	adds	r4, r2, r0
 8001bc6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8001bca:	414b      	adcs	r3, r1
 8001bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001bd0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8001bd4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001bd8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001bdc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	17da      	asrs	r2, r3, #31
 8001be4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001be8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8001bec:	f04f 0000 	mov.w	r0, #0
 8001bf0:	f04f 0100 	mov.w	r1, #0
 8001bf4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001bf8:	00d9      	lsls	r1, r3, #3
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001c00:	1814      	adds	r4, r2, r0
 8001c02:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8001c06:	414b      	adcs	r3, r1
 8001c08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001c0c:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8001c10:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001c14:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c18:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c1c:	fb03 f102 	mul.w	r1, r3, r2
 8001c20:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c24:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c28:	fb02 f303 	mul.w	r3, r2, r3
 8001c2c:	18ca      	adds	r2, r1, r3
 8001c2e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c32:	fba3 1303 	umull	r1, r3, r3, r3
 8001c36:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001c40:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001c44:	18d3      	adds	r3, r2, r3
 8001c46:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001c4a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001c4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	17da      	asrs	r2, r3, #31
 8001c56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001c5a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001c5e:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8001c62:	462b      	mov	r3, r5
 8001c64:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 8001c68:	4642      	mov	r2, r8
 8001c6a:	fb02 f203 	mul.w	r2, r2, r3
 8001c6e:	464b      	mov	r3, r9
 8001c70:	4621      	mov	r1, r4
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	4622      	mov	r2, r4
 8001c7a:	4641      	mov	r1, r8
 8001c7c:	fba2 1201 	umull	r1, r2, r2, r1
 8001c80:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8001c84:	460a      	mov	r2, r1
 8001c86:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
 8001c8a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001c8e:	4413      	add	r3, r2
 8001c90:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001c94:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da09      	bge.n	8001cb0 <compensate_pressure+0x1fc>
 8001c9c:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001ca0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001ca4:	f143 0300 	adc.w	r3, r3, #0
 8001ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001cac:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001cb0:	f04f 0000 	mov.w	r0, #0
 8001cb4:	f04f 0100 	mov.w	r1, #0
 8001cb8:	0a10      	lsrs	r0, r2, #8
 8001cba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001cbe:	1219      	asrs	r1, r3, #8
 8001cc0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001cc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	17da      	asrs	r2, r3, #31
 8001ccc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001cd0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001cd4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001cd8:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8001cdc:	464a      	mov	r2, r9
 8001cde:	fb02 f203 	mul.w	r2, r2, r3
 8001ce2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001ce6:	4644      	mov	r4, r8
 8001ce8:	fb04 f303 	mul.w	r3, r4, r3
 8001cec:	441a      	add	r2, r3
 8001cee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001cf2:	4644      	mov	r4, r8
 8001cf4:	fba3 4304 	umull	r4, r3, r3, r4
 8001cf8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001cfc:	4623      	mov	r3, r4
 8001cfe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d02:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001d06:	18d3      	adds	r3, r2, r3
 8001d08:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8001d18:	464c      	mov	r4, r9
 8001d1a:	0323      	lsls	r3, r4, #12
 8001d1c:	4644      	mov	r4, r8
 8001d1e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001d22:	4644      	mov	r4, r8
 8001d24:	0322      	lsls	r2, r4, #12
 8001d26:	1884      	adds	r4, r0, r2
 8001d28:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8001d2c:	eb41 0303 	adc.w	r3, r1, r3
 8001d30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d34:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001d38:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d44:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001d48:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8001d4c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001d50:	1884      	adds	r4, r0, r2
 8001d52:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 8001d56:	eb41 0303 	adc.w	r3, r1, r3
 8001d5a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001d5e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001d62:	88db      	ldrh	r3, [r3, #6]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2200      	movs	r2, #0
 8001d68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001d6c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001d70:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001d74:	462b      	mov	r3, r5
 8001d76:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8001d7a:	4642      	mov	r2, r8
 8001d7c:	fb02 f203 	mul.w	r2, r2, r3
 8001d80:	464b      	mov	r3, r9
 8001d82:	4621      	mov	r1, r4
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	4641      	mov	r1, r8
 8001d8e:	fba2 1201 	umull	r1, r2, r2, r1
 8001d92:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001d96:	460a      	mov	r2, r1
 8001d98:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d9c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001da0:	4413      	add	r3, r2
 8001da2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001da6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da0e      	bge.n	8001dcc <compensate_pressure+0x318>
 8001dae:	1e51      	subs	r1, r2, #1
 8001db0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001db4:	f143 0301 	adc.w	r3, r3, #1
 8001db8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001dbc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001dc0:	e004      	b.n	8001dcc <compensate_pressure+0x318>
 8001dc2:	bf00      	nop
 8001dc4:	002dc6c0 	.word	0x002dc6c0
 8001dc8:	00a7d8c0 	.word	0x00a7d8c0
 8001dcc:	f04f 0000 	mov.w	r0, #0
 8001dd0:	f04f 0100 	mov.w	r1, #0
 8001dd4:	1058      	asrs	r0, r3, #1
 8001dd6:	17d9      	asrs	r1, r3, #31
 8001dd8:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001ddc:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001de0:	4313      	orrs	r3, r2
 8001de2:	f000 81fc 	beq.w	80021de <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001de6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001df0:	2200      	movs	r2, #0
 8001df2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001df6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001dfa:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8001dfe:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001e02:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001e06:	f04f 0000 	mov.w	r0, #0
 8001e0a:	f04f 0100 	mov.w	r1, #0
 8001e0e:	07d9      	lsls	r1, r3, #31
 8001e10:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001e14:	07d0      	lsls	r0, r2, #31
 8001e16:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001e1a:	1a84      	subs	r4, r0, r2
 8001e1c:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 8001e20:	eb61 0303 	sbc.w	r3, r1, r3
 8001e24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001e28:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e2c:	4622      	mov	r2, r4
 8001e2e:	462b      	mov	r3, r5
 8001e30:	1891      	adds	r1, r2, r2
 8001e32:	67b9      	str	r1, [r7, #120]	; 0x78
 8001e34:	415b      	adcs	r3, r3
 8001e36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e38:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	1851      	adds	r1, r2, r1
 8001e40:	6739      	str	r1, [r7, #112]	; 0x70
 8001e42:	4629      	mov	r1, r5
 8001e44:	414b      	adcs	r3, r1
 8001e46:	677b      	str	r3, [r7, #116]	; 0x74
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001e54:	4649      	mov	r1, r9
 8001e56:	018b      	lsls	r3, r1, #6
 8001e58:	4641      	mov	r1, r8
 8001e5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e5e:	4641      	mov	r1, r8
 8001e60:	018a      	lsls	r2, r1, #6
 8001e62:	4641      	mov	r1, r8
 8001e64:	1889      	adds	r1, r1, r2
 8001e66:	66b9      	str	r1, [r7, #104]	; 0x68
 8001e68:	4649      	mov	r1, r9
 8001e6a:	eb43 0101 	adc.w	r1, r3, r1
 8001e6e:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8001e7c:	4649      	mov	r1, r9
 8001e7e:	008b      	lsls	r3, r1, #2
 8001e80:	4641      	mov	r1, r8
 8001e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e86:	4641      	mov	r1, r8
 8001e88:	008a      	lsls	r2, r1, #2
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4622      	mov	r2, r4
 8001e92:	189b      	adds	r3, r3, r2
 8001e94:	663b      	str	r3, [r7, #96]	; 0x60
 8001e96:	460b      	mov	r3, r1
 8001e98:	462a      	mov	r2, r5
 8001e9a:	eb42 0303 	adc.w	r3, r2, r3
 8001e9e:	667b      	str	r3, [r7, #100]	; 0x64
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001eac:	4649      	mov	r1, r9
 8001eae:	008b      	lsls	r3, r1, #2
 8001eb0:	4641      	mov	r1, r8
 8001eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001eb6:	4641      	mov	r1, r8
 8001eb8:	008a      	lsls	r2, r1, #2
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4622      	mov	r2, r4
 8001ec2:	189b      	adds	r3, r3, r2
 8001ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ec8:	462b      	mov	r3, r5
 8001eca:	460a      	mov	r2, r1
 8001ecc:	eb42 0303 	adc.w	r3, r2, r3
 8001ed0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001ed4:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8001ed8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001edc:	f7fe feec 	bl	8000cb8 <__aeabi_ldivmod>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001ee8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001eec:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	17da      	asrs	r2, r3, #31
 8001ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001ef8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001efc:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	da08      	bge.n	8001f16 <compensate_pressure+0x462>
 8001f04:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001f08:	1851      	adds	r1, r2, r1
 8001f0a:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f0c:	f143 0300 	adc.w	r3, r3, #0
 8001f10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f16:	f04f 0000 	mov.w	r0, #0
 8001f1a:	f04f 0100 	mov.w	r1, #0
 8001f1e:	0b50      	lsrs	r0, r2, #13
 8001f20:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f24:	1359      	asrs	r1, r3, #13
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001f2e:	4629      	mov	r1, r5
 8001f30:	fb02 f001 	mul.w	r0, r2, r1
 8001f34:	4621      	mov	r1, r4
 8001f36:	fb01 f103 	mul.w	r1, r1, r3
 8001f3a:	4401      	add	r1, r0
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	fba0 2302 	umull	r2, r3, r0, r2
 8001f42:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001f46:	4613      	mov	r3, r2
 8001f48:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001f4c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001f50:	18cb      	adds	r3, r1, r3
 8001f52:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001f56:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	da08      	bge.n	8001f70 <compensate_pressure+0x4bc>
 8001f5e:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001f62:	1851      	adds	r1, r2, r1
 8001f64:	6539      	str	r1, [r7, #80]	; 0x50
 8001f66:	f143 0300 	adc.w	r3, r3, #0
 8001f6a:	657b      	str	r3, [r7, #84]	; 0x54
 8001f6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f70:	f04f 0000 	mov.w	r0, #0
 8001f74:	f04f 0100 	mov.w	r1, #0
 8001f78:	0b50      	lsrs	r0, r2, #13
 8001f7a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001f7e:	1359      	asrs	r1, r3, #13
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8001f88:	4629      	mov	r1, r5
 8001f8a:	fb02 f001 	mul.w	r0, r2, r1
 8001f8e:	4621      	mov	r1, r4
 8001f90:	fb01 f103 	mul.w	r1, r1, r3
 8001f94:	4401      	add	r1, r0
 8001f96:	4620      	mov	r0, r4
 8001f98:	fba0 2302 	umull	r2, r3, r0, r2
 8001f9c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001fa6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001faa:	18cb      	adds	r3, r1, r3
 8001fac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001fb0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da08      	bge.n	8001fca <compensate_pressure+0x516>
 8001fb8:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8001fbc:	1851      	adds	r1, r2, r1
 8001fbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8001fc0:	f143 0300 	adc.w	r3, r3, #0
 8001fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fc6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fca:	f04f 0000 	mov.w	r0, #0
 8001fce:	f04f 0100 	mov.w	r1, #0
 8001fd2:	0e50      	lsrs	r0, r2, #25
 8001fd4:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001fd8:	1659      	asrs	r1, r3, #25
 8001fda:	e9c7 0164 	strd	r0, r1, [r7, #400]	; 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001fde:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001fe2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	17da      	asrs	r2, r3, #31
 8001fea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fee:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ff2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001ff6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001ffa:	462a      	mov	r2, r5
 8001ffc:	fb02 f203 	mul.w	r2, r2, r3
 8002000:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002004:	4621      	mov	r1, r4
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	441a      	add	r2, r3
 800200c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002010:	4621      	mov	r1, r4
 8002012:	fba3 1301 	umull	r1, r3, r3, r1
 8002016:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800201a:	460b      	mov	r3, r1
 800201c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002020:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002024:	18d3      	adds	r3, r2, r3
 8002026:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800202a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800202e:	2b00      	cmp	r3, #0
 8002030:	da07      	bge.n	8002042 <compensate_pressure+0x58e>
 8002032:	4971      	ldr	r1, [pc, #452]	; (80021f8 <compensate_pressure+0x744>)
 8002034:	1851      	adds	r1, r2, r1
 8002036:	6439      	str	r1, [r7, #64]	; 0x40
 8002038:	f143 0300 	adc.w	r3, r3, #0
 800203c:	647b      	str	r3, [r7, #68]	; 0x44
 800203e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002042:	f04f 0000 	mov.w	r0, #0
 8002046:	f04f 0100 	mov.w	r1, #0
 800204a:	0cd0      	lsrs	r0, r2, #19
 800204c:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8002050:	14d9      	asrs	r1, r3, #19
 8002052:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8002056:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800205a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800205e:	1884      	adds	r4, r0, r2
 8002060:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8002064:	eb41 0303 	adc.w	r3, r1, r3
 8002068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800206c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002070:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002074:	4621      	mov	r1, r4
 8002076:	1889      	adds	r1, r1, r2
 8002078:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800207c:	4629      	mov	r1, r5
 800207e:	eb43 0101 	adc.w	r1, r3, r1
 8002082:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8002086:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800208a:	2b00      	cmp	r3, #0
 800208c:	da07      	bge.n	800209e <compensate_pressure+0x5ea>
 800208e:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8002092:	63b9      	str	r1, [r7, #56]	; 0x38
 8002094:	f143 0300 	adc.w	r3, r3, #0
 8002098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800209a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800209e:	f04f 0000 	mov.w	r0, #0
 80020a2:	f04f 0100 	mov.w	r1, #0
 80020a6:	0a10      	lsrs	r0, r2, #8
 80020a8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020ac:	1219      	asrs	r1, r3, #8
 80020ae:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80020b2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	17da      	asrs	r2, r3, #31
 80020ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020be:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80020ce:	464c      	mov	r4, r9
 80020d0:	0123      	lsls	r3, r4, #4
 80020d2:	4644      	mov	r4, r8
 80020d4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80020d8:	4644      	mov	r4, r8
 80020da:	0122      	lsls	r2, r4, #4
 80020dc:	1884      	adds	r4, r0, r2
 80020de:	633c      	str	r4, [r7, #48]	; 0x30
 80020e0:	eb41 0303 	adc.w	r3, r1, r3
 80020e4:	637b      	str	r3, [r7, #52]	; 0x34
 80020e6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80020ea:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 80020ee:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80020f2:	0fd9      	lsrs	r1, r3, #31
 80020f4:	2000      	movs	r0, #0
 80020f6:	62b9      	str	r1, [r7, #40]	; 0x28
 80020f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80020fa:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80020fe:	4621      	mov	r1, r4
 8002100:	1889      	adds	r1, r1, r2
 8002102:	6239      	str	r1, [r7, #32]
 8002104:	4629      	mov	r1, r5
 8002106:	eb43 0101 	adc.w	r1, r3, r1
 800210a:	6279      	str	r1, [r7, #36]	; 0x24
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002118:	4621      	mov	r1, r4
 800211a:	084a      	lsrs	r2, r1, #1
 800211c:	4629      	mov	r1, r5
 800211e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8002122:	4629      	mov	r1, r5
 8002124:	104b      	asrs	r3, r1, #1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	1894      	adds	r4, r2, r2
 8002130:	61bc      	str	r4, [r7, #24]
 8002132:	415b      	adcs	r3, r3
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800213a:	1814      	adds	r4, r2, r0
 800213c:	613c      	str	r4, [r7, #16]
 800213e:	414b      	adcs	r3, r1
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800214e:	464c      	mov	r4, r9
 8002150:	0163      	lsls	r3, r4, #5
 8002152:	4644      	mov	r4, r8
 8002154:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002158:	4644      	mov	r4, r8
 800215a:	0162      	lsls	r2, r4, #5
 800215c:	4644      	mov	r4, r8
 800215e:	18a4      	adds	r4, r4, r2
 8002160:	60bc      	str	r4, [r7, #8]
 8002162:	464c      	mov	r4, r9
 8002164:	eb43 0404 	adc.w	r4, r3, r4
 8002168:	60fc      	str	r4, [r7, #12]
 800216a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800216e:	4623      	mov	r3, r4
 8002170:	181b      	adds	r3, r3, r0
 8002172:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002176:	462b      	mov	r3, r5
 8002178:	eb41 0303 	adc.w	r3, r1, r3
 800217c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002180:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002184:	2b00      	cmp	r3, #0
 8002186:	da07      	bge.n	8002198 <compensate_pressure+0x6e4>
 8002188:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	f143 0300 	adc.w	r3, r3, #0
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002198:	f04f 0000 	mov.w	r0, #0
 800219c:	f04f 0100 	mov.w	r1, #0
 80021a0:	09d0      	lsrs	r0, r2, #7
 80021a2:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80021a6:	11d9      	asrs	r1, r3, #7
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4613      	mov	r3, r2
 80021ae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

		if (pressure < pressure_min)
 80021b2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80021b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d204      	bcs.n	80021c8 <compensate_pressure+0x714>
			pressure = pressure_min;
 80021be:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80021c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021c6:	e00e      	b.n	80021e6 <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 80021c8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80021cc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d908      	bls.n	80021e6 <compensate_pressure+0x732>
			pressure = pressure_max;
 80021d4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80021d8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021dc:	e003      	b.n	80021e6 <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 80021de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80021e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	}

	return pressure;
 80021e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021f6:	bf00      	nop
 80021f8:	0007ffff 	.word	0x0007ffff

080021fc <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b08b      	sub	sp, #44	; 0x2c
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 8002206:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800220a:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002214:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	039b      	lsls	r3, r3, #14
 800221c:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002224:	051b      	lsls	r3, r3, #20
 8002226:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800222e:	461a      	mov	r2, r3
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	1ad2      	subs	r2, r2, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002246:	2b00      	cmp	r3, #0
 8002248:	da02      	bge.n	8002250 <compensate_humidity+0x54>
 800224a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800224e:	337f      	adds	r3, #127	; 0x7f
 8002250:	13db      	asrs	r3, r3, #15
 8002252:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 800225a:	461a      	mov	r2, r3
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	da01      	bge.n	800226a <compensate_humidity+0x6e>
 8002266:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800226a:	129b      	asrs	r3, r3, #10
 800226c:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	7f1b      	ldrb	r3, [r3, #28]
 8002272:	461a      	mov	r2, r3
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	da01      	bge.n	8002282 <compensate_humidity+0x86>
 800227e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002282:	12db      	asrs	r3, r3, #11
 8002284:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	da01      	bge.n	800229a <compensate_humidity+0x9e>
 8002296:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800229a:	129b      	asrs	r3, r3, #10
 800229c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80022a0:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80022a8:	461a      	mov	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	fb02 f303 	mul.w	r3, r2, r3
 80022b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	da02      	bge.n	80022be <compensate_humidity+0xc2>
 80022b8:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80022bc:	333f      	adds	r3, #63	; 0x3f
 80022be:	139b      	asrs	r3, r3, #14
 80022c0:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	fb02 f303 	mul.w	r3, r2, r3
 80022ca:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da02      	bge.n	80022d8 <compensate_humidity+0xdc>
 80022d2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80022d6:	337f      	adds	r3, #127	; 0x7f
 80022d8:	13db      	asrs	r3, r3, #15
 80022da:	461a      	mov	r2, r3
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da02      	bge.n	80022e8 <compensate_humidity+0xec>
 80022e2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80022e6:	337f      	adds	r3, #127	; 0x7f
 80022e8:	13db      	asrs	r3, r3, #15
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da00      	bge.n	80022f4 <compensate_humidity+0xf8>
 80022f2:	337f      	adds	r3, #127	; 0x7f
 80022f4:	11db      	asrs	r3, r3, #7
 80022f6:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	7e1b      	ldrb	r3, [r3, #24]
 80022fc:	461a      	mov	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	da00      	bge.n	800230a <compensate_humidity+0x10e>
 8002308:	330f      	adds	r3, #15
 800230a:	111b      	asrs	r3, r3, #4
 800230c:	425b      	negs	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800231c:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002324:	bfa8      	it	ge
 8002326:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800232a:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	da01      	bge.n	8002336 <compensate_humidity+0x13a>
 8002332:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002336:	131b      	asrs	r3, r3, #12
 8002338:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 800233a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	429a      	cmp	r2, r3
 8002340:	d901      	bls.n	8002346 <compensate_humidity+0x14a>
		humidity = humidity_max;
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002348:	4618      	mov	r0, r3
 800234a:	372c      	adds	r7, #44	; 0x2c
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 800235c:	2388      	movs	r3, #136	; 0x88
 800235e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	f107 0310 	add.w	r3, r7, #16
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	611a      	str	r2, [r3, #16]
 8002376:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002378:	f107 010c 	add.w	r1, r7, #12
 800237c:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	221a      	movs	r2, #26
 8002384:	f7fe fee7 	bl	8001156 <bme280_get_regs>
 8002388:	4603      	mov	r3, r0
 800238a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800238e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002392:	2b00      	cmp	r3, #0
 8002394:	d11d      	bne.n	80023d2 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f84a 	bl	8002436 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80023a2:	23e1      	movs	r3, #225	; 0xe1
 80023a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80023a8:	f107 010c 	add.w	r1, r7, #12
 80023ac:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2207      	movs	r2, #7
 80023b4:	f7fe fecf 	bl	8001156 <bme280_get_regs>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80023be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f8e2 	bl	8002596 <parse_humidity_calib_data>
		}
	}

	return rslt;
 80023d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3728      	adds	r7, #40	; 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80023de:	b480      	push	{r7}
 80023e0:	b087      	sub	sp, #28
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80023ec:	2301      	movs	r3, #1
 80023ee:	75fb      	strb	r3, [r7, #23]
 80023f0:	e016      	b.n	8002420 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	441a      	add	r2, r3
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	3b01      	subs	r3, #1
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	440b      	add	r3, r1
 8002402:	7812      	ldrb	r2, [r2, #0]
 8002404:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	441a      	add	r2, r3
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4619      	mov	r1, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	440b      	add	r3, r1
 8002416:	7812      	ldrb	r2, [r2, #0]
 8002418:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 800241a:	7dfb      	ldrb	r3, [r7, #23]
 800241c:	3301      	adds	r3, #1
 800241e:	75fb      	strb	r3, [r7, #23]
 8002420:	7dfa      	ldrb	r2, [r7, #23]
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	429a      	cmp	r2, r3
 8002426:	d3e4      	bcc.n	80023f2 <interleave_reg_addr+0x14>
	}
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	3310      	adds	r3, #16
 8002444:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3301      	adds	r3, #1
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	b21a      	sxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b21b      	sxth	r3, r3
 8002456:	4313      	orrs	r3, r2
 8002458:	b21b      	sxth	r3, r3
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3303      	adds	r3, #3
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	b21a      	sxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3302      	adds	r3, #2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b21b      	sxth	r3, r3
 8002472:	4313      	orrs	r3, r2
 8002474:	b21a      	sxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3305      	adds	r3, #5
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	b21a      	sxth	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3304      	adds	r3, #4
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	b21b      	sxth	r3, r3
 800248c:	4313      	orrs	r3, r2
 800248e:	b21a      	sxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3307      	adds	r3, #7
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	b21a      	sxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3306      	adds	r3, #6
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3309      	adds	r3, #9
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3308      	adds	r3, #8
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	4313      	orrs	r3, r2
 80024c4:	b21a      	sxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	330b      	adds	r3, #11
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	330a      	adds	r3, #10
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b21b      	sxth	r3, r3
 80024dc:	4313      	orrs	r3, r2
 80024de:	b21a      	sxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	330d      	adds	r3, #13
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	b21a      	sxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	330c      	adds	r3, #12
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b21b      	sxth	r3, r3
 80024f6:	4313      	orrs	r3, r2
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	330f      	adds	r3, #15
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	b21a      	sxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	330e      	adds	r3, #14
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b21b      	sxth	r3, r3
 8002510:	4313      	orrs	r3, r2
 8002512:	b21a      	sxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3311      	adds	r3, #17
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	b21a      	sxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3310      	adds	r3, #16
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b21b      	sxth	r3, r3
 800252a:	4313      	orrs	r3, r2
 800252c:	b21a      	sxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3313      	adds	r3, #19
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	b21a      	sxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3312      	adds	r3, #18
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b21b      	sxth	r3, r3
 8002544:	4313      	orrs	r3, r2
 8002546:	b21a      	sxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3315      	adds	r3, #21
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	b21a      	sxth	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3314      	adds	r3, #20
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b21b      	sxth	r3, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	b21a      	sxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3317      	adds	r3, #23
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	b21a      	sxth	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3316      	adds	r3, #22
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b21b      	sxth	r3, r3
 8002578:	4313      	orrs	r3, r2
 800257a:	b21a      	sxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3319      	adds	r3, #25
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	761a      	strb	r2, [r3, #24]

}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002596:	b480      	push	{r7}
 8002598:	b087      	sub	sp, #28
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	3310      	adds	r3, #16
 80025a4:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3301      	adds	r3, #1
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	b21a      	sxth	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	4313      	orrs	r3, r2
 80025b8:	b21a      	sxth	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3302      	adds	r3, #2
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3303      	adds	r3, #3
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3304      	adds	r3, #4
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b21b      	sxth	r3, r3
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80025e6:	8a7a      	ldrh	r2, [r7, #18]
 80025e8:	8a3b      	ldrh	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	b21a      	sxth	r2, r3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3305      	adds	r3, #5
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b25b      	sxtb	r3, r3
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	b29b      	uxth	r3, r3
 8002600:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	b2db      	uxtb	r3, r3
 800260c:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 800260e:	89fa      	ldrh	r2, [r7, #14]
 8002610:	89bb      	ldrh	r3, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	b21a      	sxth	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3306      	adds	r3, #6
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	b25a      	sxtb	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002628:	bf00      	nop
 800262a:	371c      	adds	r7, #28
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	460a      	mov	r2, r1
 800263e:	71fb      	strb	r3, [r7, #7]
 8002640:	4613      	mov	r3, r2
 8002642:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002648:	79fa      	ldrb	r2, [r7, #7]
 800264a:	79bb      	ldrb	r3, [r7, #6]
 800264c:	4013      	ands	r3, r2
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	e001      	b.n	800265e <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800265a:	2300      	movs	r3, #0
 800265c:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <null_ptr_check+0x26>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <null_ptr_check+0x26>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <null_ptr_check+0x26>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002692:	23ff      	movs	r3, #255	; 0xff
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e001      	b.n	800269c <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800269c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <FIRFilter_Init>:
static float MAF_IMPULSE_RESPONSE [4] = {0.25f , 0.25f , 0.25f , 0.25f};



void FIRFilter_Init(FIRFilter *fir)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	e009      	b.n	80026ce <FIRFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	3301      	adds	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	2b0f      	cmp	r3, #15
 80026d2:	d9f2      	bls.n	80026ba <FIRFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	fir->out = 0; // clear output
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	645a      	str	r2, [r3, #68]	; 0x44
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <FIRFilter_Update>:




float FIRFilter_Update(FIRFilter *fir , float inp)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	ed87 0a00 	vstr	s0, [r7]
	// son gelen veriyi buffer'a kaydet
	fir->buf[fir->bufIndex] =inp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	601a      	str	r2, [r3, #0]

	// buffer indexini arttır
	fir->bufIndex++;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002712:	3301      	adds	r3, #1
 8002714:	b2da      	uxtb	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	// index uzunluğu taşması kontrolü

	if(fir->bufIndex == FIR_FILTER_LENGHT) fir->bufIndex=0;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002722:	2b10      	cmp	r3, #16
 8002724:	d103      	bne.n	800272e <FIRFilter_Update+0x3e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	fir->out =0;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	645a      	str	r2, [r3, #68]	; 0x44

	uint8_t sumIndex = fir->bufIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800273c:	73fb      	strb	r3, [r7, #15]

	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 800273e:	2300      	movs	r3, #0
 8002740:	73bb      	strb	r3, [r7, #14]
 8002742:	e021      	b.n	8002788 <FIRFilter_Update+0x98>
	{
		// index kontrol
		if(sumIndex >0) sumIndex --;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <FIRFilter_Update+0x62>
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	3b01      	subs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	e001      	b.n	8002756 <FIRFilter_Update+0x66>
		else sumIndex = FIR_FILTER_LENGHT-1;
 8002752:	230f      	movs	r3, #15
 8002754:	73fb      	strb	r3, [r7, #15]

		// convulution toplam kısmı
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800275c:	7bbb      	ldrb	r3, [r7, #14]
 800275e:	4a11      	ldr	r2, [pc, #68]	; (80027a4 <FIRFilter_Update+0xb4>)
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	edd3 6a00 	vldr	s13, [r3]
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	for (uint8_t n = 0; n< FIR_FILTER_LENGHT; n++)
 8002782:	7bbb      	ldrb	r3, [r7, #14]
 8002784:	3301      	adds	r3, #1
 8002786:	73bb      	strb	r3, [r7, #14]
 8002788:	7bbb      	ldrb	r3, [r7, #14]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	d9da      	bls.n	8002744 <FIRFilter_Update+0x54>

	}

	return fir->out;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	ee07 3a90 	vmov	s15, r3

}
 8002796:	eeb0 0a67 	vmov.f32	s0, s15
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	20000000 	.word	0x20000000

080027a8 <MAFilter_Init>:



void MAFilter_Init(FIRFilter *fir)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e009      	b.n	80027ca <MAFilter_Init+0x22>
	{
		fir->buf[n] =0.0f; // filtre buffer temizleme
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n< MAV_FILTER_LENGHT; n++)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	3301      	adds	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d9f2      	bls.n	80027b6 <MAFilter_Init+0xe>

	}

	fir->bufIndex =0; // index reset
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	fir->out = 0; // clear output
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LSM6DSLTR_Init>:

extern LSM6DSLTR;
extern I2C_HandleTypeDef hi2c1;

void LSM6DSLTR_Init()
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af04      	add	r7, sp, #16
	uint8_t data1;

	// Gyro ve Accel interrupt pin 1 aktif
	data1= 0x03;
 80027f2:	2303      	movs	r3, #3
 80027f4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, INT1_CTR, 1, &data1, 1, 1);
 80027f6:	2301      	movs	r3, #1
 80027f8:	9302      	str	r3, [sp, #8]
 80027fa:	2301      	movs	r3, #1
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	1dfb      	adds	r3, r7, #7
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2301      	movs	r3, #1
 8002804:	220d      	movs	r2, #13
 8002806:	21d4      	movs	r1, #212	; 0xd4
 8002808:	481f      	ldr	r0, [pc, #124]	; (8002888 <LSM6DSLTR_Init+0x9c>)
 800280a:	f004 f865 	bl	80068d8 <HAL_I2C_Mem_Write>

	data1 = 0xA4; // 16G 6.66khz
 800280e:	23a4      	movs	r3, #164	; 0xa4
 8002810:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL1_XL, 1, &data1,  1, 1);
 8002812:	2301      	movs	r3, #1
 8002814:	9302      	str	r3, [sp, #8]
 8002816:	2301      	movs	r3, #1
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2301      	movs	r3, #1
 8002820:	2210      	movs	r2, #16
 8002822:	21d4      	movs	r1, #212	; 0xd4
 8002824:	4818      	ldr	r0, [pc, #96]	; (8002888 <LSM6DSLTR_Init+0x9c>)
 8002826:	f004 f857 	bl	80068d8 <HAL_I2C_Mem_Write>

	data1 = 0xA4; // 500 dps 6.6khz
 800282a:	23a4      	movs	r3, #164	; 0xa4
 800282c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address,CTRL2_G, 1, &data1, 1, 1);
 800282e:	2301      	movs	r3, #1
 8002830:	9302      	str	r3, [sp, #8]
 8002832:	2301      	movs	r3, #1
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	2301      	movs	r3, #1
 800283c:	2211      	movs	r2, #17
 800283e:	21d4      	movs	r1, #212	; 0xd4
 8002840:	4811      	ldr	r0, [pc, #68]	; (8002888 <LSM6DSLTR_Init+0x9c>)
 8002842:	f004 f849 	bl	80068d8 <HAL_I2C_Mem_Write>

	data1= 0x00;
 8002846:	2300      	movs	r3, #0
 8002848:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL3_C, 1, &data1, 1, 1);
 800284a:	2301      	movs	r3, #1
 800284c:	9302      	str	r3, [sp, #8]
 800284e:	2301      	movs	r3, #1
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	1dfb      	adds	r3, r7, #7
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2301      	movs	r3, #1
 8002858:	2212      	movs	r2, #18
 800285a:	21d4      	movs	r1, #212	; 0xd4
 800285c:	480a      	ldr	r0, [pc, #40]	; (8002888 <LSM6DSLTR_Init+0x9c>)
 800285e:	f004 f83b 	bl	80068d8 <HAL_I2C_Mem_Write>

	data1= 0x08;
 8002862:	2308      	movs	r3, #8
 8002864:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL4_C, 1, &data1, 1, 1);
 8002866:	2301      	movs	r3, #1
 8002868:	9302      	str	r3, [sp, #8]
 800286a:	2301      	movs	r3, #1
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	1dfb      	adds	r3, r7, #7
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2301      	movs	r3, #1
 8002874:	2213      	movs	r2, #19
 8002876:	21d4      	movs	r1, #212	; 0xd4
 8002878:	4803      	ldr	r0, [pc, #12]	; (8002888 <LSM6DSLTR_Init+0x9c>)
 800287a:	f004 f82d 	bl	80068d8 <HAL_I2C_Mem_Write>




}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	200002a8 	.word	0x200002a8
 800288c:	00000000 	.word	0x00000000

08002890 <LSM6DSLTR_Read_Accel_Data>:


void LSM6DSLTR_Read_Accel_Data(LSM6DSLTR* Lsm_Sensor)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af04      	add	r7, sp, #16
 8002896:	6078      	str	r0, [r7, #4]
	uint8_t data;
	uint8_t s;
	int16_t accel;


	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_XL, 1, &data, 1, 1);
 8002898:	2301      	movs	r3, #1
 800289a:	9302      	str	r3, [sp, #8]
 800289c:	2301      	movs	r3, #1
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	f107 030d 	add.w	r3, r7, #13
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2301      	movs	r3, #1
 80028a8:	222c      	movs	r2, #44	; 0x2c
 80028aa:	21d5      	movs	r1, #213	; 0xd5
 80028ac:	4864      	ldr	r0, [pc, #400]	; (8002a40 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80028ae:	f004 f90d 	bl	8006acc <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_XL, 1, &s, 1, 1);
 80028b2:	2301      	movs	r3, #1
 80028b4:	9302      	str	r3, [sp, #8]
 80028b6:	2301      	movs	r3, #1
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	f107 030c 	add.w	r3, r7, #12
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2301      	movs	r3, #1
 80028c2:	222d      	movs	r2, #45	; 0x2d
 80028c4:	21d5      	movs	r1, #213	; 0xd5
 80028c6:	485e      	ldr	r0, [pc, #376]	; (8002a40 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80028c8:	f004 f900 	bl	8006acc <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 80028cc:	7b3b      	ldrb	r3, [r7, #12]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	b21a      	sxth	r2, r3
 80028d2:	7b7b      	ldrb	r3, [r7, #13]
 80028d4:	b21b      	sxth	r3, r3
 80028d6:	4313      	orrs	r3, r2
 80028d8:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Z = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 80028da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e6:	ee17 0a90 	vmov	r0, s15
 80028ea:	f7fd fe45 	bl	8000578 <__aeabi_f2d>
 80028ee:	a350      	add	r3, pc, #320	; (adr r3, 8002a30 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fe98 	bl	8000628 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	a34d      	add	r3, pc, #308	; (adr r3, 8002a38 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd fe8f 	bl	8000628 <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f7fe f981 	bl	8000c18 <__aeabi_d2f>
 8002916:	4602      	mov	r2, r0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_XL, 1, &data, 1, 1);
 800291c:	2301      	movs	r3, #1
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	2301      	movs	r3, #1
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	f107 030d 	add.w	r3, r7, #13
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2301      	movs	r3, #1
 800292c:	2228      	movs	r2, #40	; 0x28
 800292e:	21d5      	movs	r1, #213	; 0xd5
 8002930:	4843      	ldr	r0, [pc, #268]	; (8002a40 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002932:	f004 f8cb 	bl	8006acc <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_XL, 1, &s, 1, 1);
 8002936:	2301      	movs	r3, #1
 8002938:	9302      	str	r3, [sp, #8]
 800293a:	2301      	movs	r3, #1
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	f107 030c 	add.w	r3, r7, #12
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2301      	movs	r3, #1
 8002946:	2229      	movs	r2, #41	; 0x29
 8002948:	21d5      	movs	r1, #213	; 0xd5
 800294a:	483d      	ldr	r0, [pc, #244]	; (8002a40 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 800294c:	f004 f8be 	bl	8006acc <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 8002950:	7b3b      	ldrb	r3, [r7, #12]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	b21a      	sxth	r2, r3
 8002956:	7b7b      	ldrb	r3, [r7, #13]
 8002958:	b21b      	sxth	r3, r3
 800295a:	4313      	orrs	r3, r2
 800295c:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_X= (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 800295e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800296a:	ee17 0a90 	vmov	r0, s15
 800296e:	f7fd fe03 	bl	8000578 <__aeabi_f2d>
 8002972:	a32f      	add	r3, pc, #188	; (adr r3, 8002a30 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 8002974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002978:	f7fd fe56 	bl	8000628 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	a32c      	add	r3, pc, #176	; (adr r3, 8002a38 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	f7fd fe4d 	bl	8000628 <__aeabi_dmul>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	f7fe f93f 	bl	8000c18 <__aeabi_d2f>
 800299a:	4602      	mov	r2, r0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	601a      	str	r2, [r3, #0]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_XL, 1, &data, 1, 1);
 80029a0:	2301      	movs	r3, #1
 80029a2:	9302      	str	r3, [sp, #8]
 80029a4:	2301      	movs	r3, #1
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	f107 030d 	add.w	r3, r7, #13
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2301      	movs	r3, #1
 80029b0:	222a      	movs	r2, #42	; 0x2a
 80029b2:	21d5      	movs	r1, #213	; 0xd5
 80029b4:	4822      	ldr	r0, [pc, #136]	; (8002a40 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80029b6:	f004 f889 	bl	8006acc <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_XL, 1, &s, 1, 1);
 80029ba:	2301      	movs	r3, #1
 80029bc:	9302      	str	r3, [sp, #8]
 80029be:	2301      	movs	r3, #1
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	f107 030c 	add.w	r3, r7, #12
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2301      	movs	r3, #1
 80029ca:	222b      	movs	r2, #43	; 0x2b
 80029cc:	21d5      	movs	r1, #213	; 0xd5
 80029ce:	481c      	ldr	r0, [pc, #112]	; (8002a40 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80029d0:	f004 f87c 	bl	8006acc <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 80029d4:	7b3b      	ldrb	r3, [r7, #12]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	b21a      	sxth	r2, r3
 80029da:	7b7b      	ldrb	r3, [r7, #13]
 80029dc:	b21b      	sxth	r3, r3
 80029de:	4313      	orrs	r3, r2
 80029e0:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Y = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 80029e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ee:	ee17 0a90 	vmov	r0, s15
 80029f2:	f7fd fdc1 	bl	8000578 <__aeabi_f2d>
 80029f6:	a30e      	add	r3, pc, #56	; (adr r3, 8002a30 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 80029f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fc:	f7fd fe14 	bl	8000628 <__aeabi_dmul>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	a30b      	add	r3, pc, #44	; (adr r3, 8002a38 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 8002a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0e:	f7fd fe0b 	bl	8000628 <__aeabi_dmul>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f7fe f8fd 	bl	8000c18 <__aeabi_d2f>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	605a      	str	r2, [r3, #4]


}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	f3af 8000 	nop.w
 8002a30:	0a5accd5 	.word	0x0a5accd5
 8002a34:	3f3ffb48 	.word	0x3f3ffb48
 8002a38:	51eb851f 	.word	0x51eb851f
 8002a3c:	40239eb8 	.word	0x40239eb8
 8002a40:	200002a8 	.word	0x200002a8

08002a44 <LSM6DSLTR_Read_Gyro_Data>:

void LSM6DSLTR_Read_Gyro_Data(LSM6DSLTR* Lsm_Sensor){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af04      	add	r7, sp, #16
 8002a4a:	6078      	str	r0, [r7, #4]
     	uint8_t data;
		uint8_t s;
		int16_t gyro;


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_G, 1, &data, 1, 1);
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	9302      	str	r3, [sp, #8]
 8002a50:	2301      	movs	r3, #1
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	f107 030d 	add.w	r3, r7, #13
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	2222      	movs	r2, #34	; 0x22
 8002a5e:	21d5      	movs	r1, #213	; 0xd5
 8002a60:	4843      	ldr	r0, [pc, #268]	; (8002b70 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a62:	f004 f833 	bl	8006acc <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_G, 1, &s, 1, 1);
 8002a66:	2301      	movs	r3, #1
 8002a68:	9302      	str	r3, [sp, #8]
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2301      	movs	r3, #1
 8002a76:	2223      	movs	r2, #35	; 0x23
 8002a78:	21d5      	movs	r1, #213	; 0xd5
 8002a7a:	483d      	ldr	r0, [pc, #244]	; (8002b70 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002a7c:	f004 f826 	bl	8006acc <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002a80:	7b3b      	ldrb	r3, [r7, #12]
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	b21a      	sxth	r2, r3
 8002a86:	7b7b      	ldrb	r3, [r7, #13]
 8002a88:	b21b      	sxth	r3, r3
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_X = (float)gyro*gyro_constant;
 8002a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a9a:	4b36      	ldr	r3, [pc, #216]	; (8002b74 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	edc3 7a03 	vstr	s15, [r3, #12]



		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_G, 1, &data, 1, 1);
 8002aaa:	2301      	movs	r3, #1
 8002aac:	9302      	str	r3, [sp, #8]
 8002aae:	2301      	movs	r3, #1
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	f107 030d 	add.w	r3, r7, #13
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2301      	movs	r3, #1
 8002aba:	2224      	movs	r2, #36	; 0x24
 8002abc:	21d5      	movs	r1, #213	; 0xd5
 8002abe:	482c      	ldr	r0, [pc, #176]	; (8002b70 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002ac0:	f004 f804 	bl	8006acc <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_G, 1, &s, 1, 1);
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	9302      	str	r3, [sp, #8]
 8002ac8:	2301      	movs	r3, #1
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	2225      	movs	r2, #37	; 0x25
 8002ad6:	21d5      	movs	r1, #213	; 0xd5
 8002ad8:	4825      	ldr	r0, [pc, #148]	; (8002b70 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002ada:	f003 fff7 	bl	8006acc <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002ade:	7b3b      	ldrb	r3, [r7, #12]
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	b21a      	sxth	r2, r3
 8002ae4:	7b7b      	ldrb	r3, [r7, #13]
 8002ae6:	b21b      	sxth	r3, r3
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Y = (float)gyro*gyro_constant;
 8002aec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	edc3 7a04 	vstr	s15, [r3, #16]


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_G, 1, &data, 1, 1);
 8002b08:	2301      	movs	r3, #1
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	f107 030d 	add.w	r3, r7, #13
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	2301      	movs	r3, #1
 8002b18:	2226      	movs	r2, #38	; 0x26
 8002b1a:	21d5      	movs	r1, #213	; 0xd5
 8002b1c:	4814      	ldr	r0, [pc, #80]	; (8002b70 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002b1e:	f003 ffd5 	bl	8006acc <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_G, 1, &s, 1, 1);
 8002b22:	2301      	movs	r3, #1
 8002b24:	9302      	str	r3, [sp, #8]
 8002b26:	2301      	movs	r3, #1
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	2301      	movs	r3, #1
 8002b32:	2227      	movs	r2, #39	; 0x27
 8002b34:	21d5      	movs	r1, #213	; 0xd5
 8002b36:	480e      	ldr	r0, [pc, #56]	; (8002b70 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002b38:	f003 ffc8 	bl	8006acc <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002b3c:	7b3b      	ldrb	r3, [r7, #12]
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	b21a      	sxth	r2, r3
 8002b42:	7b7b      	ldrb	r3, [r7, #13]
 8002b44:	b21b      	sxth	r3, r3
 8002b46:	4313      	orrs	r3, r2
 8002b48:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Z = (float)gyro*gyro_constant;
 8002b4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200002a8 	.word	0x200002a8
 8002b74:	20000040 	.word	0x20000040

08002b78 <calculate_roll_pitch>:
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);

}


void calculate_roll_pitch(LSM6DSLTR *Lsm_Sensor) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	ed2d 8b02 	vpush	{d8}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
    Lsm_Sensor->Roll = atan2f(Lsm_Sensor->Accel_Y, sqrtf(Lsm_Sensor->Accel_X * Lsm_Sensor->Accel_X + Lsm_Sensor->Accel_Z * Lsm_Sensor->Accel_Z)) * 180.0f / 3.14;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	ed93 8a01 	vldr	s16, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	ed93 7a00 	vldr	s14, [r3]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bae:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb2:	f00a fd1b 	bl	800d5ec <sqrtf>
 8002bb6:	eef0 7a40 	vmov.f32	s15, s0
 8002bba:	eef0 0a67 	vmov.f32	s1, s15
 8002bbe:	eeb0 0a48 	vmov.f32	s0, s16
 8002bc2:	f00a fd11 	bl	800d5e8 <atan2f>
 8002bc6:	eef0 7a40 	vmov.f32	s15, s0
 8002bca:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002c80 <calculate_roll_pitch+0x108>
 8002bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd2:	ee17 0a90 	vmov	r0, s15
 8002bd6:	f7fd fccf 	bl	8000578 <__aeabi_f2d>
 8002bda:	a327      	add	r3, pc, #156	; (adr r3, 8002c78 <calculate_roll_pitch+0x100>)
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f7fd fe4c 	bl	800087c <__aeabi_ddiv>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f7fe f814 	bl	8000c18 <__aeabi_d2f>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	619a      	str	r2, [r3, #24]
    Lsm_Sensor->Pitch = atan2f(-Lsm_Sensor->Accel_X, sqrtf(Lsm_Sensor->Accel_Y * Lsm_Sensor->Accel_Y + Lsm_Sensor->Accel_Z * Lsm_Sensor->Accel_Z)) * 180.0f / 3.14;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	eeb1 8a67 	vneg.f32	s16, s15
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c24:	eeb0 0a67 	vmov.f32	s0, s15
 8002c28:	f00a fce0 	bl	800d5ec <sqrtf>
 8002c2c:	eef0 7a40 	vmov.f32	s15, s0
 8002c30:	eef0 0a67 	vmov.f32	s1, s15
 8002c34:	eeb0 0a48 	vmov.f32	s0, s16
 8002c38:	f00a fcd6 	bl	800d5e8 <atan2f>
 8002c3c:	eef0 7a40 	vmov.f32	s15, s0
 8002c40:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002c80 <calculate_roll_pitch+0x108>
 8002c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c48:	ee17 0a90 	vmov	r0, s15
 8002c4c:	f7fd fc94 	bl	8000578 <__aeabi_f2d>
 8002c50:	a309      	add	r3, pc, #36	; (adr r3, 8002c78 <calculate_roll_pitch+0x100>)
 8002c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c56:	f7fd fe11 	bl	800087c <__aeabi_ddiv>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	f7fd ffd9 	bl	8000c18 <__aeabi_d2f>
 8002c66:	4602      	mov	r2, r0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	61da      	str	r2, [r3, #28]
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	ecbd 8b02 	vpop	{d8}
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	51eb851f 	.word	0x51eb851f
 8002c7c:	40091eb8 	.word	0x40091eb8
 8002c80:	43340000 	.word	0x43340000

08002c84 <update_angles>:
void update_angles(LSM6DSLTR *Lsm_Sensor) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
    uint32_t current_time = HAL_GetTick(); // Şu anki zamanı al
 8002c8c:	f002 fb96 	bl	80053bc <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    // Zaman farkını hesapla (saniye cinsinden)
    float dt = (current_time - prev_time) / 1000.0f;
 8002c92:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <update_angles+0xc8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ca2:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002d50 <update_angles+0xcc>
 8002ca6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002caa:	edc7 7a02 	vstr	s15, [r7, #8]

    // Roll ve pitch açılarını güncelle (tamamlayıcı filtre)
    Lsm_Sensor->Roll = ALPHA * (Lsm_Sensor->Roll + Lsm_Sensor->Gyro_X * dt) + (1 - ALPHA) * Lsm_Sensor->Roll;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	ed93 7a06 	vldr	s14, [r3, #24]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	edd3 6a03 	vldr	s13, [r3, #12]
 8002cba:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002d54 <update_angles+0xd0>
 8002cca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cd4:	eddf 6a20 	vldr	s13, [pc, #128]	; 8002d58 <update_angles+0xd4>
 8002cd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	edc3 7a06 	vstr	s15, [r3, #24]
    Lsm_Sensor->Pitch = ALPHA * (Lsm_Sensor->Pitch + Lsm_Sensor->Gyro_Y * dt) + (1 - ALPHA) * Lsm_Sensor->Pitch;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	ed93 7a07 	vldr	s14, [r3, #28]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	edd3 6a04 	vldr	s13, [r3, #16]
 8002cf2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfe:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002d54 <update_angles+0xd0>
 8002d02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d0c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002d58 <update_angles+0xd4>
 8002d10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	edc3 7a07 	vstr	s15, [r3, #28]

    // Yaw açısını jiroskop verileriyle güncelle (basit zamanla entegrasyon)
    Lsm_Sensor->Yaw += Lsm_Sensor->Gyro_Z * dt;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	edc3 7a08 	vstr	s15, [r3, #32]

    // Önceki zamanı güncelle
    prev_time = current_time;
 8002d3c:	4a03      	ldr	r2, [pc, #12]	; (8002d4c <update_angles+0xc8>)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6013      	str	r3, [r2, #0]
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	2000025c 	.word	0x2000025c
 8002d50:	447a0000 	.word	0x447a0000
 8002d54:	3f7ae148 	.word	0x3f7ae148
 8002d58:	3ca3d700 	.word	0x3ca3d700

08002d5c <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d106      	bne.n	8002d7e <prv_parse_number+0x22>
        t = gh->p.term_str;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3371      	adds	r3, #113	; 0x71
 8002d74:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002d76:	e002      	b.n	8002d7e <prv_parse_number+0x22>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <prv_parse_number+0x30>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d0f5      	beq.n	8002d78 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b2d      	cmp	r3, #45	; 0x2d
 8002d92:	d104      	bne.n	8002d9e <prv_parse_number+0x42>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	3301      	adds	r3, #1
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <prv_parse_number+0x44>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8002da2:	e00d      	b.n	8002dc0 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	461a      	mov	r2, r3
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	3b30      	subs	r3, #48	; 0x30
 8002db6:	4413      	add	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d007      	beq.n	8002dd6 <prv_parse_number+0x7a>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b2f      	cmp	r3, #47	; 0x2f
 8002dcc:	d903      	bls.n	8002dd6 <prv_parse_number+0x7a>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b39      	cmp	r3, #57	; 0x39
 8002dd4:	d9e6      	bls.n	8002da4 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <prv_parse_number+0x86>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	425b      	negs	r3, r3
 8002de0:	e000      	b.n	8002de4 <prv_parse_number+0x88>
 8002de2:	68fb      	ldr	r3, [r7, #12]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d106      	bne.n	8002e0e <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3371      	adds	r3, #113	; 0x71
 8002e04:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002e06:	e002      	b.n	8002e0e <prv_parse_float_number+0x1e>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <prv_parse_float_number+0x2c>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d0f5      	beq.n	8002e08 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	6838      	ldr	r0, [r7, #0]
 8002e20:	f008 fc0e 	bl	800b640 <strtod>
 8002e24:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8002e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e2c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e30:	eeb0 0a47 	vmov.f32	s0, s14
 8002e34:	eef0 0a67 	vmov.f32	s1, s15
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8002e48:	2100      	movs	r1, #0
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ffd0 	bl	8002df0 <prv_parse_float_number>
 8002e50:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8002e54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e58:	f7fd fe96 	bl	8000b88 <__aeabi_d2iz>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <prv_parse_lat_long+0x94>)
 8002e60:	fb82 1203 	smull	r1, r2, r2, r3
 8002e64:	1152      	asrs	r2, r2, #5
 8002e66:	17db      	asrs	r3, r3, #31
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fb72 	bl	8000554 <__aeabi_i2d>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <prv_parse_lat_long+0x98>)
 8002e7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e82:	f7fd fbd1 	bl	8000628 <__aeabi_dmul>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e8e:	f7fd fa13 	bl	80002b8 <__aeabi_dsub>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <prv_parse_lat_long+0x9c>)
 8002ea0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ea4:	f7fd fcea 	bl	800087c <__aeabi_ddiv>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002eb0:	f7fd fa04 	bl	80002bc <__adddf3>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8002ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec0:	ec43 2b17 	vmov	d7, r2, r3
}
 8002ec4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ec8:	eef0 0a67 	vmov.f32	s1, s15
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	51eb851f 	.word	0x51eb851f
 8002ed8:	40590000 	.word	0x40590000
 8002edc:	404e0000 	.word	0x404e0000

08002ee0 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8002ee0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002ef0:	2900      	cmp	r1, #0
 8002ef2:	d169      	bne.n	8002fc8 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3371      	adds	r3, #113	; 0x71
 8002ef8:	2206      	movs	r2, #6
 8002efa:	49ba      	ldr	r1, [pc, #744]	; (80031e4 <prv_parse_term+0x304>)
 8002efc:	4618      	mov	r0, r3
 8002efe:	f008 fcb8 	bl	800b872 <strncmp>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d009      	beq.n	8002f1c <prv_parse_term+0x3c>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3371      	adds	r3, #113	; 0x71
 8002f0c:	2206      	movs	r2, #6
 8002f0e:	49b6      	ldr	r1, [pc, #728]	; (80031e8 <prv_parse_term+0x308>)
 8002f10:	4618      	mov	r0, r3
 8002f12:	f008 fcae 	bl	800b872 <strncmp>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d104      	bne.n	8002f26 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002f24:	e04e      	b.n	8002fc4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3371      	adds	r3, #113	; 0x71
 8002f2a:	2206      	movs	r2, #6
 8002f2c:	49af      	ldr	r1, [pc, #700]	; (80031ec <prv_parse_term+0x30c>)
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f008 fc9f 	bl	800b872 <strncmp>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <prv_parse_term+0x6e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3371      	adds	r3, #113	; 0x71
 8002f3e:	2206      	movs	r2, #6
 8002f40:	49ab      	ldr	r1, [pc, #684]	; (80031f0 <prv_parse_term+0x310>)
 8002f42:	4618      	mov	r0, r3
 8002f44:	f008 fc95 	bl	800b872 <strncmp>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d104      	bne.n	8002f58 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002f56:	e035      	b.n	8002fc4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3371      	adds	r3, #113	; 0x71
 8002f5c:	2206      	movs	r2, #6
 8002f5e:	49a5      	ldr	r1, [pc, #660]	; (80031f4 <prv_parse_term+0x314>)
 8002f60:	4618      	mov	r0, r3
 8002f62:	f008 fc86 	bl	800b872 <strncmp>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <prv_parse_term+0xa0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3371      	adds	r3, #113	; 0x71
 8002f70:	2206      	movs	r2, #6
 8002f72:	49a1      	ldr	r1, [pc, #644]	; (80031f8 <prv_parse_term+0x318>)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f008 fc7c 	bl	800b872 <strncmp>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d104      	bne.n	8002f8a <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2203      	movs	r2, #3
 8002f84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002f88:	e01c      	b.n	8002fc4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3371      	adds	r3, #113	; 0x71
 8002f8e:	2206      	movs	r2, #6
 8002f90:	499a      	ldr	r1, [pc, #616]	; (80031fc <prv_parse_term+0x31c>)
 8002f92:	4618      	mov	r0, r3
 8002f94:	f008 fc6d 	bl	800b872 <strncmp>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <prv_parse_term+0xd2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3371      	adds	r3, #113	; 0x71
 8002fa2:	2206      	movs	r2, #6
 8002fa4:	4996      	ldr	r1, [pc, #600]	; (8003200 <prv_parse_term+0x320>)
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f008 fc63 	bl	800b872 <strncmp>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d104      	bne.n	8002fbc <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002fba:	e003      	b.n	8002fc4 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e231      	b.n	800342c <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002fce:	2900      	cmp	r1, #0
 8002fd0:	f000 822b 	beq.w	800342a <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002fda:	2901      	cmp	r1, #1
 8002fdc:	f040 80c9 	bne.w	8003172 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	2b0a      	cmp	r3, #10
 8002fea:	f200 8213 	bhi.w	8003414 <prv_parse_term+0x534>
 8002fee:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <prv_parse_term+0x114>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003021 	.word	0x08003021
 8002ff8:	0800309b 	.word	0x0800309b
 8002ffc:	080030b1 	.word	0x080030b1
 8003000:	080030db 	.word	0x080030db
 8003004:	080030f1 	.word	0x080030f1
 8003008:	0800311b 	.word	0x0800311b
 800300c:	0800312f 	.word	0x0800312f
 8003010:	08003415 	.word	0x08003415
 8003014:	08003143 	.word	0x08003143
 8003018:	08003415 	.word	0x08003415
 800301c:	0800315b 	.word	0x0800315b
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003026:	3b30      	subs	r3, #48	; 0x30
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	0092      	lsls	r2, r2, #2
 800302e:	4413      	add	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	b2da      	uxtb	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800303a:	4413      	add	r3, r2
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3b30      	subs	r3, #48	; 0x30
 8003040:	b2da      	uxtb	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800304e:	3b30      	subs	r3, #48	; 0x30
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	0092      	lsls	r2, r2, #2
 8003056:	4413      	add	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	b2da      	uxtb	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003062:	4413      	add	r3, r2
 8003064:	b2db      	uxtb	r3, r3
 8003066:	3b30      	subs	r3, #48	; 0x30
 8003068:	b2da      	uxtb	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8003076:	3b30      	subs	r3, #48	; 0x30
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	0092      	lsls	r2, r2, #2
 800307e:	4413      	add	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	b2da      	uxtb	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800308a:	4413      	add	r3, r2
 800308c:	b2db      	uxtb	r3, r3
 800308e:	3b30      	subs	r3, #48	; 0x30
 8003090:	b2da      	uxtb	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8003098:	e1c7      	b.n	800342a <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff fed0 	bl	8002e40 <prv_parse_lat_long>
 80030a0:	eeb0 7a40 	vmov.f32	s14, s0
 80030a4:	eef0 7a60 	vmov.f32	s15, s1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80030ae:	e1bc      	b.n	800342a <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80030b6:	2b53      	cmp	r3, #83	; 0x53
 80030b8:	d005      	beq.n	80030c6 <prv_parse_term+0x1e6>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80030c0:	2b73      	cmp	r3, #115	; 0x73
 80030c2:	f040 81a9 	bne.w	8003418 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80030cc:	4690      	mov	r8, r2
 80030ce:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 80030d8:	e19e      	b.n	8003418 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff feb0 	bl	8002e40 <prv_parse_lat_long>
 80030e0:	eeb0 7a40 	vmov.f32	s14, s0
 80030e4:	eef0 7a60 	vmov.f32	s15, s1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80030ee:	e19c      	b.n	800342a <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80030f6:	2b57      	cmp	r3, #87	; 0x57
 80030f8:	d005      	beq.n	8003106 <prv_parse_term+0x226>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003100:	2b77      	cmp	r3, #119	; 0x77
 8003102:	f040 818b 	bne.w	800341c <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800310c:	4614      	mov	r4, r2
 800310e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8003118:	e180      	b.n	800341c <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 800311a:	2100      	movs	r1, #0
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff fe1d 	bl	8002d5c <prv_parse_number>
 8003122:	4603      	mov	r3, r0
 8003124:	b2da      	uxtb	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 800312c:	e17d      	b.n	800342a <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 800312e:	2100      	movs	r1, #0
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff fe13 	bl	8002d5c <prv_parse_number>
 8003136:	4603      	mov	r3, r0
 8003138:	b2da      	uxtb	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8003140:	e173      	b.n	800342a <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8003142:	2100      	movs	r1, #0
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff fe53 	bl	8002df0 <prv_parse_float_number>
 800314a:	eeb0 7a40 	vmov.f32	s14, s0
 800314e:	eef0 7a60 	vmov.f32	s15, s1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8003158:	e167      	b.n	800342a <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 800315a:	2100      	movs	r1, #0
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fe47 	bl	8002df0 <prv_parse_float_number>
 8003162:	eeb0 7a40 	vmov.f32	s14, s0
 8003166:	eef0 7a60 	vmov.f32	s15, s1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8003170:	e15b      	b.n	800342a <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8003178:	2902      	cmp	r1, #2
 800317a:	f040 8083 	bne.w	8003284 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003184:	3b02      	subs	r3, #2
 8003186:	2b0f      	cmp	r3, #15
 8003188:	d860      	bhi.n	800324c <prv_parse_term+0x36c>
 800318a:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <prv_parse_term+0x2b0>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031d1 	.word	0x080031d1
 8003194:	0800324d 	.word	0x0800324d
 8003198:	0800324d 	.word	0x0800324d
 800319c:	0800324d 	.word	0x0800324d
 80031a0:	0800324d 	.word	0x0800324d
 80031a4:	0800324d 	.word	0x0800324d
 80031a8:	0800324d 	.word	0x0800324d
 80031ac:	0800324d 	.word	0x0800324d
 80031b0:	0800324d 	.word	0x0800324d
 80031b4:	0800324d 	.word	0x0800324d
 80031b8:	0800324d 	.word	0x0800324d
 80031bc:	0800324d 	.word	0x0800324d
 80031c0:	0800324d 	.word	0x0800324d
 80031c4:	08003205 	.word	0x08003205
 80031c8:	0800321d 	.word	0x0800321d
 80031cc:	08003235 	.word	0x08003235
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80031d0:	2100      	movs	r1, #0
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff fdc2 	bl	8002d5c <prv_parse_number>
 80031d8:	4603      	mov	r3, r0
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 80031e2:	e122      	b.n	800342a <prv_parse_term+0x54a>
 80031e4:	0800e6d8 	.word	0x0800e6d8
 80031e8:	0800e6e0 	.word	0x0800e6e0
 80031ec:	0800e6e8 	.word	0x0800e6e8
 80031f0:	0800e6f0 	.word	0x0800e6f0
 80031f4:	0800e6f8 	.word	0x0800e6f8
 80031f8:	0800e700 	.word	0x0800e700
 80031fc:	0800e708 	.word	0x0800e708
 8003200:	0800e710 	.word	0x0800e710
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8003204:	2100      	movs	r1, #0
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff fdf2 	bl	8002df0 <prv_parse_float_number>
 800320c:	eeb0 7a40 	vmov.f32	s14, s0
 8003210:	eef0 7a60 	vmov.f32	s15, s1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800321a:	e106      	b.n	800342a <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 800321c:	2100      	movs	r1, #0
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff fde6 	bl	8002df0 <prv_parse_float_number>
 8003224:	eeb0 7a40 	vmov.f32	s14, s0
 8003228:	eef0 7a60 	vmov.f32	s15, s1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8003232:	e0fa      	b.n	800342a <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8003234:	2100      	movs	r1, #0
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff fdda 	bl	8002df0 <prv_parse_float_number>
 800323c:	eeb0 7a40 	vmov.f32	s14, s0
 8003240:	eef0 7a60 	vmov.f32	s15, s1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800324a:	e0ee      	b.n	800342a <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003252:	2b02      	cmp	r3, #2
 8003254:	f240 80e4 	bls.w	8003420 <prv_parse_term+0x540>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800325e:	2b0e      	cmp	r3, #14
 8003260:	f200 80de 	bhi.w	8003420 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8003264:	2100      	movs	r1, #0
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff fd78 	bl	8002d5c <prv_parse_number>
 800326c:	4602      	mov	r2, r0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003274:	3b03      	subs	r3, #3
 8003276:	b2d1      	uxtb	r1, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	460a      	mov	r2, r1
 800327e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8003282:	e0cd      	b.n	8003420 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800328a:	2903      	cmp	r1, #3
 800328c:	d11b      	bne.n	80032c6 <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003294:	2b02      	cmp	r3, #2
 8003296:	d002      	beq.n	800329e <prv_parse_term+0x3be>
 8003298:	2b03      	cmp	r3, #3
 800329a:	d00a      	beq.n	80032b2 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 800329c:	e0c5      	b.n	800342a <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 800329e:	2100      	movs	r1, #0
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff fd5b 	bl	8002d5c <prv_parse_number>
 80032a6:	4603      	mov	r3, r0
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80032b0:	e0bb      	b.n	800342a <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80032b2:	2100      	movs	r1, #0
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fd51 	bl	8002d5c <prv_parse_number>
 80032ba:	4603      	mov	r3, r0
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80032c4:	e0b1      	b.n	800342a <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80032cc:	2904      	cmp	r1, #4
 80032ce:	f040 80ac 	bne.w	800342a <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80032d8:	3902      	subs	r1, #2
 80032da:	2909      	cmp	r1, #9
 80032dc:	f200 80a2 	bhi.w	8003424 <prv_parse_term+0x544>
 80032e0:	a001      	add	r0, pc, #4	; (adr r0, 80032e8 <prv_parse_term+0x408>)
 80032e2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	08003311 	.word	0x08003311
 80032ec:	08003425 	.word	0x08003425
 80032f0:	08003425 	.word	0x08003425
 80032f4:	08003425 	.word	0x08003425
 80032f8:	08003425 	.word	0x08003425
 80032fc:	0800332b 	.word	0x0800332b
 8003300:	08003343 	.word	0x08003343
 8003304:	0800335b 	.word	0x0800335b
 8003308:	080033d5 	.word	0x080033d5
 800330c:	080033ed 	.word	0x080033ed
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003316:	2b41      	cmp	r3, #65	; 0x41
 8003318:	bf0c      	ite	eq
 800331a:	2301      	moveq	r3, #1
 800331c:	2300      	movne	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8003328:	e07f      	b.n	800342a <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 800332a:	2100      	movs	r1, #0
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff fd5f 	bl	8002df0 <prv_parse_float_number>
 8003332:	eeb0 7a40 	vmov.f32	s14, s0
 8003336:	eef0 7a60 	vmov.f32	s15, s1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8003340:	e073      	b.n	800342a <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8003342:	2100      	movs	r1, #0
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff fd53 	bl	8002df0 <prv_parse_float_number>
 800334a:	eeb0 7a40 	vmov.f32	s14, s0
 800334e:	eef0 7a60 	vmov.f32	s15, s1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8003358:	e067      	b.n	800342a <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003360:	3b30      	subs	r3, #48	; 0x30
 8003362:	b2db      	uxtb	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	0092      	lsls	r2, r2, #2
 8003368:	4413      	add	r3, r2
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	b2da      	uxtb	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003374:	4413      	add	r3, r2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	3b30      	subs	r3, #48	; 0x30
 800337a:	b2da      	uxtb	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8003388:	3b30      	subs	r3, #48	; 0x30
 800338a:	b2db      	uxtb	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	4413      	add	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	b2da      	uxtb	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800339c:	4413      	add	r3, r2
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	3b30      	subs	r3, #48	; 0x30
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80033b0:	3b30      	subs	r3, #48	; 0x30
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	0092      	lsls	r2, r2, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80033c4:	4413      	add	r3, r2
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	3b30      	subs	r3, #48	; 0x30
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 80033d2:	e02a      	b.n	800342a <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80033d4:	2100      	movs	r1, #0
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff fd0a 	bl	8002df0 <prv_parse_float_number>
 80033dc:	eeb0 7a40 	vmov.f32	s14, s0
 80033e0:	eef0 7a60 	vmov.f32	s15, s1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80033ea:	e01e      	b.n	800342a <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80033f2:	2957      	cmp	r1, #87	; 0x57
 80033f4:	d004      	beq.n	8003400 <prv_parse_term+0x520>
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80033fc:	2977      	cmp	r1, #119	; 0x77
 80033fe:	d113      	bne.n	8003428 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8003406:	4602      	mov	r2, r0
 8003408:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8003412:	e009      	b.n	8003428 <prv_parse_term+0x548>
                break;
 8003414:	bf00      	nop
 8003416:	e008      	b.n	800342a <prv_parse_term+0x54a>
                break;
 8003418:	bf00      	nop
 800341a:	e006      	b.n	800342a <prv_parse_term+0x54a>
                break;
 800341c:	bf00      	nop
 800341e:	e004      	b.n	800342a <prv_parse_term+0x54a>
                break;
 8003420:	bf00      	nop
 8003422:	e002      	b.n	800342a <prv_parse_term+0x54a>
            default:
                break;
 8003424:	bf00      	nop
 8003426:	e000      	b.n	800342a <prv_parse_term+0x54a>
                break;
 8003428:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 800342a:	2301      	movs	r3, #1
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003436:	bf00      	nop

08003438 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003446:	2b2f      	cmp	r3, #47	; 0x2f
 8003448:	d90d      	bls.n	8003466 <prv_check_crc+0x2e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003450:	2b39      	cmp	r3, #57	; 0x39
 8003452:	d808      	bhi.n	8003466 <prv_check_crc+0x2e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800345a:	3b30      	subs	r3, #48	; 0x30
 800345c:	b2db      	uxtb	r3, r3
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	b2db      	uxtb	r3, r3
 8003462:	b25a      	sxtb	r2, r3
 8003464:	e026      	b.n	80034b4 <prv_check_crc+0x7c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800346c:	2b60      	cmp	r3, #96	; 0x60
 800346e:	d90d      	bls.n	800348c <prv_check_crc+0x54>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003476:	2b7a      	cmp	r3, #122	; 0x7a
 8003478:	d808      	bhi.n	800348c <prv_check_crc+0x54>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003480:	3b57      	subs	r3, #87	; 0x57
 8003482:	b2db      	uxtb	r3, r3
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	b2db      	uxtb	r3, r3
 8003488:	b25a      	sxtb	r2, r3
 800348a:	e013      	b.n	80034b4 <prv_check_crc+0x7c>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d90d      	bls.n	80034b2 <prv_check_crc+0x7a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800349c:	2b5a      	cmp	r3, #90	; 0x5a
 800349e:	d808      	bhi.n	80034b2 <prv_check_crc+0x7a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80034a6:	3b37      	subs	r3, #55	; 0x37
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	b25a      	sxtb	r2, r3
 80034b0:	e000      	b.n	80034b4 <prv_check_crc+0x7c>
 80034b2:	2200      	movs	r2, #0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80034ba:	2b2f      	cmp	r3, #47	; 0x2f
 80034bc:	d90c      	bls.n	80034d8 <prv_check_crc+0xa0>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80034c4:	2b39      	cmp	r3, #57	; 0x39
 80034c6:	d807      	bhi.n	80034d8 <prv_check_crc+0xa0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80034ce:	b25b      	sxtb	r3, r3
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	e028      	b.n	800352a <prv_check_crc+0xf2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80034de:	2b60      	cmp	r3, #96	; 0x60
 80034e0:	d90e      	bls.n	8003500 <prv_check_crc+0xc8>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80034e8:	2b7a      	cmp	r3, #122	; 0x7a
 80034ea:	d809      	bhi.n	8003500 <prv_check_crc+0xc8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80034f2:	3b57      	subs	r3, #87	; 0x57
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	e014      	b.n	800352a <prv_check_crc+0xf2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d90e      	bls.n	8003528 <prv_check_crc+0xf0>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003510:	2b5a      	cmp	r3, #90	; 0x5a
 8003512:	d809      	bhi.n	8003528 <prv_check_crc+0xf0>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800351a:	3b37      	subs	r3, #55	; 0x37
 800351c:	b2db      	uxtb	r3, r3
 800351e:	b25b      	sxtb	r3, r3
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	b25b      	sxtb	r3, r3
 8003526:	e000      	b.n	800352a <prv_check_crc+0xf2>
 8003528:	2300      	movs	r3, #0
 800352a:	4313      	orrs	r3, r2
 800352c:	b25b      	sxtb	r3, r3
 800352e:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	429a      	cmp	r2, r3
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800355c:	2b01      	cmp	r3, #1
 800355e:	d136      	bne.n	80035ce <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035cc:	e061      	b.n	8003692 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d121      	bne.n	800361c <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f103 0041 	add.w	r0, r3, #65	; 0x41
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	33a1      	adds	r3, #161	; 0xa1
 8003612:	220c      	movs	r2, #12
 8003614:	4619      	mov	r1, r3
 8003616:	f008 f9c2 	bl	800b99e <memcpy>
 800361a:	e03a      	b.n	8003692 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003622:	2b03      	cmp	r3, #3
 8003624:	d106      	bne.n	8003634 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8003632:	e02e      	b.n	8003692 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800363a:	2b04      	cmp	r3, #4
 800363c:	d129      	bne.n	8003692 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8003692:	2301      	movs	r3, #1
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 80036a4:	22b0      	movs	r2, #176	; 0xb0
 80036a6:	2100      	movs	r1, #0
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f008 f8da 	bl	800b862 <memset>
    return 1;
 80036ae:	2301      	movs	r3, #1
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80036c8:	e0ad      	b.n	8003826 <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b24      	cmp	r3, #36	; 0x24
 80036d0:	d128      	bne.n	8003724 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3370      	adds	r3, #112	; 0x70
 80036d6:	2240      	movs	r2, #64	; 0x40
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f008 f8c1 	bl	800b862 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80036e6:	2b0b      	cmp	r3, #11
 80036e8:	f200 8097 	bhi.w	800381a <lwgps_process+0x162>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80036f2:	4619      	mov	r1, r3
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	781a      	ldrb	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	440b      	add	r3, r1
 80036fc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003706:	3301      	adds	r3, #1
 8003708:	b2da      	uxtb	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003716:	461a      	mov	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003722:	e07a      	b.n	800381a <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b2c      	cmp	r3, #44	; 0x2c
 800372a:	d11d      	bne.n	8003768 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7ff fbd7 	bl	8002ee0 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	4053      	eors	r3, r2
 800373e:	b2da      	uxtb	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800375c:	3301      	adds	r3, #1
 800375e:	b2da      	uxtb	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8003766:	e058      	b.n	800381a <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b2a      	cmp	r3, #42	; 0x2a
 800376e:	d117      	bne.n	80037a0 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f7ff fbb5 	bl	8002ee0 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003794:	3301      	adds	r3, #1
 8003796:	b2da      	uxtb	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800379e:	e03c      	b.n	800381a <lwgps_process+0x162>
        } else if (*d == '\r') {
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b0d      	cmp	r3, #13
 80037a6:	d109      	bne.n	80037bc <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff fe45 	bl	8003438 <prv_check_crc>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d032      	beq.n	800381a <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7ff feca 	bl	800354e <prv_copy_from_tmp_memory>
 80037ba:	e02e      	b.n	800381a <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	4053      	eors	r3, r2
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80037e0:	2b0b      	cmp	r3, #11
 80037e2:	d81a      	bhi.n	800381a <lwgps_process+0x162>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80037ea:	4619      	mov	r1, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	781a      	ldrb	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	440b      	add	r3, r1
 80037f4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80037fe:	3301      	adds	r3, #1
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800380e:	461a      	mov	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	3301      	adds	r3, #1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3b01      	subs	r3, #1
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f47f af4e 	bne.w	80036ca <lwgps_process+0x12>
        }
    }
    return 1;
 800382e:	2301      	movs	r3, #1
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_UART_RxCpltCallback>:
struct bme280_dev dev;
struct bme280_data comp_data;
int8_t rslt=0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	if(rx_data != '\n' && rx_index < RX_BUFFER_SIZE)
 8003840:	4b15      	ldr	r3, [pc, #84]	; (8003898 <HAL_UART_RxCpltCallback+0x60>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b0a      	cmp	r3, #10
 8003846:	d010      	beq.n	800386a <HAL_UART_RxCpltCallback+0x32>
 8003848:	4b14      	ldr	r3, [pc, #80]	; (800389c <HAL_UART_RxCpltCallback+0x64>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b25b      	sxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	db0b      	blt.n	800386a <HAL_UART_RxCpltCallback+0x32>
	{
		rx_buffer[rx_index++] = rx_data;
 8003852:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_UART_RxCpltCallback+0x64>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	b2d1      	uxtb	r1, r2
 800385a:	4a10      	ldr	r2, [pc, #64]	; (800389c <HAL_UART_RxCpltCallback+0x64>)
 800385c:	7011      	strb	r1, [r2, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <HAL_UART_RxCpltCallback+0x60>)
 8003862:	7819      	ldrb	r1, [r3, #0]
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_UART_RxCpltCallback+0x68>)
 8003866:	5499      	strb	r1, [r3, r2]
 8003868:	e00d      	b.n	8003886 <HAL_UART_RxCpltCallback+0x4e>
	}
	else {
		lwgps_process(&gps, rx_buffer, rx_index+1);
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <HAL_UART_RxCpltCallback+0x64>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	3301      	adds	r3, #1
 8003870:	461a      	mov	r2, r3
 8003872:	490b      	ldr	r1, [pc, #44]	; (80038a0 <HAL_UART_RxCpltCallback+0x68>)
 8003874:	480b      	ldr	r0, [pc, #44]	; (80038a4 <HAL_UART_RxCpltCallback+0x6c>)
 8003876:	f7ff ff1f 	bl	80036b8 <lwgps_process>
		rx_index = 0;
 800387a:	4b08      	ldr	r3, [pc, #32]	; (800389c <HAL_UART_RxCpltCallback+0x64>)
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
		rx_data = 0;
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_UART_RxCpltCallback+0x60>)
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8003886:	2201      	movs	r2, #1
 8003888:	4903      	ldr	r1, [pc, #12]	; (8003898 <HAL_UART_RxCpltCallback+0x60>)
 800388a:	4807      	ldr	r0, [pc, #28]	; (80038a8 <HAL_UART_RxCpltCallback+0x70>)
 800388c:	f005 ffaf 	bl	80097ee <HAL_UART_Receive_IT>

}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	200005c1 	.word	0x200005c1
 800389c:	200005c0 	.word	0x200005c0
 80038a0:	20000540 	.word	0x20000540
 80038a4:	20000668 	.word	0x20000668
 80038a8:	200004b8 	.word	0x200004b8

080038ac <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

	if(htim==&htim11){
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a13      	ldr	r2, [pc, #76]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d102      	bne.n	80038c2 <HAL_TIM_PeriodElapsedCallback+0x16>
		lora_flag=1;
 80038bc:	4b12      	ldr	r3, [pc, #72]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]

	}
	if(htim==&htim10){
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a11      	ldr	r2, [pc, #68]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x60>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d102      	bne.n	80038d0 <HAL_TIM_PeriodElapsedCallback+0x24>
		sensor_flag=1;
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
	}
	if(htim==&htim6){
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a10      	ldr	r2, [pc, #64]	; (8003914 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d105      	bne.n	80038e4 <HAL_TIM_PeriodElapsedCallback+0x38>
      motor_burnout++;
 80038d8:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	3301      	adds	r3, #1
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80038e2:	701a      	strb	r2, [r3, #0]
	}
	if(htim==&htim7){
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a0d      	ldr	r2, [pc, #52]	; (800391c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d105      	bne.n	80038f8 <HAL_TIM_PeriodElapsedCallback+0x4c>
      motor_burnout++;
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	3301      	adds	r3, #1
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80038f6:	701a      	strb	r2, [r3, #0]
	}
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	2000042c 	.word	0x2000042c
 8003908:	20000642 	.word	0x20000642
 800390c:	200003e4 	.word	0x200003e4
 8003910:	20000643 	.word	0x20000643
 8003914:	20000354 	.word	0x20000354
 8003918:	200005c5 	.word	0x200005c5
 800391c:	2000039c 	.word	0x2000039c

08003920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b090      	sub	sp, #64	; 0x40
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003926:	f001 fce3 	bl	80052f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800392a:	f000 fc0b 	bl	8004144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800392e:	f000 fe5d 	bl	80045ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8003932:	f000 fc73 	bl	800421c <MX_ADC1_Init>
  MX_I2C1_Init();
 8003936:	f000 fcc3 	bl	80042c0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800393a:	f000 fcef 	bl	800431c <MX_SPI1_Init>
  MX_UART4_Init();
 800393e:	f000 fdd7 	bl	80044f0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8003942:	f000 fdff 	bl	8004544 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003946:	f000 fe27 	bl	8004598 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800394a:	f006 fee9 	bl	800a720 <MX_FATFS_Init>
  MX_TIM11_Init();
 800394e:	f000 fdab 	bl	80044a8 <MX_TIM11_Init>
  MX_TIM10_Init();
 8003952:	f000 fd85 	bl	8004460 <MX_TIM10_Init>
  MX_TIM6_Init();
 8003956:	f000 fd17 	bl	8004388 <MX_TIM6_Init>
  MX_TIM7_Init();
 800395a:	f000 fd4b 	bl	80043f4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800395e:	2201      	movs	r2, #1
 8003960:	2104      	movs	r1, #4
 8003962:	485b      	ldr	r0, [pc, #364]	; (8003ad0 <main+0x1b0>)
 8003964:	f002 fb1c 	bl	8005fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8003968:	2201      	movs	r2, #1
 800396a:	2102      	movs	r1, #2
 800396c:	4859      	ldr	r0, [pc, #356]	; (8003ad4 <main+0x1b4>)
 800396e:	f002 fb17 	bl	8005fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003972:	2201      	movs	r2, #1
 8003974:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003978:	4856      	ldr	r0, [pc, #344]	; (8003ad4 <main+0x1b4>)
 800397a:	f002 fb11 	bl	8005fa0 <HAL_GPIO_WritePin>

  ///KURTARMA PORTLARI KAPALI EMIN OL
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//A
 800397e:	2200      	movs	r2, #0
 8003980:	2110      	movs	r1, #16
 8003982:	4853      	ldr	r0, [pc, #332]	; (8003ad0 <main+0x1b0>)
 8003984:	f002 fb0c 	bl	8005fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);//B
 8003988:	2200      	movs	r2, #0
 800398a:	2108      	movs	r1, #8
 800398c:	4850      	ldr	r0, [pc, #320]	; (8003ad0 <main+0x1b0>)
 800398e:	f002 fb07 	bl	8005fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);//C
 8003992:	2200      	movs	r2, #0
 8003994:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003998:	484e      	ldr	r0, [pc, #312]	; (8003ad4 <main+0x1b4>)
 800399a:	f002 fb01 	bl	8005fa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);//D
 800399e:	2200      	movs	r2, #0
 80039a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039a4:	484b      	ldr	r0, [pc, #300]	; (8003ad4 <main+0x1b4>)
 80039a6:	f002 fafb 	bl	8005fa0 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2,&rx_data,1);
 80039aa:	2201      	movs	r2, #1
 80039ac:	494a      	ldr	r1, [pc, #296]	; (8003ad8 <main+0x1b8>)
 80039ae:	484b      	ldr	r0, [pc, #300]	; (8003adc <main+0x1bc>)
 80039b0:	f005 ff1d 	bl	80097ee <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 80039b4:	484a      	ldr	r0, [pc, #296]	; (8003ae0 <main+0x1c0>)
 80039b6:	f005 fb3b 	bl	8009030 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 80039ba:	484a      	ldr	r0, [pc, #296]	; (8003ae4 <main+0x1c4>)
 80039bc:	f005 fb38 	bl	8009030 <HAL_TIM_Base_Start_IT>



  MAFilter_Init(&accx);
 80039c0:	4849      	ldr	r0, [pc, #292]	; (8003ae8 <main+0x1c8>)
 80039c2:	f7fe fef1 	bl	80027a8 <MAFilter_Init>
  FIRFilter_Init(&IMU_GYROY);
 80039c6:	4849      	ldr	r0, [pc, #292]	; (8003aec <main+0x1cc>)
 80039c8:	f7fe fe70 	bl	80026ac <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROX);
 80039cc:	4848      	ldr	r0, [pc, #288]	; (8003af0 <main+0x1d0>)
 80039ce:	f7fe fe6d 	bl	80026ac <FIRFilter_Init>
  FIRFilter_Init(&IMU_GYROZ);
 80039d2:	4848      	ldr	r0, [pc, #288]	; (8003af4 <main+0x1d4>)
 80039d4:	f7fe fe6a 	bl	80026ac <FIRFilter_Init>

  lwgps_init(&gps);
 80039d8:	4847      	ldr	r0, [pc, #284]	; (8003af8 <main+0x1d8>)
 80039da:	f7ff fe5f 	bl	800369c <lwgps_init>
  LSM6DSLTR_Init();
 80039de:	f7fe ff05 	bl	80027ec <LSM6DSLTR_Init>
  E220_CONFIG(0x6,0x4A,0X6,1);
 80039e2:	2301      	movs	r3, #1
 80039e4:	2206      	movs	r2, #6
 80039e6:	214a      	movs	r1, #74	; 0x4a
 80039e8:	2006      	movs	r0, #6
 80039ea:	f000 feb1 	bl	8004750 <E220_CONFIG>

  dev.dev_id = BME280_I2C_ADDR_PRIM;
 80039ee:	4b43      	ldr	r3, [pc, #268]	; (8003afc <main+0x1dc>)
 80039f0:	2276      	movs	r2, #118	; 0x76
 80039f2:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
 80039f4:	4b41      	ldr	r3, [pc, #260]	; (8003afc <main+0x1dc>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 80039fa:	4b40      	ldr	r3, [pc, #256]	; (8003afc <main+0x1dc>)
 80039fc:	4a40      	ldr	r2, [pc, #256]	; (8003b00 <main+0x1e0>)
 80039fe:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 8003a00:	4b3e      	ldr	r3, [pc, #248]	; (8003afc <main+0x1dc>)
 8003a02:	4a40      	ldr	r2, [pc, #256]	; (8003b04 <main+0x1e4>)
 8003a04:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 8003a06:	4b3d      	ldr	r3, [pc, #244]	; (8003afc <main+0x1dc>)
 8003a08:	4a3f      	ldr	r2, [pc, #252]	; (8003b08 <main+0x1e8>)
 8003a0a:	60da      	str	r2, [r3, #12]

  rslt = bme280_init(&dev);
 8003a0c:	483b      	ldr	r0, [pc, #236]	; (8003afc <main+0x1dc>)
 8003a0e:	f7fd fb57 	bl	80010c0 <bme280_init>
 8003a12:	4603      	mov	r3, r0
 8003a14:	461a      	mov	r2, r3
 8003a16:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <main+0x1ec>)
 8003a18:	701a      	strb	r2, [r3, #0]

  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8003a1a:	4b38      	ldr	r3, [pc, #224]	; (8003afc <main+0x1dc>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_4X;
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <main+0x1dc>)
 8003a24:	2203      	movs	r2, #3
 8003a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8003a2a:	4b34      	ldr	r3, [pc, #208]	; (8003afc <main+0x1dc>)
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 8003a32:	4b32      	ldr	r3, [pc, #200]	; (8003afc <main+0x1dc>)
 8003a34:	2204      	movs	r2, #4
 8003a36:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8003a3a:	4930      	ldr	r1, [pc, #192]	; (8003afc <main+0x1dc>)
 8003a3c:	200f      	movs	r0, #15
 8003a3e:	f7fd fc33 	bl	80012a8 <bme280_set_sensor_settings>
 8003a42:	4603      	mov	r3, r0
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <main+0x1ec>)
 8003a48:	701a      	strb	r2, [r3, #0]

  ////ALTITUDE OFFSET
for(uint8_t i=0;i<5;i++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003a50:	e02d      	b.n	8003aae <main+0x18e>
{
	HAL_Delay(40);
 8003a52:	2028      	movs	r0, #40	; 0x28
 8003a54:	f001 fcbe 	bl	80053d4 <HAL_Delay>
  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8003a58:	4928      	ldr	r1, [pc, #160]	; (8003afc <main+0x1dc>)
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	f7fd fc79 	bl	8001352 <bme280_set_sensor_mode>
 8003a60:	4603      	mov	r3, r0
 8003a62:	461a      	mov	r2, r3
 8003a64:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <main+0x1ec>)
 8003a66:	701a      	strb	r2, [r3, #0]
  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8003a68:	4a24      	ldr	r2, [pc, #144]	; (8003afc <main+0x1dc>)
 8003a6a:	4929      	ldr	r1, [pc, #164]	; (8003b10 <main+0x1f0>)
 8003a6c:	2007      	movs	r0, #7
 8003a6e:	f7fd fcec 	bl	800144a <bme280_get_sensor_data>
 8003a72:	4603      	mov	r3, r0
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <main+0x1ec>)
 8003a78:	701a      	strb	r2, [r3, #0]
  if(rslt == BME280_OK)
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <main+0x1ec>)
 8003a7c:	f993 3000 	ldrsb.w	r3, [r3]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10f      	bne.n	8003aa4 <main+0x184>
  { pressure = comp_data.pressure;
 8003a84:	4b22      	ldr	r3, [pc, #136]	; (8003b10 <main+0x1f0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	ee07 3a90 	vmov	s15, r3
 8003a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a90:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <main+0x1f4>)
 8003a92:	edc3 7a00 	vstr	s15, [r3]
    offset_altitude=BME280_Get_Altitude();
 8003a96:	f000 febb 	bl	8004810 <BME280_Get_Altitude>
 8003a9a:	eef0 7a40 	vmov.f32	s15, s0
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <main+0x1f8>)
 8003aa0:	edc3 7a00 	vstr	s15, [r3]
for(uint8_t i=0;i<5;i++)
 8003aa4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003aae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d9cd      	bls.n	8003a52 <main+0x132>
  }
}

     // W25Q_WriteData(0x000000, writeData, 50);
  	 W25Q_SectorErase(0x000000);
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	f001 fbc0 	bl	800523c <W25Q_SectorErase>
     // Bellekten veri okuma
     W25Q_ReadData(0x000000, readData, 50);
 8003abc:	2232      	movs	r2, #50	; 0x32
 8003abe:	4917      	ldr	r1, [pc, #92]	; (8003b1c <main+0x1fc>)
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	f001 fb85 	bl	80051d0 <W25Q_ReadData>





  for(uint8_t i=0;i<30;i++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003acc:	e03e      	b.n	8003b4c <main+0x22c>
 8003ace:	bf00      	nop
 8003ad0:	40020400 	.word	0x40020400
 8003ad4:	40020800 	.word	0x40020800
 8003ad8:	200005c1 	.word	0x200005c1
 8003adc:	200004b8 	.word	0x200004b8
 8003ae0:	2000042c 	.word	0x2000042c
 8003ae4:	200003e4 	.word	0x200003e4
 8003ae8:	2000073c 	.word	0x2000073c
 8003aec:	200007cc 	.word	0x200007cc
 8003af0:	20000784 	.word	0x20000784
 8003af4:	20000814 	.word	0x20000814
 8003af8:	20000668 	.word	0x20000668
 8003afc:	2000085c 	.word	0x2000085c
 8003b00:	08004901 	.word	0x08004901
 8003b04:	08004989 	.word	0x08004989
 8003b08:	08004971 	.word	0x08004971
 8003b0c:	200008a8 	.word	0x200008a8
 8003b10:	2000089c 	.word	0x2000089c
 8003b14:	20000654 	.word	0x20000654
 8003b18:	20000650 	.word	0x20000650
 8003b1c:	200005c8 	.word	0x200005c8
  {
  		  	    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_4);
 8003b20:	2110      	movs	r1, #16
 8003b22:	48be      	ldr	r0, [pc, #760]	; (8003e1c <main+0x4fc>)
 8003b24:	f002 fa55 	bl	8005fd2 <HAL_GPIO_TogglePin>
  		  	    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8003b28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b2c:	48bc      	ldr	r0, [pc, #752]	; (8003e20 <main+0x500>)
 8003b2e:	f002 fa50 	bl	8005fd2 <HAL_GPIO_TogglePin>
  		  	    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 8003b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b36:	48ba      	ldr	r0, [pc, #744]	; (8003e20 <main+0x500>)
 8003b38:	f002 fa4b 	bl	8005fd2 <HAL_GPIO_TogglePin>
  		  		HAL_Delay(100);
 8003b3c:	2064      	movs	r0, #100	; 0x64
 8003b3e:	f001 fc49 	bl	80053d4 <HAL_Delay>
  for(uint8_t i=0;i<30;i++)
 8003b42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003b46:	3301      	adds	r3, #1
 8003b48:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003b4c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003b50:	2b1d      	cmp	r3, #29
 8003b52:	d9e5      	bls.n	8003b20 <main+0x200>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


					   if(sensor_flag==1){
 8003b54:	4bb3      	ldr	r3, [pc, #716]	; (8003e24 <main+0x504>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	f040 80a5 	bne.w	8003ca8 <main+0x388>
							    sensor_flag=0;
 8003b5e:	4bb1      	ldr	r3, [pc, #708]	; (8003e24 <main+0x504>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
                                prev_alt=altitude;
 8003b64:	4bb0      	ldr	r3, [pc, #704]	; (8003e28 <main+0x508>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4ab0      	ldr	r2, [pc, #704]	; (8003e2c <main+0x50c>)
 8003b6a:	6013      	str	r3, [r2, #0]
                                rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8003b6c:	49b0      	ldr	r1, [pc, #704]	; (8003e30 <main+0x510>)
 8003b6e:	2001      	movs	r0, #1
 8003b70:	f7fd fbef 	bl	8001352 <bme280_set_sensor_mode>
 8003b74:	4603      	mov	r3, r0
 8003b76:	461a      	mov	r2, r3
 8003b78:	4bae      	ldr	r3, [pc, #696]	; (8003e34 <main+0x514>)
 8003b7a:	701a      	strb	r2, [r3, #0]
                    		    /* �?��?�터 취�? */
                    		    rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8003b7c:	4aac      	ldr	r2, [pc, #688]	; (8003e30 <main+0x510>)
 8003b7e:	49ae      	ldr	r1, [pc, #696]	; (8003e38 <main+0x518>)
 8003b80:	2007      	movs	r0, #7
 8003b82:	f7fd fc62 	bl	800144a <bme280_get_sensor_data>
 8003b86:	4603      	mov	r3, r0
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4baa      	ldr	r3, [pc, #680]	; (8003e34 <main+0x514>)
 8003b8c:	701a      	strb	r2, [r3, #0]
                    		    if(rslt == BME280_OK)
 8003b8e:	4ba9      	ldr	r3, [pc, #676]	; (8003e34 <main+0x514>)
 8003b90:	f993 3000 	ldrsb.w	r3, [r3]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d135      	bne.n	8003c04 <main+0x2e4>
                    		    {
                    		      temperature = comp_data.temperature;
 8003b98:	4ba7      	ldr	r3, [pc, #668]	; (8003e38 <main+0x518>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba4:	4ba5      	ldr	r3, [pc, #660]	; (8003e3c <main+0x51c>)
 8003ba6:	edc3 7a00 	vstr	s15, [r3]
                    		      humidity = comp_data.humidity;
 8003baa:	4ba3      	ldr	r3, [pc, #652]	; (8003e38 <main+0x518>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb6:	4ba2      	ldr	r3, [pc, #648]	; (8003e40 <main+0x520>)
 8003bb8:	edc3 7a00 	vstr	s15, [r3]
                    		      pressure = comp_data.pressure;
 8003bbc:	4b9e      	ldr	r3, [pc, #632]	; (8003e38 <main+0x518>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	ee07 3a90 	vmov	s15, r3
 8003bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc8:	4b9e      	ldr	r3, [pc, #632]	; (8003e44 <main+0x524>)
 8003bca:	edc3 7a00 	vstr	s15, [r3]
                    		      altitude=BME280_Get_Altitude()-offset_altitude;
 8003bce:	f000 fe1f 	bl	8004810 <BME280_Get_Altitude>
 8003bd2:	eeb0 7a40 	vmov.f32	s14, s0
 8003bd6:	4b9c      	ldr	r3, [pc, #624]	; (8003e48 <main+0x528>)
 8003bd8:	edd3 7a00 	vldr	s15, [r3]
 8003bdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be0:	4b91      	ldr	r3, [pc, #580]	; (8003e28 <main+0x508>)
 8003be2:	edc3 7a00 	vstr	s15, [r3]
                    		      speed=(altitude-prev_alt)*20;
 8003be6:	4b90      	ldr	r3, [pc, #576]	; (8003e28 <main+0x508>)
 8003be8:	ed93 7a00 	vldr	s14, [r3]
 8003bec:	4b8f      	ldr	r3, [pc, #572]	; (8003e2c <main+0x50c>)
 8003bee:	edd3 7a00 	vldr	s15, [r3]
 8003bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bf6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bfe:	4b93      	ldr	r3, [pc, #588]	; (8003e4c <main+0x52c>)
 8003c00:	edc3 7a00 	vstr	s15, [r3]


                    		    }
                            	 LSM6DSLTR_Read_Accel_Data(&Lsm_Sensor);
 8003c04:	4892      	ldr	r0, [pc, #584]	; (8003e50 <main+0x530>)
 8003c06:	f7fe fe43 	bl	8002890 <LSM6DSLTR_Read_Accel_Data>
                        		 calculate_roll_pitch(&Lsm_Sensor);
 8003c0a:	4891      	ldr	r0, [pc, #580]	; (8003e50 <main+0x530>)
 8003c0c:	f7fe ffb4 	bl	8002b78 <calculate_roll_pitch>
                        		 LSM6DSLTR_Read_Gyro_Data(&Lsm_Sensor);
 8003c10:	488f      	ldr	r0, [pc, #572]	; (8003e50 <main+0x530>)
 8003c12:	f7fe ff17 	bl	8002a44 <LSM6DSLTR_Read_Gyro_Data>
                        		 update_angles(&Lsm_Sensor);
 8003c16:	488e      	ldr	r0, [pc, #568]	; (8003e50 <main+0x530>)
 8003c18:	f7ff f834 	bl	8002c84 <update_angles>

                        		 Lsm_Sensor.Accel_X=FIRFilter_Update(&accx,  Lsm_Sensor.Accel_X);
 8003c1c:	4b8c      	ldr	r3, [pc, #560]	; (8003e50 <main+0x530>)
 8003c1e:	edd3 7a00 	vldr	s15, [r3]
 8003c22:	eeb0 0a67 	vmov.f32	s0, s15
 8003c26:	488b      	ldr	r0, [pc, #556]	; (8003e54 <main+0x534>)
 8003c28:	f7fe fd62 	bl	80026f0 <FIRFilter_Update>
 8003c2c:	eef0 7a40 	vmov.f32	s15, s0
 8003c30:	4b87      	ldr	r3, [pc, #540]	; (8003e50 <main+0x530>)
 8003c32:	edc3 7a00 	vstr	s15, [r3]

                        		 Lsm_Sensor.Gyro_X=FIRFilter_Update(&IMU_GYROX,  Lsm_Sensor.Gyro_X);
 8003c36:	4b86      	ldr	r3, [pc, #536]	; (8003e50 <main+0x530>)
 8003c38:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c40:	4885      	ldr	r0, [pc, #532]	; (8003e58 <main+0x538>)
 8003c42:	f7fe fd55 	bl	80026f0 <FIRFilter_Update>
 8003c46:	eef0 7a40 	vmov.f32	s15, s0
 8003c4a:	4b81      	ldr	r3, [pc, #516]	; (8003e50 <main+0x530>)
 8003c4c:	edc3 7a03 	vstr	s15, [r3, #12]
                        		 Lsm_Sensor.Gyro_Y=FIRFilter_Update(&IMU_GYROY, Lsm_Sensor.Gyro_Y);
 8003c50:	4b7f      	ldr	r3, [pc, #508]	; (8003e50 <main+0x530>)
 8003c52:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c56:	eeb0 0a67 	vmov.f32	s0, s15
 8003c5a:	4880      	ldr	r0, [pc, #512]	; (8003e5c <main+0x53c>)
 8003c5c:	f7fe fd48 	bl	80026f0 <FIRFilter_Update>
 8003c60:	eef0 7a40 	vmov.f32	s15, s0
 8003c64:	4b7a      	ldr	r3, [pc, #488]	; (8003e50 <main+0x530>)
 8003c66:	edc3 7a04 	vstr	s15, [r3, #16]
                        		 Lsm_Sensor.Gyro_Z=FIRFilter_Update(&IMU_GYROZ, Lsm_Sensor.Gyro_Z);
 8003c6a:	4b79      	ldr	r3, [pc, #484]	; (8003e50 <main+0x530>)
 8003c6c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c70:	eeb0 0a67 	vmov.f32	s0, s15
 8003c74:	487a      	ldr	r0, [pc, #488]	; (8003e60 <main+0x540>)
 8003c76:	f7fe fd3b 	bl	80026f0 <FIRFilter_Update>
 8003c7a:	eef0 7a40 	vmov.f32	s15, s0
 8003c7e:	4b74      	ldr	r3, [pc, #464]	; (8003e50 <main+0x530>)
 8003c80:	edc3 7a05 	vstr	s15, [r3, #20]

                        		 stage_communication=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8003c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c88:	4864      	ldr	r0, [pc, #400]	; (8003e1c <main+0x4fc>)
 8003c8a:	f002 f971 	bl	8005f70 <HAL_GPIO_ReadPin>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	461a      	mov	r2, r3
 8003c92:	4b74      	ldr	r3, [pc, #464]	; (8003e64 <main+0x544>)
 8003c94:	701a      	strb	r2, [r3, #0]
                        		 BUTTON_STATE=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8003c96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c9a:	4860      	ldr	r0, [pc, #384]	; (8003e1c <main+0x4fc>)
 8003c9c:	f002 f968 	bl	8005f70 <HAL_GPIO_ReadPin>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b70      	ldr	r3, [pc, #448]	; (8003e68 <main+0x548>)
 8003ca6:	701a      	strb	r2, [r3, #0]
					   }


                       if(lora_flag==1){
 8003ca8:	4b70      	ldr	r3, [pc, #448]	; (8003e6c <main+0x54c>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	f040 81aa 	bne.w	8004006 <main+0x6e6>
                    	   lora_flag=0;
 8003cb2:	4b6e      	ldr	r3, [pc, #440]	; (8003e6c <main+0x54c>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]


	loratx[0]=0x8;
 8003cb8:	4b6d      	ldr	r3, [pc, #436]	; (8003e70 <main+0x550>)
 8003cba:	2208      	movs	r2, #8
 8003cbc:	701a      	strb	r2, [r3, #0]
	loratx[1]=0x2A;
 8003cbe:	4b6c      	ldr	r3, [pc, #432]	; (8003e70 <main+0x550>)
 8003cc0:	222a      	movs	r2, #42	; 0x2a
 8003cc2:	705a      	strb	r2, [r3, #1]
	loratx[2]=0x6;
 8003cc4:	4b6a      	ldr	r3, [pc, #424]	; (8003e70 <main+0x550>)
 8003cc6:	2206      	movs	r2, #6
 8003cc8:	709a      	strb	r2, [r3, #2]
	loratx[3]=DEVICE_ID;
 8003cca:	4b69      	ldr	r3, [pc, #420]	; (8003e70 <main+0x550>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	70da      	strb	r2, [r3, #3]
	loratx[4]=gps.sats_in_view;
 8003cd0:	4b68      	ldr	r3, [pc, #416]	; (8003e74 <main+0x554>)
 8003cd2:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8003cd6:	4b66      	ldr	r3, [pc, #408]	; (8003e70 <main+0x550>)
 8003cd8:	711a      	strb	r2, [r3, #4]

		 float2unit8 f2u8_gpsalt;
	     f2u8_gpsalt.fVal=gps.altitude;
 8003cda:	4b66      	ldr	r3, [pc, #408]	; (8003e74 <main+0x554>)
 8003cdc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f7fc ff98 	bl	8000c18 <__aeabi_d2f>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	62fb      	str	r3, [r7, #44]	; 0x2c
			 for(uint8_t i=0;i<4;i++)
 8003cec:	2300      	movs	r3, #0
 8003cee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003cf2:	e00f      	b.n	8003d14 <main+0x3f4>
			 {
				loratx[i+5]=f2u8_gpsalt.array[i];
 8003cf4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003cf8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003cfc:	3305      	adds	r3, #5
 8003cfe:	3240      	adds	r2, #64	; 0x40
 8003d00:	443a      	add	r2, r7
 8003d02:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8003d06:	4a5a      	ldr	r2, [pc, #360]	; (8003e70 <main+0x550>)
 8003d08:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003d0a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003d0e:	3301      	adds	r3, #1
 8003d10:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003d14:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d9eb      	bls.n	8003cf4 <main+0x3d4>
			 }

		 float2unit8 f2u8_latitude;
		 f2u8_latitude.fVal=gps.latitude;
 8003d1c:	4b55      	ldr	r3, [pc, #340]	; (8003e74 <main+0x554>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	4610      	mov	r0, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	f7fc ff77 	bl	8000c18 <__aeabi_d2f>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	62bb      	str	r3, [r7, #40]	; 0x28
			 for(uint8_t i=0;i<4;i++)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8003d34:	e00f      	b.n	8003d56 <main+0x436>
			 {
				loratx[i+9]=f2u8_latitude.array[i];
 8003d36:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8003d3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003d3e:	3309      	adds	r3, #9
 8003d40:	3240      	adds	r2, #64	; 0x40
 8003d42:	443a      	add	r2, r7
 8003d44:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8003d48:	4a49      	ldr	r2, [pc, #292]	; (8003e70 <main+0x550>)
 8003d4a:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003d4c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003d50:	3301      	adds	r3, #1
 8003d52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8003d56:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d9eb      	bls.n	8003d36 <main+0x416>
			 }

		 float2unit8 f2u8_longitude;
		 f2u8_longitude.fVal=gps.longitude;
 8003d5e:	4b45      	ldr	r3, [pc, #276]	; (8003e74 <main+0x554>)
 8003d60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	f7fc ff56 	bl	8000c18 <__aeabi_d2f>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
			 for(uint8_t i=0;i<4;i++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d76:	e00f      	b.n	8003d98 <main+0x478>
			 {
				loratx[i+13]=f2u8_longitude.array[i];
 8003d78:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003d7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003d80:	330d      	adds	r3, #13
 8003d82:	3240      	adds	r2, #64	; 0x40
 8003d84:	443a      	add	r2, r7
 8003d86:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8003d8a:	4a39      	ldr	r2, [pc, #228]	; (8003e70 <main+0x550>)
 8003d8c:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003d8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003d92:	3301      	adds	r3, #1
 8003d94:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003d98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d9eb      	bls.n	8003d78 <main+0x458>
			 }

		 float2unit8 f2u8_altitude;
		 f2u8_altitude.fVal=altitude;
 8003da0:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <main+0x508>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	623b      	str	r3, [r7, #32]
			 for(uint8_t i=0;i<4;i++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8003dac:	e00f      	b.n	8003dce <main+0x4ae>
			 {
				loratx[i+17]=f2u8_altitude.array[i];
 8003dae:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8003db2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003db6:	3311      	adds	r3, #17
 8003db8:	3240      	adds	r2, #64	; 0x40
 8003dba:	443a      	add	r2, r7
 8003dbc:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8003dc0:	4a2b      	ldr	r2, [pc, #172]	; (8003e70 <main+0x550>)
 8003dc2:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003dc4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003dc8:	3301      	adds	r3, #1
 8003dca:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8003dce:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d9eb      	bls.n	8003dae <main+0x48e>
			 }
		 float2unit8 f2u8_speed;
		 f2u8_speed.fVal=speed;
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <main+0x52c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	61fb      	str	r3, [r7, #28]
			 for(uint8_t i=0;i<4;i++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8003de2:	e00f      	b.n	8003e04 <main+0x4e4>
			 {
				loratx[i+21]=f2u8_speed.array[i];
 8003de4:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8003de8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003dec:	3315      	adds	r3, #21
 8003dee:	3240      	adds	r2, #64	; 0x40
 8003df0:	443a      	add	r2, r7
 8003df2:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 8003df6:	4a1e      	ldr	r2, [pc, #120]	; (8003e70 <main+0x550>)
 8003df8:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003dfa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003dfe:	3301      	adds	r3, #1
 8003e00:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8003e04:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d9eb      	bls.n	8003de4 <main+0x4c4>
			 }

		 float2unit8 f2u8_temp;
		 f2u8_temp.fVal=temperature;
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <main+0x51c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	61bb      	str	r3, [r7, #24]
			 for(uint8_t i=0;i<4;i++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8003e18:	e03e      	b.n	8003e98 <main+0x578>
 8003e1a:	bf00      	nop
 8003e1c:	40020800 	.word	0x40020800
 8003e20:	40020400 	.word	0x40020400
 8003e24:	20000643 	.word	0x20000643
 8003e28:	2000064c 	.word	0x2000064c
 8003e2c:	2000065c 	.word	0x2000065c
 8003e30:	2000085c 	.word	0x2000085c
 8003e34:	200008a8 	.word	0x200008a8
 8003e38:	2000089c 	.word	0x2000089c
 8003e3c:	20000644 	.word	0x20000644
 8003e40:	20000648 	.word	0x20000648
 8003e44:	20000654 	.word	0x20000654
 8003e48:	20000650 	.word	0x20000650
 8003e4c:	20000660 	.word	0x20000660
 8003e50:	20000718 	.word	0x20000718
 8003e54:	2000073c 	.word	0x2000073c
 8003e58:	20000784 	.word	0x20000784
 8003e5c:	200007cc 	.word	0x200007cc
 8003e60:	20000814 	.word	0x20000814
 8003e64:	200005c4 	.word	0x200005c4
 8003e68:	200005c6 	.word	0x200005c6
 8003e6c:	20000642 	.word	0x20000642
 8003e70:	200005fc 	.word	0x200005fc
 8003e74:	20000668 	.word	0x20000668
			 {
				loratx[i+25]=f2u8_temp.array[i];
 8003e78:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e7c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003e80:	3319      	adds	r3, #25
 8003e82:	3240      	adds	r2, #64	; 0x40
 8003e84:	443a      	add	r2, r7
 8003e86:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8003e8a:	4aa4      	ldr	r2, [pc, #656]	; (800411c <main+0x7fc>)
 8003e8c:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003e8e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003e92:	3301      	adds	r3, #1
 8003e94:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8003e98:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d9eb      	bls.n	8003e78 <main+0x558>
			 }

		 float2unit8 f2u8_accx;
		 f2u8_accx.fVal=Lsm_Sensor.Accel_X;
 8003ea0:	4b9f      	ldr	r3, [pc, #636]	; (8004120 <main+0x800>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	617b      	str	r3, [r7, #20]
			 for(uint8_t i=0;i<4;i++)
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003eac:	e00f      	b.n	8003ece <main+0x5ae>
			 {
				loratx[i+29]=f2u8_accx.array[i];
 8003eae:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003eb6:	331d      	adds	r3, #29
 8003eb8:	3240      	adds	r2, #64	; 0x40
 8003eba:	443a      	add	r2, r7
 8003ebc:	f812 1c2c 	ldrb.w	r1, [r2, #-44]
 8003ec0:	4a96      	ldr	r2, [pc, #600]	; (800411c <main+0x7fc>)
 8003ec2:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003ec4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ec8:	3301      	adds	r3, #1
 8003eca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003ece:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d9eb      	bls.n	8003eae <main+0x58e>
			 }

		 float2unit8 f2u8_accy;
		 f2u8_accy.fVal=Lsm_Sensor.Accel_Y;
 8003ed6:	4b92      	ldr	r3, [pc, #584]	; (8004120 <main+0x800>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	613b      	str	r3, [r7, #16]
		 	 for(uint8_t i=0;i<4;i++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003ee2:	e00f      	b.n	8003f04 <main+0x5e4>
			 {
				loratx[i+33]=f2u8_accy.array[i];
 8003ee4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003ee8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003eec:	3321      	adds	r3, #33	; 0x21
 8003eee:	3240      	adds	r2, #64	; 0x40
 8003ef0:	443a      	add	r2, r7
 8003ef2:	f812 1c30 	ldrb.w	r1, [r2, #-48]
 8003ef6:	4a89      	ldr	r2, [pc, #548]	; (800411c <main+0x7fc>)
 8003ef8:	54d1      	strb	r1, [r2, r3]
		 	 for(uint8_t i=0;i<4;i++)
 8003efa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003efe:	3301      	adds	r3, #1
 8003f00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003f04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d9eb      	bls.n	8003ee4 <main+0x5c4>
			 }

		 float2unit8 f2u8_accz;
		 f2u8_accz.fVal=Lsm_Sensor.Accel_Z;
 8003f0c:	4b84      	ldr	r3, [pc, #528]	; (8004120 <main+0x800>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	60fb      	str	r3, [r7, #12]
		 	 for(uint8_t i=0;i<4;i++)
 8003f12:	2300      	movs	r3, #0
 8003f14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8003f18:	e00f      	b.n	8003f3a <main+0x61a>
			 {
			    loratx[i+37]=f2u8_accz.array[i];
 8003f1a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8003f1e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003f22:	3325      	adds	r3, #37	; 0x25
 8003f24:	3240      	adds	r2, #64	; 0x40
 8003f26:	443a      	add	r2, r7
 8003f28:	f812 1c34 	ldrb.w	r1, [r2, #-52]
 8003f2c:	4a7b      	ldr	r2, [pc, #492]	; (800411c <main+0x7fc>)
 8003f2e:	54d1      	strb	r1, [r2, r3]
		 	 for(uint8_t i=0;i<4;i++)
 8003f30:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003f34:	3301      	adds	r3, #1
 8003f36:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8003f3a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d9eb      	bls.n	8003f1a <main+0x5fa>
			 }

		 float2unit8 f2u8_roll;
		 f2u8_roll.fVal=Lsm_Sensor.Roll;
 8003f42:	4b77      	ldr	r3, [pc, #476]	; (8004120 <main+0x800>)
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	60bb      	str	r3, [r7, #8]
			 for(uint8_t i=0;i<4;i++)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8003f4e:	e00f      	b.n	8003f70 <main+0x650>
			 {
				loratx[i+41]=f2u8_roll.array[i];
 8003f50:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8003f54:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003f58:	3329      	adds	r3, #41	; 0x29
 8003f5a:	3240      	adds	r2, #64	; 0x40
 8003f5c:	443a      	add	r2, r7
 8003f5e:	f812 1c38 	ldrb.w	r1, [r2, #-56]
 8003f62:	4a6e      	ldr	r2, [pc, #440]	; (800411c <main+0x7fc>)
 8003f64:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003f66:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8003f70:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d9eb      	bls.n	8003f50 <main+0x630>
			 }

		 float2unit8 f2u8_pitch;
		 f2u8_pitch.fVal=Lsm_Sensor.Pitch;
 8003f78:	4b69      	ldr	r3, [pc, #420]	; (8004120 <main+0x800>)
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	607b      	str	r3, [r7, #4]
			 for(uint8_t i=0;i<4;i++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f84:	e00f      	b.n	8003fa6 <main+0x686>
			 {
				loratx[i+45]=f2u8_pitch.array[i];
 8003f86:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f8e:	332d      	adds	r3, #45	; 0x2d
 8003f90:	3240      	adds	r2, #64	; 0x40
 8003f92:	443a      	add	r2, r7
 8003f94:	f812 1c3c 	ldrb.w	r1, [r2, #-60]
 8003f98:	4a60      	ldr	r2, [pc, #384]	; (800411c <main+0x7fc>)
 8003f9a:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 8003f9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d9eb      	bls.n	8003f86 <main+0x666>
			 }

							loratx[49]=v4_battery;
 8003fae:	4b5d      	ldr	r3, [pc, #372]	; (8004124 <main+0x804>)
 8003fb0:	781a      	ldrb	r2, [r3, #0]
 8003fb2:	4b5a      	ldr	r3, [pc, #360]	; (800411c <main+0x7fc>)
 8003fb4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
							loratx[50]=v4_mod;
 8003fb8:	4b5b      	ldr	r3, [pc, #364]	; (8004128 <main+0x808>)
 8003fba:	781a      	ldrb	r2, [r3, #0]
 8003fbc:	4b57      	ldr	r3, [pc, #348]	; (800411c <main+0x7fc>)
 8003fbe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
							loratx[51]=stage_communication;
 8003fc2:	4b5a      	ldr	r3, [pc, #360]	; (800412c <main+0x80c>)
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	4b55      	ldr	r3, [pc, #340]	; (800411c <main+0x7fc>)
 8003fc8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
							 for(uint8_t i=52;i<69;i++)
 8003fcc:	2334      	movs	r3, #52	; 0x34
 8003fce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8003fd2:	e009      	b.n	8003fe8 <main+0x6c8>
							 {
								loratx[i]='0';
 8003fd4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003fd8:	4a50      	ldr	r2, [pc, #320]	; (800411c <main+0x7fc>)
 8003fda:	2130      	movs	r1, #48	; 0x30
 8003fdc:	54d1      	strb	r1, [r2, r3]
							 for(uint8_t i=52;i<69;i++)
 8003fde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8003fe8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003fec:	2b44      	cmp	r3, #68	; 0x44
 8003fee:	d9f1      	bls.n	8003fd4 <main+0x6b4>
							 }

							loratx[69]='\n';
 8003ff0:	4b4a      	ldr	r3, [pc, #296]	; (800411c <main+0x7fc>)
 8003ff2:	220a      	movs	r2, #10
 8003ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			  HAL_UART_Transmit(&huart3,loratx,LORA_TX_BUFFER_SIZE , 1000);
 8003ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ffc:	2246      	movs	r2, #70	; 0x46
 8003ffe:	4947      	ldr	r1, [pc, #284]	; (800411c <main+0x7fc>)
 8004000:	484b      	ldr	r0, [pc, #300]	; (8004130 <main+0x810>)
 8004002:	f005 fb62 	bl	80096ca <HAL_UART_Transmit>

            		 }


 		  	  	  	  switch(BOOSTER){
 8004006:	4b4b      	ldr	r3, [pc, #300]	; (8004134 <main+0x814>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b07      	cmp	r3, #7
 800400c:	f63f ada2 	bhi.w	8003b54 <main+0x234>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <main+0x6f8>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	08004039 	.word	0x08004039
 800401c:	08004063 	.word	0x08004063
 8004020:	0800408b 	.word	0x0800408b
 8004024:	080040c1 	.word	0x080040c1
 8004028:	080040cf 	.word	0x080040cf
 800402c:	080040f5 	.word	0x080040f5
 8004030:	080040fd 	.word	0x080040fd
 8004034:	08004105 	.word	0x08004105

 		  	  	  	  case RAMPA:
		  	  	  		  	  v4_mod=1;
 8004038:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <main+0x808>)
 800403a:	2201      	movs	r2, #1
 800403c:	701a      	strb	r2, [r3, #0]
 		  	  	  		  //RAMPA MODU  ÜST KADEME HABERLE�?ME KONTROL ET
 		  	  	  		  if(Lsm_Sensor.Accel_X<-3){
 800403e:	4b38      	ldr	r3, [pc, #224]	; (8004120 <main+0x800>)
 8004040:	edd3 7a00 	vldr	s15, [r3]
 8004044:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 8004048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004050:	d400      	bmi.n	8004054 <main+0x734>
 		  	  	  		  	  BOOSTER=UCUS;
 	 		  	  	    	  HAL_TIM_Base_Start_IT(&htim6);
 		  	  	  		  	  }
 		  	  	  		  	  break;
 8004052:	e061      	b.n	8004118 <main+0x7f8>
 		  	  	  		  	  BOOSTER=UCUS;
 8004054:	4b37      	ldr	r3, [pc, #220]	; (8004134 <main+0x814>)
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]
 	 		  	  	    	  HAL_TIM_Base_Start_IT(&htim6);
 800405a:	4837      	ldr	r0, [pc, #220]	; (8004138 <main+0x818>)
 800405c:	f004 ffe8 	bl	8009030 <HAL_TIM_Base_Start_IT>
 		  	  	  		  	  break;
 8004060:	e05a      	b.n	8004118 <main+0x7f8>
 		  	  	      case UCUS:
		  	  	    	      v4_mod=2;
 8004062:	4b31      	ldr	r3, [pc, #196]	; (8004128 <main+0x808>)
 8004064:	2202      	movs	r2, #2
 8004066:	701a      	strb	r2, [r3, #0]
 		  	  	    	  // FLASH MEMORYE KAYDETMEYE BA�?LA VE MOTOR YANMA SÜRESİ KADAR SAY
 		  	  	    	  if(motor_burnout==2)
 8004068:	4b34      	ldr	r3, [pc, #208]	; (800413c <main+0x81c>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d14d      	bne.n	800410c <main+0x7ec>
 		  	  	    	  {	 HAL_TIM_Base_Stop_IT(&htim6);
 8004070:	4831      	ldr	r0, [pc, #196]	; (8004138 <main+0x818>)
 8004072:	f005 f84d 	bl	8009110 <HAL_TIM_Base_Stop_IT>
 		  	  	    	     HAL_TIM_Base_Start_IT(&htim7);
 8004076:	4832      	ldr	r0, [pc, #200]	; (8004140 <main+0x820>)
 8004078:	f004 ffda 	bl	8009030 <HAL_TIM_Base_Start_IT>
 		  	  	    	  	 BOOSTER=BURNOUT;
 800407c:	4b2d      	ldr	r3, [pc, #180]	; (8004134 <main+0x814>)
 800407e:	2202      	movs	r2, #2
 8004080:	701a      	strb	r2, [r3, #0]
 		  	  	    	  	 motor_burnout=0;
 8004082:	4b2e      	ldr	r3, [pc, #184]	; (800413c <main+0x81c>)
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
   		  	  	    	  }
 		  	  	  		  	   break;
 8004088:	e040      	b.n	800410c <main+0x7ec>
 		  	  	      case BURNOUT:
		  	  	    	  	  v4_mod=3;
 800408a:	4b27      	ldr	r3, [pc, #156]	; (8004128 <main+0x808>)
 800408c:	2203      	movs	r2, #3
 800408e:	701a      	strb	r2, [r3, #0]
 		  	  	    	  //İVME VE HIZ DE�?ERLERİNE BAKARAK SAFETY SÜRESİ GEÇMEDEN KADEMEYİ AYIRABİLİR
 		  	  	    	  if(Lsm_Sensor.Accel_X<-3 || motor_burnout==2 ){
 8004090:	4b23      	ldr	r3, [pc, #140]	; (8004120 <main+0x800>)
 8004092:	edd3 7a00 	vldr	s15, [r3]
 8004096:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 800409a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800409e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a2:	d403      	bmi.n	80040ac <main+0x78c>
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <main+0x81c>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d131      	bne.n	8004110 <main+0x7f0>
 		  	  	    		HAL_TIM_Base_Stop_IT(&htim7);
 80040ac:	4824      	ldr	r0, [pc, #144]	; (8004140 <main+0x820>)
 80040ae:	f005 f82f 	bl	8009110 <HAL_TIM_Base_Stop_IT>
 		  	  	    		BOOSTER=AYIR;
 80040b2:	4b20      	ldr	r3, [pc, #128]	; (8004134 <main+0x814>)
 80040b4:	2203      	movs	r2, #3
 80040b6:	701a      	strb	r2, [r3, #0]
 		  	  	    		motor_burnout=0;
 80040b8:	4b20      	ldr	r3, [pc, #128]	; (800413c <main+0x81c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
 		  	  	    	  }
 		  	  	  		       break;
 80040be:	e027      	b.n	8004110 <main+0x7f0>
 		  	  	      case AYIR:
		  	  	    	  	  v4_mod=4;
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <main+0x808>)
 80040c2:	2204      	movs	r2, #4
 80040c4:	701a      	strb	r2, [r3, #0]
 		  	  	    	  // MOTOR YANMA SÜRESİ+SAFETY SÜRESİ GEÇTİYSE AYIRMA SİNYALİ GÖNDER

 		  	  	    	      BOOSTER=AYRILDI_MI;
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <main+0x814>)
 80040c8:	2204      	movs	r2, #4
 80040ca:	701a      	strb	r2, [r3, #0]
 		  	  	  		       break;
 80040cc:	e024      	b.n	8004118 <main+0x7f8>
 		  	  	      case AYRILDI_MI:
		  	  	    	  	  v4_mod=5;
 80040ce:	4b16      	ldr	r3, [pc, #88]	; (8004128 <main+0x808>)
 80040d0:	2205      	movs	r2, #5
 80040d2:	701a      	strb	r2, [r3, #0]
 		  	  	    	  //STAGE COMMUNICATION !!!!!
 		  	  	    	  if(stage_communication==0){
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <main+0x80c>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d103      	bne.n	80040e4 <main+0x7c4>
 		  	  	    		  BOOSTER=AYRILDI;
 80040dc:	4b15      	ldr	r3, [pc, #84]	; (8004134 <main+0x814>)
 80040de:	2205      	movs	r2, #5
 80040e0:	701a      	strb	r2, [r3, #0]
 		  	  	    	  }
 		  	  	    	  else if(stage_communication==1){
 		  	  	    		  BOOSTER=AYRILMADI;
 		  	  	    	  }
 		  	  	  		       break;
 80040e2:	e017      	b.n	8004114 <main+0x7f4>
 		  	  	    	  else if(stage_communication==1){
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <main+0x80c>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d113      	bne.n	8004114 <main+0x7f4>
 		  	  	    		  BOOSTER=AYRILMADI;
 80040ec:	4b11      	ldr	r3, [pc, #68]	; (8004134 <main+0x814>)
 80040ee:	2206      	movs	r2, #6
 80040f0:	701a      	strb	r2, [r3, #0]
 		  	  	  		       break;
 80040f2:	e00f      	b.n	8004114 <main+0x7f4>
 		  	  	      case AYRILDI:
		  	  	    	  	 v4_mod=6;
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <main+0x808>)
 80040f6:	2206      	movs	r2, #6
 80040f8:	701a      	strb	r2, [r3, #0]
 		  	  	    	  //AYRILMA GERÇEKLESTI BOOSTER APOGEE YAKALA

 		  	  	  		       break;
 80040fa:	e00d      	b.n	8004118 <main+0x7f8>
 		  	  	      case AYRILMADI:
		  	  	    	  	  v4_mod=7;
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <main+0x808>)
 80040fe:	2207      	movs	r2, #7
 8004100:	701a      	strb	r2, [r3, #0]
 		  	  	    	  //ÇOK SÜRE GEÇTİ VE HALA AYRILMADI İSE BOOSTER PARA�?ÜT AÇMA

 		  	  	  		       break;
 8004102:	e009      	b.n	8004118 <main+0x7f8>
 		  	  	      case FINISH:
		  	  	    	  	  v4_mod=8;
 8004104:	4b08      	ldr	r3, [pc, #32]	; (8004128 <main+0x808>)
 8004106:	2208      	movs	r2, #8
 8004108:	701a      	strb	r2, [r3, #0]
 		  	  	    	  //KURTARMA GERÇEKLE�?Tİ VERİ KAYDETMEYİ BIRAK VE BUZZERI AÇ

 		  	  	  		       break;
 800410a:	e005      	b.n	8004118 <main+0x7f8>
 		  	  	  		  	   break;
 800410c:	bf00      	nop
 800410e:	e521      	b.n	8003b54 <main+0x234>
 		  	  	  		       break;
 8004110:	bf00      	nop
 8004112:	e51f      	b.n	8003b54 <main+0x234>
 		  	  	  		       break;
 8004114:	bf00      	nop
 8004116:	e51d      	b.n	8003b54 <main+0x234>
					   if(sensor_flag==1){
 8004118:	e51c      	b.n	8003b54 <main+0x234>
 800411a:	bf00      	nop
 800411c:	200005fc 	.word	0x200005fc
 8004120:	20000718 	.word	0x20000718
 8004124:	200005c2 	.word	0x200005c2
 8004128:	200005c3 	.word	0x200005c3
 800412c:	200005c4 	.word	0x200005c4
 8004130:	200004fc 	.word	0x200004fc
 8004134:	20000664 	.word	0x20000664
 8004138:	20000354 	.word	0x20000354
 800413c:	200005c5 	.word	0x200005c5
 8004140:	2000039c 	.word	0x2000039c

08004144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b094      	sub	sp, #80	; 0x50
 8004148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800414a:	f107 031c 	add.w	r3, r7, #28
 800414e:	2234      	movs	r2, #52	; 0x34
 8004150:	2100      	movs	r1, #0
 8004152:	4618      	mov	r0, r3
 8004154:	f007 fb85 	bl	800b862 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004158:	f107 0308 	add.w	r3, r7, #8
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004168:	2300      	movs	r3, #0
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	4b29      	ldr	r3, [pc, #164]	; (8004214 <SystemClock_Config+0xd0>)
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	4a28      	ldr	r2, [pc, #160]	; (8004214 <SystemClock_Config+0xd0>)
 8004172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004176:	6413      	str	r3, [r2, #64]	; 0x40
 8004178:	4b26      	ldr	r3, [pc, #152]	; (8004214 <SystemClock_Config+0xd0>)
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004184:	2300      	movs	r3, #0
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	4b23      	ldr	r3, [pc, #140]	; (8004218 <SystemClock_Config+0xd4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a22      	ldr	r2, [pc, #136]	; (8004218 <SystemClock_Config+0xd4>)
 800418e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	4b20      	ldr	r3, [pc, #128]	; (8004218 <SystemClock_Config+0xd4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800419c:	603b      	str	r3, [r7, #0]
 800419e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041a0:	2301      	movs	r3, #1
 80041a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041aa:	2302      	movs	r3, #2
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80041b4:	2304      	movs	r3, #4
 80041b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80041b8:	23a8      	movs	r3, #168	; 0xa8
 80041ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80041bc:	2302      	movs	r3, #2
 80041be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80041c0:	2307      	movs	r3, #7
 80041c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80041c4:	2302      	movs	r3, #2
 80041c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041c8:	f107 031c 	add.w	r3, r7, #28
 80041cc:	4618      	mov	r0, r3
 80041ce:	f003 fe99 	bl	8007f04 <HAL_RCC_OscConfig>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80041d8:	f000 fc12 	bl	8004a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041dc:	230f      	movs	r3, #15
 80041de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80041e0:	2303      	movs	r3, #3
 80041e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80041e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80041ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80041ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80041f4:	f107 0308 	add.w	r3, r7, #8
 80041f8:	2105      	movs	r1, #5
 80041fa:	4618      	mov	r0, r3
 80041fc:	f003 fb38 	bl	8007870 <HAL_RCC_ClockConfig>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004206:	f000 fbfb 	bl	8004a00 <Error_Handler>
  }
}
 800420a:	bf00      	nop
 800420c:	3750      	adds	r7, #80	; 0x50
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800
 8004218:	40007000 	.word	0x40007000

0800421c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004222:	463b      	mov	r3, r7
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800422e:	4b21      	ldr	r3, [pc, #132]	; (80042b4 <MX_ADC1_Init+0x98>)
 8004230:	4a21      	ldr	r2, [pc, #132]	; (80042b8 <MX_ADC1_Init+0x9c>)
 8004232:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004234:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <MX_ADC1_Init+0x98>)
 8004236:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800423a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800423c:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <MX_ADC1_Init+0x98>)
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004242:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <MX_ADC1_Init+0x98>)
 8004244:	2200      	movs	r2, #0
 8004246:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004248:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <MX_ADC1_Init+0x98>)
 800424a:	2200      	movs	r2, #0
 800424c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800424e:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <MX_ADC1_Init+0x98>)
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <MX_ADC1_Init+0x98>)
 8004258:	2200      	movs	r2, #0
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800425c:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <MX_ADC1_Init+0x98>)
 800425e:	4a17      	ldr	r2, [pc, #92]	; (80042bc <MX_ADC1_Init+0xa0>)
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <MX_ADC1_Init+0x98>)
 8004264:	2200      	movs	r2, #0
 8004266:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <MX_ADC1_Init+0x98>)
 800426a:	2201      	movs	r2, #1
 800426c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <MX_ADC1_Init+0x98>)
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004276:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <MX_ADC1_Init+0x98>)
 8004278:	2201      	movs	r2, #1
 800427a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800427c:	480d      	ldr	r0, [pc, #52]	; (80042b4 <MX_ADC1_Init+0x98>)
 800427e:	f001 f8cd 	bl	800541c <HAL_ADC_Init>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004288:	f000 fbba 	bl	8004a00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800428c:	230c      	movs	r3, #12
 800428e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004290:	2301      	movs	r3, #1
 8004292:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004294:	2300      	movs	r3, #0
 8004296:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004298:	463b      	mov	r3, r7
 800429a:	4619      	mov	r1, r3
 800429c:	4805      	ldr	r0, [pc, #20]	; (80042b4 <MX_ADC1_Init+0x98>)
 800429e:	f001 f901 	bl	80054a4 <HAL_ADC_ConfigChannel>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80042a8:	f000 fbaa 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000260 	.word	0x20000260
 80042b8:	40012000 	.word	0x40012000
 80042bc:	0f000001 	.word	0x0f000001

080042c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80042c4:	4b12      	ldr	r3, [pc, #72]	; (8004310 <MX_I2C1_Init+0x50>)
 80042c6:	4a13      	ldr	r2, [pc, #76]	; (8004314 <MX_I2C1_Init+0x54>)
 80042c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <MX_I2C1_Init+0x50>)
 80042cc:	4a12      	ldr	r2, [pc, #72]	; (8004318 <MX_I2C1_Init+0x58>)
 80042ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <MX_I2C1_Init+0x50>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80042d6:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <MX_I2C1_Init+0x50>)
 80042d8:	2200      	movs	r2, #0
 80042da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042dc:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <MX_I2C1_Init+0x50>)
 80042de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042e4:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <MX_I2C1_Init+0x50>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80042ea:	4b09      	ldr	r3, [pc, #36]	; (8004310 <MX_I2C1_Init+0x50>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042f0:	4b07      	ldr	r3, [pc, #28]	; (8004310 <MX_I2C1_Init+0x50>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <MX_I2C1_Init+0x50>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042fc:	4804      	ldr	r0, [pc, #16]	; (8004310 <MX_I2C1_Init+0x50>)
 80042fe:	f001 fe83 	bl	8006008 <HAL_I2C_Init>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004308:	f000 fb7a 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800430c:	bf00      	nop
 800430e:	bd80      	pop	{r7, pc}
 8004310:	200002a8 	.word	0x200002a8
 8004314:	40005400 	.word	0x40005400
 8004318:	00061a80 	.word	0x00061a80

0800431c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004320:	4b17      	ldr	r3, [pc, #92]	; (8004380 <MX_SPI1_Init+0x64>)
 8004322:	4a18      	ldr	r2, [pc, #96]	; (8004384 <MX_SPI1_Init+0x68>)
 8004324:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004326:	4b16      	ldr	r3, [pc, #88]	; (8004380 <MX_SPI1_Init+0x64>)
 8004328:	f44f 7282 	mov.w	r2, #260	; 0x104
 800432c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800432e:	4b14      	ldr	r3, [pc, #80]	; (8004380 <MX_SPI1_Init+0x64>)
 8004330:	2200      	movs	r2, #0
 8004332:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004334:	4b12      	ldr	r3, [pc, #72]	; (8004380 <MX_SPI1_Init+0x64>)
 8004336:	2200      	movs	r2, #0
 8004338:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800433a:	4b11      	ldr	r3, [pc, #68]	; (8004380 <MX_SPI1_Init+0x64>)
 800433c:	2200      	movs	r2, #0
 800433e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <MX_SPI1_Init+0x64>)
 8004342:	2200      	movs	r2, #0
 8004344:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004346:	4b0e      	ldr	r3, [pc, #56]	; (8004380 <MX_SPI1_Init+0x64>)
 8004348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800434c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800434e:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <MX_SPI1_Init+0x64>)
 8004350:	2220      	movs	r2, #32
 8004352:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004354:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <MX_SPI1_Init+0x64>)
 8004356:	2200      	movs	r2, #0
 8004358:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <MX_SPI1_Init+0x64>)
 800435c:	2200      	movs	r2, #0
 800435e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <MX_SPI1_Init+0x64>)
 8004362:	2200      	movs	r2, #0
 8004364:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <MX_SPI1_Init+0x64>)
 8004368:	220a      	movs	r2, #10
 800436a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800436c:	4804      	ldr	r0, [pc, #16]	; (8004380 <MX_SPI1_Init+0x64>)
 800436e:	f004 f867 	bl	8008440 <HAL_SPI_Init>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004378:	f000 fb42 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800437c:	bf00      	nop
 800437e:	bd80      	pop	{r7, pc}
 8004380:	200002fc 	.word	0x200002fc
 8004384:	40013000 	.word	0x40013000

08004388 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800438e:	463b      	mov	r3, r7
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004396:	4b15      	ldr	r3, [pc, #84]	; (80043ec <MX_TIM6_Init+0x64>)
 8004398:	4a15      	ldr	r2, [pc, #84]	; (80043f0 <MX_TIM6_Init+0x68>)
 800439a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400;
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <MX_TIM6_Init+0x64>)
 800439e:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80043a2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <MX_TIM6_Init+0x64>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 34999;
 80043aa:	4b10      	ldr	r3, [pc, #64]	; (80043ec <MX_TIM6_Init+0x64>)
 80043ac:	f648 02b7 	movw	r2, #34999	; 0x88b7
 80043b0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043b2:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <MX_TIM6_Init+0x64>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80043b8:	480c      	ldr	r0, [pc, #48]	; (80043ec <MX_TIM6_Init+0x64>)
 80043ba:	f004 fde9 	bl	8008f90 <HAL_TIM_Base_Init>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80043c4:	f000 fb1c 	bl	8004a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043c8:	2300      	movs	r3, #0
 80043ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80043d0:	463b      	mov	r3, r7
 80043d2:	4619      	mov	r1, r3
 80043d4:	4805      	ldr	r0, [pc, #20]	; (80043ec <MX_TIM6_Init+0x64>)
 80043d6:	f005 f89b 	bl	8009510 <HAL_TIMEx_MasterConfigSynchronization>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80043e0:	f000 fb0e 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000354 	.word	0x20000354
 80043f0:	40001000 	.word	0x40001000

080043f4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043fa:	463b      	mov	r3, r7
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004402:	4b15      	ldr	r3, [pc, #84]	; (8004458 <MX_TIM7_Init+0x64>)
 8004404:	4a15      	ldr	r2, [pc, #84]	; (800445c <MX_TIM7_Init+0x68>)
 8004406:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400;
 8004408:	4b13      	ldr	r3, [pc, #76]	; (8004458 <MX_TIM7_Init+0x64>)
 800440a:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800440e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004410:	4b11      	ldr	r3, [pc, #68]	; (8004458 <MX_TIM7_Init+0x64>)
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <MX_TIM7_Init+0x64>)
 8004418:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800441c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800441e:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <MX_TIM7_Init+0x64>)
 8004420:	2200      	movs	r2, #0
 8004422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004424:	480c      	ldr	r0, [pc, #48]	; (8004458 <MX_TIM7_Init+0x64>)
 8004426:	f004 fdb3 	bl	8008f90 <HAL_TIM_Base_Init>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004430:	f000 fae6 	bl	8004a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004434:	2300      	movs	r3, #0
 8004436:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004438:	2300      	movs	r3, #0
 800443a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800443c:	463b      	mov	r3, r7
 800443e:	4619      	mov	r1, r3
 8004440:	4805      	ldr	r0, [pc, #20]	; (8004458 <MX_TIM7_Init+0x64>)
 8004442:	f005 f865 	bl	8009510 <HAL_TIMEx_MasterConfigSynchronization>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800444c:	f000 fad8 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	2000039c 	.word	0x2000039c
 800445c:	40001400 	.word	0x40001400

08004460 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004464:	4b0e      	ldr	r3, [pc, #56]	; (80044a0 <MX_TIM10_Init+0x40>)
 8004466:	4a0f      	ldr	r2, [pc, #60]	; (80044a4 <MX_TIM10_Init+0x44>)
 8004468:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1680;
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <MX_TIM10_Init+0x40>)
 800446c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8004470:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <MX_TIM10_Init+0x40>)
 8004474:	2200      	movs	r2, #0
 8004476:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <MX_TIM10_Init+0x40>)
 800447a:	f241 3287 	movw	r2, #4999	; 0x1387
 800447e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <MX_TIM10_Init+0x40>)
 8004482:	2200      	movs	r2, #0
 8004484:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <MX_TIM10_Init+0x40>)
 8004488:	2200      	movs	r2, #0
 800448a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800448c:	4804      	ldr	r0, [pc, #16]	; (80044a0 <MX_TIM10_Init+0x40>)
 800448e:	f004 fd7f 	bl	8008f90 <HAL_TIM_Base_Init>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004498:	f000 fab2 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800449c:	bf00      	nop
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	200003e4 	.word	0x200003e4
 80044a4:	40014400 	.word	0x40014400

080044a8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80044ac:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <MX_TIM11_Init+0x40>)
 80044ae:	4a0f      	ldr	r2, [pc, #60]	; (80044ec <MX_TIM11_Init+0x44>)
 80044b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16800;
 80044b2:	4b0d      	ldr	r3, [pc, #52]	; (80044e8 <MX_TIM11_Init+0x40>)
 80044b4:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80044b8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <MX_TIM11_Init+0x40>)
 80044bc:	2200      	movs	r2, #0
 80044be:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 19999;
 80044c0:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <MX_TIM11_Init+0x40>)
 80044c2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80044c6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <MX_TIM11_Init+0x40>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <MX_TIM11_Init+0x40>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80044d4:	4804      	ldr	r0, [pc, #16]	; (80044e8 <MX_TIM11_Init+0x40>)
 80044d6:	f004 fd5b 	bl	8008f90 <HAL_TIM_Base_Init>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80044e0:	f000 fa8e 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80044e4:	bf00      	nop
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	2000042c 	.word	0x2000042c
 80044ec:	40014800 	.word	0x40014800

080044f0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80044f4:	4b11      	ldr	r3, [pc, #68]	; (800453c <MX_UART4_Init+0x4c>)
 80044f6:	4a12      	ldr	r2, [pc, #72]	; (8004540 <MX_UART4_Init+0x50>)
 80044f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <MX_UART4_Init+0x4c>)
 80044fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004500:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004502:	4b0e      	ldr	r3, [pc, #56]	; (800453c <MX_UART4_Init+0x4c>)
 8004504:	2200      	movs	r2, #0
 8004506:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <MX_UART4_Init+0x4c>)
 800450a:	2200      	movs	r2, #0
 800450c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <MX_UART4_Init+0x4c>)
 8004510:	2200      	movs	r2, #0
 8004512:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004514:	4b09      	ldr	r3, [pc, #36]	; (800453c <MX_UART4_Init+0x4c>)
 8004516:	220c      	movs	r2, #12
 8004518:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800451a:	4b08      	ldr	r3, [pc, #32]	; (800453c <MX_UART4_Init+0x4c>)
 800451c:	2200      	movs	r2, #0
 800451e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <MX_UART4_Init+0x4c>)
 8004522:	2200      	movs	r2, #0
 8004524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004526:	4805      	ldr	r0, [pc, #20]	; (800453c <MX_UART4_Init+0x4c>)
 8004528:	f005 f882 	bl	8009630 <HAL_UART_Init>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004532:	f000 fa65 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000474 	.word	0x20000474
 8004540:	40004c00 	.word	0x40004c00

08004544 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <MX_USART2_UART_Init+0x4c>)
 800454a:	4a12      	ldr	r2, [pc, #72]	; (8004594 <MX_USART2_UART_Init+0x50>)
 800454c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <MX_USART2_UART_Init+0x4c>)
 8004550:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004556:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <MX_USART2_UART_Init+0x4c>)
 8004558:	2200      	movs	r2, #0
 800455a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <MX_USART2_UART_Init+0x4c>)
 800455e:	2200      	movs	r2, #0
 8004560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <MX_USART2_UART_Init+0x4c>)
 8004564:	2200      	movs	r2, #0
 8004566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004568:	4b09      	ldr	r3, [pc, #36]	; (8004590 <MX_USART2_UART_Init+0x4c>)
 800456a:	220c      	movs	r2, #12
 800456c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <MX_USART2_UART_Init+0x4c>)
 8004570:	2200      	movs	r2, #0
 8004572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004574:	4b06      	ldr	r3, [pc, #24]	; (8004590 <MX_USART2_UART_Init+0x4c>)
 8004576:	2200      	movs	r2, #0
 8004578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800457a:	4805      	ldr	r0, [pc, #20]	; (8004590 <MX_USART2_UART_Init+0x4c>)
 800457c:	f005 f858 	bl	8009630 <HAL_UART_Init>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004586:	f000 fa3b 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	200004b8 	.word	0x200004b8
 8004594:	40004400 	.word	0x40004400

08004598 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800459c:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <MX_USART3_UART_Init+0x4c>)
 800459e:	4a12      	ldr	r2, [pc, #72]	; (80045e8 <MX_USART3_UART_Init+0x50>)
 80045a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <MX_USART3_UART_Init+0x4c>)
 80045a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80045a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80045aa:	4b0e      	ldr	r3, [pc, #56]	; (80045e4 <MX_USART3_UART_Init+0x4c>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <MX_USART3_UART_Init+0x4c>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <MX_USART3_UART_Init+0x4c>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80045bc:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <MX_USART3_UART_Init+0x4c>)
 80045be:	220c      	movs	r2, #12
 80045c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <MX_USART3_UART_Init+0x4c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <MX_USART3_UART_Init+0x4c>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80045ce:	4805      	ldr	r0, [pc, #20]	; (80045e4 <MX_USART3_UART_Init+0x4c>)
 80045d0:	f005 f82e 	bl	8009630 <HAL_UART_Init>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80045da:	f000 fa11 	bl	8004a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	200004fc 	.word	0x200004fc
 80045e8:	40004800 	.word	0x40004800

080045ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	; 0x28
 80045f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f2:	f107 0314 	add.w	r3, r7, #20
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	605a      	str	r2, [r3, #4]
 80045fc:	609a      	str	r2, [r3, #8]
 80045fe:	60da      	str	r2, [r3, #12]
 8004600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	4b4f      	ldr	r3, [pc, #316]	; (8004744 <MX_GPIO_Init+0x158>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	4a4e      	ldr	r2, [pc, #312]	; (8004744 <MX_GPIO_Init+0x158>)
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	6313      	str	r3, [r2, #48]	; 0x30
 8004612:	4b4c      	ldr	r3, [pc, #304]	; (8004744 <MX_GPIO_Init+0x158>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	4b48      	ldr	r3, [pc, #288]	; (8004744 <MX_GPIO_Init+0x158>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	4a47      	ldr	r2, [pc, #284]	; (8004744 <MX_GPIO_Init+0x158>)
 8004628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462c:	6313      	str	r3, [r2, #48]	; 0x30
 800462e:	4b45      	ldr	r3, [pc, #276]	; (8004744 <MX_GPIO_Init+0x158>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	4b41      	ldr	r3, [pc, #260]	; (8004744 <MX_GPIO_Init+0x158>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	4a40      	ldr	r2, [pc, #256]	; (8004744 <MX_GPIO_Init+0x158>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6313      	str	r3, [r2, #48]	; 0x30
 800464a:	4b3e      	ldr	r3, [pc, #248]	; (8004744 <MX_GPIO_Init+0x158>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	60bb      	str	r3, [r7, #8]
 8004654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	607b      	str	r3, [r7, #4]
 800465a:	4b3a      	ldr	r3, [pc, #232]	; (8004744 <MX_GPIO_Init+0x158>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	4a39      	ldr	r2, [pc, #228]	; (8004744 <MX_GPIO_Init+0x158>)
 8004660:	f043 0302 	orr.w	r3, r3, #2
 8004664:	6313      	str	r3, [r2, #48]	; 0x30
 8004666:	4b37      	ldr	r3, [pc, #220]	; (8004744 <MX_GPIO_Init+0x158>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|CS_Pin|BUZZER_Pin|GATE_D_Pin
 8004672:	2200      	movs	r2, #0
 8004674:	f644 4112 	movw	r1, #19474	; 0x4c12
 8004678:	4833      	ldr	r0, [pc, #204]	; (8004748 <MX_GPIO_Init+0x15c>)
 800467a:	f001 fc91 	bl	8005fa0 <HAL_GPIO_WritePin>
                          |GATE_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|LED2_Pin|LED1_Pin
 800467e:	2200      	movs	r2, #0
 8004680:	f246 011b 	movw	r1, #24603	; 0x601b
 8004684:	4831      	ldr	r0, [pc, #196]	; (800474c <MX_GPIO_Init+0x160>)
 8004686:	f001 fc8b 	bl	8005fa0 <HAL_GPIO_WritePin>
                          |GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FN_GPIO_Port, FN_Pin, GPIO_PIN_SET);
 800468a:	2201      	movs	r2, #1
 800468c:	2104      	movs	r1, #4
 800468e:	482f      	ldr	r0, [pc, #188]	; (800474c <MX_GPIO_Init+0x160>)
 8004690:	f001 fc86 	bl	8005fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800469a:	2300      	movs	r3, #0
 800469c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046a2:	f107 0314 	add.w	r3, r7, #20
 80046a6:	4619      	mov	r1, r3
 80046a8:	4827      	ldr	r0, [pc, #156]	; (8004748 <MX_GPIO_Init+0x15c>)
 80046aa:	f001 facd 	bl	8005c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 CS_Pin BUZZER_Pin GATE_D_Pin
                           GATE_C_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|CS_Pin|BUZZER_Pin|GATE_D_Pin
 80046ae:	f644 4312 	movw	r3, #19474	; 0x4c12
 80046b2:	617b      	str	r3, [r7, #20]
                          |GATE_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046b4:	2301      	movs	r3, #1
 80046b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046bc:	2300      	movs	r3, #0
 80046be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046c0:	f107 0314 	add.w	r3, r7, #20
 80046c4:	4619      	mov	r1, r3
 80046c6:	4820      	ldr	r0, [pc, #128]	; (8004748 <MX_GPIO_Init+0x15c>)
 80046c8:	f001 fabe 	bl	8005c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 80046cc:	f246 031f 	movw	r3, #24607	; 0x601f
 80046d0:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046d2:	2301      	movs	r3, #1
 80046d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046da:	2300      	movs	r3, #0
 80046dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046de:	f107 0314 	add.w	r3, r7, #20
 80046e2:	4619      	mov	r1, r3
 80046e4:	4819      	ldr	r0, [pc, #100]	; (800474c <MX_GPIO_Init+0x160>)
 80046e6:	f001 faaf 	bl	8005c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 80046ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046f4:	2301      	movs	r3, #1
 80046f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 80046f8:	f107 0314 	add.w	r3, r7, #20
 80046fc:	4619      	mov	r1, r3
 80046fe:	4813      	ldr	r0, [pc, #76]	; (800474c <MX_GPIO_Init+0x160>)
 8004700:	f001 faa2 	bl	8005c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8004704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800470e:	2301      	movs	r3, #1
 8004710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004712:	f107 0314 	add.w	r3, r7, #20
 8004716:	4619      	mov	r1, r3
 8004718:	480b      	ldr	r0, [pc, #44]	; (8004748 <MX_GPIO_Init+0x15c>)
 800471a:	f001 fa95 	bl	8005c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 800471e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004724:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800472e:	f107 0314 	add.w	r3, r7, #20
 8004732:	4619      	mov	r1, r3
 8004734:	4805      	ldr	r0, [pc, #20]	; (800474c <MX_GPIO_Init+0x160>)
 8004736:	f001 fa87 	bl	8005c48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800473a:	bf00      	nop
 800473c:	3728      	adds	r7, #40	; 0x28
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	40020800 	.word	0x40020800
 800474c:	40020400 	.word	0x40020400

08004750 <E220_CONFIG>:
		}


}
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	4604      	mov	r4, r0
 8004758:	4608      	mov	r0, r1
 800475a:	4611      	mov	r1, r2
 800475c:	461a      	mov	r2, r3
 800475e:	4623      	mov	r3, r4
 8004760:	71fb      	strb	r3, [r7, #7]
 8004762:	4603      	mov	r3, r0
 8004764:	71bb      	strb	r3, [r7, #6]
 8004766:	460b      	mov	r3, r1
 8004768:	717b      	strb	r3, [r7, #5]
 800476a:	4613      	mov	r3, r2
 800476c:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 800476e:	2201      	movs	r2, #1
 8004770:	2104      	movs	r1, #4
 8004772:	4824      	ldr	r0, [pc, #144]	; (8004804 <E220_CONFIG+0xb4>)
 8004774:	f001 fc14 	bl	8005fa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8004778:	2201      	movs	r2, #1
 800477a:	2102      	movs	r1, #2
 800477c:	4821      	ldr	r0, [pc, #132]	; (8004804 <E220_CONFIG+0xb4>)
 800477e:	f001 fc0f 	bl	8005fa0 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8004782:	2032      	movs	r0, #50	; 0x32
 8004784:	f000 fe26 	bl	80053d4 <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 8004790:	793b      	ldrb	r3, [r7, #4]
 8004792:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 8004798:	79bb      	ldrb	r3, [r7, #6]
 800479a:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;
 800479c:	2362      	movs	r3, #98	; 0x62
 800479e:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 80047a0:	2300      	movs	r3, #0
 80047a2:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 80047a4:	797b      	ldrb	r3, [r7, #5]
 80047a6:	743b      	strb	r3, [r7, #16]

    switch(mode){
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <E220_CONFIG+0x64>
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d003      	beq.n	80047ba <E220_CONFIG+0x6a>
 80047b2:	e005      	b.n	80047c0 <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 80047b4:	2300      	movs	r3, #0
 80047b6:	747b      	strb	r3, [r7, #17]
            break;
 80047b8:	e004      	b.n	80047c4 <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 80047ba:	2311      	movs	r3, #17
 80047bc:	747b      	strb	r3, [r7, #17]
            break;
 80047be:	e001      	b.n	80047c4 <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 80047c0:	2311      	movs	r3, #17
 80047c2:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 80047c4:	2300      	movs	r3, #0
 80047c6:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 80047c8:	2300      	movs	r3, #0
 80047ca:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 80047cc:	f107 010c 	add.w	r1, r7, #12
 80047d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047d4:	2208      	movs	r2, #8
 80047d6:	480c      	ldr	r0, [pc, #48]	; (8004808 <E220_CONFIG+0xb8>)
 80047d8:	f004 ff77 	bl	80096ca <HAL_UART_Transmit>

    HAL_Delay(25);
 80047dc:	2019      	movs	r0, #25
 80047de:	f000 fdf9 	bl	80053d4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80047e2:	2200      	movs	r2, #0
 80047e4:	2104      	movs	r1, #4
 80047e6:	4807      	ldr	r0, [pc, #28]	; (8004804 <E220_CONFIG+0xb4>)
 80047e8:	f001 fbda 	bl	8005fa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80047ec:	2200      	movs	r2, #0
 80047ee:	2102      	movs	r1, #2
 80047f0:	4804      	ldr	r0, [pc, #16]	; (8004804 <E220_CONFIG+0xb4>)
 80047f2:	f001 fbd5 	bl	8005fa0 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 80047f6:	2019      	movs	r0, #25
 80047f8:	f000 fdec 	bl	80053d4 <HAL_Delay>
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	bd90      	pop	{r4, r7, pc}
 8004804:	40020400 	.word	0x40020400
 8004808:	200004fc 	.word	0x200004fc
 800480c:	00000000 	.word	0x00000000

08004810 <BME280_Get_Altitude>:

float BME280_Get_Altitude(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
	float press = comp_data.pressure / 10000.0;
 8004816:	4b36      	ldr	r3, [pc, #216]	; (80048f0 <BME280_Get_Altitude+0xe0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fb fe8a 	bl	8000534 <__aeabi_ui2d>
 8004820:	a32b      	add	r3, pc, #172	; (adr r3, 80048d0 <BME280_Get_Altitude+0xc0>)
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	f7fc f829 	bl	800087c <__aeabi_ddiv>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4610      	mov	r0, r2
 8004830:	4619      	mov	r1, r3
 8004832:	f7fc f9f1 	bl	8000c18 <__aeabi_d2f>
 8004836:	4603      	mov	r3, r0
 8004838:	607b      	str	r3, [r7, #4]
	float temp = comp_data.temperature / 100.0;
 800483a:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <BME280_Get_Altitude+0xe0>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fb fe88 	bl	8000554 <__aeabi_i2d>
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	4b2a      	ldr	r3, [pc, #168]	; (80048f4 <BME280_Get_Altitude+0xe4>)
 800484a:	f7fc f817 	bl	800087c <__aeabi_ddiv>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	f7fc f9df 	bl	8000c18 <__aeabi_d2f>
 800485a:	4603      	mov	r3, r0
 800485c:	603b      	str	r3, [r7, #0]
	alt = 44330 * (1 - pow((press / 1013.25),(1/5.255)));
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fb fe8a 	bl	8000578 <__aeabi_f2d>
 8004864:	a31c      	add	r3, pc, #112	; (adr r3, 80048d8 <BME280_Get_Altitude+0xc8>)
 8004866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486a:	f7fc f807 	bl	800087c <__aeabi_ddiv>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	ec43 2b17 	vmov	d7, r2, r3
 8004876:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80048e0 <BME280_Get_Altitude+0xd0>
 800487a:	eeb0 0a47 	vmov.f32	s0, s14
 800487e:	eef0 0a67 	vmov.f32	s1, s15
 8004882:	f008 fe41 	bl	800d508 <pow>
 8004886:	ec53 2b10 	vmov	r2, r3, d0
 800488a:	f04f 0000 	mov.w	r0, #0
 800488e:	491a      	ldr	r1, [pc, #104]	; (80048f8 <BME280_Get_Altitude+0xe8>)
 8004890:	f7fb fd12 	bl	80002b8 <__aeabi_dsub>
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4610      	mov	r0, r2
 800489a:	4619      	mov	r1, r3
 800489c:	a312      	add	r3, pc, #72	; (adr r3, 80048e8 <BME280_Get_Altitude+0xd8>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f7fb fec1 	bl	8000628 <__aeabi_dmul>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4610      	mov	r0, r2
 80048ac:	4619      	mov	r1, r3
 80048ae:	f7fc f9b3 	bl	8000c18 <__aeabi_d2f>
 80048b2:	4603      	mov	r3, r0
 80048b4:	4a11      	ldr	r2, [pc, #68]	; (80048fc <BME280_Get_Altitude+0xec>)
 80048b6:	6013      	str	r3, [r2, #0]
	//alt = ((pow((P0/press), (1/5.257))-1) * (temp + 273.15)) / 0.0065;

	return (alt);
 80048b8:	4b10      	ldr	r3, [pc, #64]	; (80048fc <BME280_Get_Altitude+0xec>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	ee07 3a90 	vmov	s15, r3
}
 80048c0:	eeb0 0a67 	vmov.f32	s0, s15
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	f3af 8000 	nop.w
 80048d0:	00000000 	.word	0x00000000
 80048d4:	40c38800 	.word	0x40c38800
 80048d8:	00000000 	.word	0x00000000
 80048dc:	408faa00 	.word	0x408faa00
 80048e0:	ccd9456c 	.word	0xccd9456c
 80048e4:	3fc85b95 	.word	0x3fc85b95
 80048e8:	00000000 	.word	0x00000000
 80048ec:	40e5a540 	.word	0x40e5a540
 80048f0:	2000089c 	.word	0x2000089c
 80048f4:	40590000 	.word	0x40590000
 80048f8:	3ff00000 	.word	0x3ff00000
 80048fc:	20000658 	.word	0x20000658

08004900 <user_i2c_read>:
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af02      	add	r7, sp, #8
 8004906:	603a      	str	r2, [r7, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	4603      	mov	r3, r0
 800490c:	71fb      	strb	r3, [r7, #7]
 800490e:	460b      	mov	r3, r1
 8004910:	71bb      	strb	r3, [r7, #6]
 8004912:	4613      	mov	r3, r2
 8004914:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	b29b      	uxth	r3, r3
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	b299      	uxth	r1, r3
 800491e:	1dba      	adds	r2, r7, #6
 8004920:	230a      	movs	r3, #10
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	2301      	movs	r3, #1
 8004926:	4811      	ldr	r0, [pc, #68]	; (800496c <user_i2c_read+0x6c>)
 8004928:	f001 fcb2 	bl	8006290 <HAL_I2C_Master_Transmit>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <user_i2c_read+0x38>
 8004932:	f04f 33ff 	mov.w	r3, #4294967295
 8004936:	e014      	b.n	8004962 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	b21b      	sxth	r3, r3
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	b21b      	sxth	r3, r3
 8004944:	b299      	uxth	r1, r3
 8004946:	88bb      	ldrh	r3, [r7, #4]
 8004948:	220a      	movs	r2, #10
 800494a:	9200      	str	r2, [sp, #0]
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	4807      	ldr	r0, [pc, #28]	; (800496c <user_i2c_read+0x6c>)
 8004950:	f001 fd9c 	bl	800648c <HAL_I2C_Master_Receive>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <user_i2c_read+0x60>
 800495a:	f04f 33ff 	mov.w	r3, #4294967295
 800495e:	e000      	b.n	8004962 <user_i2c_read+0x62>

  return 0;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	200002a8 	.word	0x200002a8

08004970 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fd2b 	bl	80053d4 <HAL_Delay>
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <user_i2c_write>:
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af02      	add	r7, sp, #8
 800498e:	603a      	str	r2, [r7, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	4603      	mov	r3, r0
 8004994:	71fb      	strb	r3, [r7, #7]
 8004996:	460b      	mov	r3, r1
 8004998:	71bb      	strb	r3, [r7, #6]
 800499a:	4613      	mov	r3, r2
 800499c:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 800499e:	88bb      	ldrh	r3, [r7, #4]
 80049a0:	3301      	adds	r3, #1
 80049a2:	4618      	mov	r0, r3
 80049a4:	f005 ff82 	bl	800a8ac <malloc>
 80049a8:	4603      	mov	r3, r0
 80049aa:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 80049ac:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3301      	adds	r3, #1
 80049b8:	88ba      	ldrh	r2, [r7, #4]
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f006 ffee 	bl	800b99e <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	b299      	uxth	r1, r3
 80049ca:	88bb      	ldrh	r3, [r7, #4]
 80049cc:	3301      	adds	r3, #1
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	f04f 32ff 	mov.w	r2, #4294967295
 80049d4:	9200      	str	r2, [sp, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4808      	ldr	r0, [pc, #32]	; (80049fc <user_i2c_write+0x74>)
 80049da:	f001 fc59 	bl	8006290 <HAL_I2C_Master_Transmit>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <user_i2c_write+0x62>
 80049e4:	f04f 33ff 	mov.w	r3, #4294967295
 80049e8:	e003      	b.n	80049f2 <user_i2c_write+0x6a>

  free(buf);
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f005 ff66 	bl	800a8bc <free>
  return 0;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	200002a8 	.word	0x200002a8

08004a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a04:	b672      	cpsid	i
}
 8004a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a08:	e7fe      	b.n	8004a08 <Error_Handler+0x8>
	...

08004a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a12:	2300      	movs	r3, #0
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <HAL_MspInit+0x4c>)
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	4a0f      	ldr	r2, [pc, #60]	; (8004a58 <HAL_MspInit+0x4c>)
 8004a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a20:	6453      	str	r3, [r2, #68]	; 0x44
 8004a22:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <HAL_MspInit+0x4c>)
 8004a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a2a:	607b      	str	r3, [r7, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <HAL_MspInit+0x4c>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	4a08      	ldr	r2, [pc, #32]	; (8004a58 <HAL_MspInit+0x4c>)
 8004a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3e:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <HAL_MspInit+0x4c>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40023800 	.word	0x40023800

08004a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08a      	sub	sp, #40	; 0x28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a64:	f107 0314 	add.w	r3, r7, #20
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	60da      	str	r2, [r3, #12]
 8004a72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <HAL_ADC_MspInit+0x7c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d127      	bne.n	8004ace <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004a7e:	2300      	movs	r3, #0
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	4b16      	ldr	r3, [pc, #88]	; (8004adc <HAL_ADC_MspInit+0x80>)
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	4a15      	ldr	r2, [pc, #84]	; (8004adc <HAL_ADC_MspInit+0x80>)
 8004a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <HAL_ADC_MspInit+0x80>)
 8004a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <HAL_ADC_MspInit+0x80>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	4a0e      	ldr	r2, [pc, #56]	; (8004adc <HAL_ADC_MspInit+0x80>)
 8004aa4:	f043 0304 	orr.w	r3, r3, #4
 8004aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <HAL_ADC_MspInit+0x80>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 8004ab6:	2304      	movs	r3, #4
 8004ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004aba:	2303      	movs	r3, #3
 8004abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 8004ac2:	f107 0314 	add.w	r3, r7, #20
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4805      	ldr	r0, [pc, #20]	; (8004ae0 <HAL_ADC_MspInit+0x84>)
 8004aca:	f001 f8bd 	bl	8005c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004ace:	bf00      	nop
 8004ad0:	3728      	adds	r7, #40	; 0x28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40012000 	.word	0x40012000
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	40020800 	.word	0x40020800

08004ae4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08a      	sub	sp, #40	; 0x28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aec:	f107 0314 	add.w	r3, r7, #20
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	609a      	str	r2, [r3, #8]
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a19      	ldr	r2, [pc, #100]	; (8004b68 <HAL_I2C_MspInit+0x84>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d12b      	bne.n	8004b5e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	4b18      	ldr	r3, [pc, #96]	; (8004b6c <HAL_I2C_MspInit+0x88>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <HAL_I2C_MspInit+0x88>)
 8004b10:	f043 0302 	orr.w	r3, r3, #2
 8004b14:	6313      	str	r3, [r2, #48]	; 0x30
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <HAL_I2C_MspInit+0x88>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b22:	23c0      	movs	r3, #192	; 0xc0
 8004b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b26:	2312      	movs	r3, #18
 8004b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b32:	2304      	movs	r3, #4
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b36:	f107 0314 	add.w	r3, r7, #20
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	480c      	ldr	r0, [pc, #48]	; (8004b70 <HAL_I2C_MspInit+0x8c>)
 8004b3e:	f001 f883 	bl	8005c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_I2C_MspInit+0x88>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	4a08      	ldr	r2, [pc, #32]	; (8004b6c <HAL_I2C_MspInit+0x88>)
 8004b4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b50:	6413      	str	r3, [r2, #64]	; 0x40
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_I2C_MspInit+0x88>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b5e:	bf00      	nop
 8004b60:	3728      	adds	r7, #40	; 0x28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40005400 	.word	0x40005400
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40020400 	.word	0x40020400

08004b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	; 0x28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b7c:	f107 0314 	add.w	r3, r7, #20
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	609a      	str	r2, [r3, #8]
 8004b88:	60da      	str	r2, [r3, #12]
 8004b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <HAL_SPI_MspInit+0x84>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d12b      	bne.n	8004bee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	4b18      	ldr	r3, [pc, #96]	; (8004bfc <HAL_SPI_MspInit+0x88>)
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_SPI_MspInit+0x88>)
 8004ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_SPI_MspInit+0x88>)
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <HAL_SPI_MspInit+0x88>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	4a10      	ldr	r2, [pc, #64]	; (8004bfc <HAL_SPI_MspInit+0x88>)
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bc2:	4b0e      	ldr	r3, [pc, #56]	; (8004bfc <HAL_SPI_MspInit+0x88>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004bce:	23e0      	movs	r3, #224	; 0xe0
 8004bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004bde:	2305      	movs	r3, #5
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be2:	f107 0314 	add.w	r3, r7, #20
 8004be6:	4619      	mov	r1, r3
 8004be8:	4805      	ldr	r0, [pc, #20]	; (8004c00 <HAL_SPI_MspInit+0x8c>)
 8004bea:	f001 f82d 	bl	8005c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004bee:	bf00      	nop
 8004bf0:	3728      	adds	r7, #40	; 0x28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40013000 	.word	0x40013000
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	40020000 	.word	0x40020000

08004c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a38      	ldr	r2, [pc, #224]	; (8004cf4 <HAL_TIM_Base_MspInit+0xf0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d116      	bne.n	8004c44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	4b37      	ldr	r3, [pc, #220]	; (8004cf8 <HAL_TIM_Base_MspInit+0xf4>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	4a36      	ldr	r2, [pc, #216]	; (8004cf8 <HAL_TIM_Base_MspInit+0xf4>)
 8004c20:	f043 0310 	orr.w	r3, r3, #16
 8004c24:	6413      	str	r3, [r2, #64]	; 0x40
 8004c26:	4b34      	ldr	r3, [pc, #208]	; (8004cf8 <HAL_TIM_Base_MspInit+0xf4>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004c32:	2200      	movs	r2, #0
 8004c34:	2100      	movs	r1, #0
 8004c36:	2036      	movs	r0, #54	; 0x36
 8004c38:	f000 ff3d 	bl	8005ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004c3c:	2036      	movs	r0, #54	; 0x36
 8004c3e:	f000 ff56 	bl	8005aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004c42:	e052      	b.n	8004cea <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM7)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a2c      	ldr	r2, [pc, #176]	; (8004cfc <HAL_TIM_Base_MspInit+0xf8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d116      	bne.n	8004c7c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	4b29      	ldr	r3, [pc, #164]	; (8004cf8 <HAL_TIM_Base_MspInit+0xf4>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	4a28      	ldr	r2, [pc, #160]	; (8004cf8 <HAL_TIM_Base_MspInit+0xf4>)
 8004c58:	f043 0320 	orr.w	r3, r3, #32
 8004c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c5e:	4b26      	ldr	r3, [pc, #152]	; (8004cf8 <HAL_TIM_Base_MspInit+0xf4>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	2037      	movs	r0, #55	; 0x37
 8004c70:	f000 ff21 	bl	8005ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004c74:	2037      	movs	r0, #55	; 0x37
 8004c76:	f000 ff3a 	bl	8005aee <HAL_NVIC_EnableIRQ>
}
 8004c7a:	e036      	b.n	8004cea <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a1f      	ldr	r2, [pc, #124]	; (8004d00 <HAL_TIM_Base_MspInit+0xfc>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d116      	bne.n	8004cb4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_TIM_Base_MspInit+0xf4>)
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	4a1a      	ldr	r2, [pc, #104]	; (8004cf8 <HAL_TIM_Base_MspInit+0xf4>)
 8004c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c94:	6453      	str	r3, [r2, #68]	; 0x44
 8004c96:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <HAL_TIM_Base_MspInit+0xf4>)
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	2019      	movs	r0, #25
 8004ca8:	f000 ff05 	bl	8005ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004cac:	2019      	movs	r0, #25
 8004cae:	f000 ff1e 	bl	8005aee <HAL_NVIC_EnableIRQ>
}
 8004cb2:	e01a      	b.n	8004cea <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a12      	ldr	r2, [pc, #72]	; (8004d04 <HAL_TIM_Base_MspInit+0x100>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d115      	bne.n	8004cea <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <HAL_TIM_Base_MspInit+0xf4>)
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	4a0c      	ldr	r2, [pc, #48]	; (8004cf8 <HAL_TIM_Base_MspInit+0xf4>)
 8004cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8004cce:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <HAL_TIM_Base_MspInit+0xf4>)
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2100      	movs	r1, #0
 8004cde:	201a      	movs	r0, #26
 8004ce0:	f000 fee9 	bl	8005ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004ce4:	201a      	movs	r0, #26
 8004ce6:	f000 ff02 	bl	8005aee <HAL_NVIC_EnableIRQ>
}
 8004cea:	bf00      	nop
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40001000 	.word	0x40001000
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	40001400 	.word	0x40001400
 8004d00:	40014400 	.word	0x40014400
 8004d04:	40014800 	.word	0x40014800

08004d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08e      	sub	sp, #56	; 0x38
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a5e      	ldr	r2, [pc, #376]	; (8004ea0 <HAL_UART_MspInit+0x198>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d12c      	bne.n	8004d84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	623b      	str	r3, [r7, #32]
 8004d2e:	4b5d      	ldr	r3, [pc, #372]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	4a5c      	ldr	r2, [pc, #368]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d38:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3a:	4b5a      	ldr	r3, [pc, #360]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d42:	623b      	str	r3, [r7, #32]
 8004d44:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	4b56      	ldr	r3, [pc, #344]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	4a55      	ldr	r2, [pc, #340]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	6313      	str	r3, [r2, #48]	; 0x30
 8004d56:	4b53      	ldr	r3, [pc, #332]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d62:	2303      	movs	r3, #3
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d66:	2302      	movs	r3, #2
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004d72:	2308      	movs	r3, #8
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	484a      	ldr	r0, [pc, #296]	; (8004ea8 <HAL_UART_MspInit+0x1a0>)
 8004d7e:	f000 ff63 	bl	8005c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004d82:	e089      	b.n	8004e98 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a48      	ldr	r2, [pc, #288]	; (8004eac <HAL_UART_MspInit+0x1a4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d134      	bne.n	8004df8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	4b44      	ldr	r3, [pc, #272]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	4a43      	ldr	r2, [pc, #268]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9e:	4b41      	ldr	r3, [pc, #260]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	4b3d      	ldr	r3, [pc, #244]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	4a3c      	ldr	r2, [pc, #240]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dba:	4b3a      	ldr	r3, [pc, #232]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 8004dc6:	230c      	movs	r3, #12
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dca:	2302      	movs	r3, #2
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004dd6:	2307      	movs	r3, #7
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dde:	4619      	mov	r1, r3
 8004de0:	4831      	ldr	r0, [pc, #196]	; (8004ea8 <HAL_UART_MspInit+0x1a0>)
 8004de2:	f000 ff31 	bl	8005c48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004de6:	2200      	movs	r2, #0
 8004de8:	2100      	movs	r1, #0
 8004dea:	2026      	movs	r0, #38	; 0x26
 8004dec:	f000 fe63 	bl	8005ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004df0:	2026      	movs	r0, #38	; 0x26
 8004df2:	f000 fe7c 	bl	8005aee <HAL_NVIC_EnableIRQ>
}
 8004df6:	e04f      	b.n	8004e98 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a2c      	ldr	r2, [pc, #176]	; (8004eb0 <HAL_UART_MspInit+0x1a8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d14a      	bne.n	8004e98 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	4b27      	ldr	r3, [pc, #156]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	4a26      	ldr	r2, [pc, #152]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e10:	6413      	str	r3, [r2, #64]	; 0x40
 8004e12:	4b24      	ldr	r3, [pc, #144]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e1a:	613b      	str	r3, [r7, #16]
 8004e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	4a1f      	ldr	r2, [pc, #124]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004e28:	f043 0304 	orr.w	r3, r3, #4
 8004e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	4a18      	ldr	r2, [pc, #96]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004e44:	f043 0302 	orr.w	r3, r3, #2
 8004e48:	6313      	str	r3, [r2, #48]	; 0x30
 8004e4a:	4b16      	ldr	r3, [pc, #88]	; (8004ea4 <HAL_UART_MspInit+0x19c>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 8004e56:	2320      	movs	r3, #32
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e62:	2303      	movs	r3, #3
 8004e64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004e66:	2307      	movs	r3, #7
 8004e68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8004e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4810      	ldr	r0, [pc, #64]	; (8004eb4 <HAL_UART_MspInit+0x1ac>)
 8004e72:	f000 fee9 	bl	8005c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 8004e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e84:	2303      	movs	r3, #3
 8004e86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004e88:	2307      	movs	r3, #7
 8004e8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8004e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e90:	4619      	mov	r1, r3
 8004e92:	4809      	ldr	r0, [pc, #36]	; (8004eb8 <HAL_UART_MspInit+0x1b0>)
 8004e94:	f000 fed8 	bl	8005c48 <HAL_GPIO_Init>
}
 8004e98:	bf00      	nop
 8004e9a:	3738      	adds	r7, #56	; 0x38
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40004c00 	.word	0x40004c00
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	40020000 	.word	0x40020000
 8004eac:	40004400 	.word	0x40004400
 8004eb0:	40004800 	.word	0x40004800
 8004eb4:	40020800 	.word	0x40020800
 8004eb8:	40020400 	.word	0x40020400

08004ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ec0:	e7fe      	b.n	8004ec0 <NMI_Handler+0x4>

08004ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ec6:	e7fe      	b.n	8004ec6 <HardFault_Handler+0x4>

08004ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ecc:	e7fe      	b.n	8004ecc <MemManage_Handler+0x4>

08004ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ed2:	e7fe      	b.n	8004ed2 <BusFault_Handler+0x4>

08004ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ed8:	e7fe      	b.n	8004ed8 <UsageFault_Handler+0x4>

08004eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004eda:	b480      	push	{r7}
 8004edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ede:	bf00      	nop
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004eec:	bf00      	nop
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004efa:	bf00      	nop
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f08:	f000 fa44 	bl	8005394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f0c:	bf00      	nop
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004f14:	4802      	ldr	r0, [pc, #8]	; (8004f20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004f16:	f004 f92a 	bl	800916e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004f1a:	bf00      	nop
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200003e4 	.word	0x200003e4

08004f24 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004f28:	4802      	ldr	r0, [pc, #8]	; (8004f34 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004f2a:	f004 f920 	bl	800916e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	2000042c 	.word	0x2000042c

08004f38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f3c:	4802      	ldr	r0, [pc, #8]	; (8004f48 <USART2_IRQHandler+0x10>)
 8004f3e:	f004 fc87 	bl	8009850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f42:	bf00      	nop
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	200004b8 	.word	0x200004b8

08004f4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004f50:	4802      	ldr	r0, [pc, #8]	; (8004f5c <TIM6_DAC_IRQHandler+0x10>)
 8004f52:	f004 f90c 	bl	800916e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004f56:	bf00      	nop
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20000354 	.word	0x20000354

08004f60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004f64:	4802      	ldr	r0, [pc, #8]	; (8004f70 <TIM7_IRQHandler+0x10>)
 8004f66:	f004 f902 	bl	800916e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004f6a:	bf00      	nop
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	2000039c 	.word	0x2000039c

08004f74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  return 1;
 8004f78:	2301      	movs	r3, #1
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <_kill>:

int _kill(int pid, int sig)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f8e:	f006 fcd9 	bl	800b944 <__errno>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2216      	movs	r2, #22
 8004f96:	601a      	str	r2, [r3, #0]
  return -1;
 8004f98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <_exit>:

void _exit (int status)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004fac:	f04f 31ff 	mov.w	r1, #4294967295
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff ffe7 	bl	8004f84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004fb6:	e7fe      	b.n	8004fb6 <_exit+0x12>

08004fb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	e00a      	b.n	8004fe0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004fca:	f3af 8000 	nop.w
 8004fce:	4601      	mov	r1, r0
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	60ba      	str	r2, [r7, #8]
 8004fd6:	b2ca      	uxtb	r2, r1
 8004fd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	dbf0      	blt.n	8004fca <_read+0x12>
  }

  return len;
 8004fe8:	687b      	ldr	r3, [r7, #4]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b086      	sub	sp, #24
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e009      	b.n	8005018 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	60ba      	str	r2, [r7, #8]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	4618      	mov	r0, r3
 800500e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	3301      	adds	r3, #1
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	dbf1      	blt.n	8005004 <_write+0x12>
  }
  return len;
 8005020:	687b      	ldr	r3, [r7, #4]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <_close>:

int _close(int file)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005052:	605a      	str	r2, [r3, #4]
  return 0;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <_isatty>:

int _isatty(int file)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800506a:	2301      	movs	r3, #1
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800509c:	4a14      	ldr	r2, [pc, #80]	; (80050f0 <_sbrk+0x5c>)
 800509e:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <_sbrk+0x60>)
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050a8:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <_sbrk+0x64>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d102      	bne.n	80050b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050b0:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <_sbrk+0x64>)
 80050b2:	4a12      	ldr	r2, [pc, #72]	; (80050fc <_sbrk+0x68>)
 80050b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <_sbrk+0x64>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4413      	add	r3, r2
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d207      	bcs.n	80050d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050c4:	f006 fc3e 	bl	800b944 <__errno>
 80050c8:	4603      	mov	r3, r0
 80050ca:	220c      	movs	r2, #12
 80050cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050ce:	f04f 33ff 	mov.w	r3, #4294967295
 80050d2:	e009      	b.n	80050e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050d4:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <_sbrk+0x64>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050da:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <_sbrk+0x64>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4413      	add	r3, r2
 80050e2:	4a05      	ldr	r2, [pc, #20]	; (80050f8 <_sbrk+0x64>)
 80050e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050e6:	68fb      	ldr	r3, [r7, #12]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	20020000 	.word	0x20020000
 80050f4:	00000400 	.word	0x00000400
 80050f8:	200008ac 	.word	0x200008ac
 80050fc:	20000a18 	.word	0x20000a18

08005100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <SystemInit+0x20>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	4a05      	ldr	r2, [pc, #20]	; (8005120 <SystemInit+0x20>)
 800510c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	e000ed00 	.word	0xe000ed00

08005124 <W25Q_WriteEnable>:

#include "w25q.h"

extern SPI_HandleTypeDef hspi1;

void W25Q_WriteEnable(void) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
    uint8_t cmd = CMD_WRITE_ENABLE;
 800512a:	2306      	movs	r3, #6
 800512c:	71fb      	strb	r3, [r7, #7]
    W25Q_CHIP_SELECT_LOW();
 800512e:	2200      	movs	r2, #0
 8005130:	2102      	movs	r1, #2
 8005132:	4809      	ldr	r0, [pc, #36]	; (8005158 <W25Q_WriteEnable+0x34>)
 8005134:	f000 ff34 	bl	8005fa0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8005138:	1df9      	adds	r1, r7, #7
 800513a:	f04f 33ff 	mov.w	r3, #4294967295
 800513e:	2201      	movs	r2, #1
 8005140:	4806      	ldr	r0, [pc, #24]	; (800515c <W25Q_WriteEnable+0x38>)
 8005142:	f003 fa06 	bl	8008552 <HAL_SPI_Transmit>
    W25Q_CHIP_SELECT_HIGH();
 8005146:	2201      	movs	r2, #1
 8005148:	2102      	movs	r1, #2
 800514a:	4803      	ldr	r0, [pc, #12]	; (8005158 <W25Q_WriteEnable+0x34>)
 800514c:	f000 ff28 	bl	8005fa0 <HAL_GPIO_WritePin>
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40020800 	.word	0x40020800
 800515c:	200002fc 	.word	0x200002fc

08005160 <W25Q_ReadStatusRegister>:

uint8_t W25Q_ReadStatusRegister(void) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
    uint8_t cmd = CMD_READ_STATUS_REG;
 8005166:	2305      	movs	r3, #5
 8005168:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    W25Q_CHIP_SELECT_LOW();
 800516a:	2200      	movs	r2, #0
 800516c:	2102      	movs	r1, #2
 800516e:	480d      	ldr	r0, [pc, #52]	; (80051a4 <W25Q_ReadStatusRegister+0x44>)
 8005170:	f000 ff16 	bl	8005fa0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8005174:	1df9      	adds	r1, r7, #7
 8005176:	f04f 33ff 	mov.w	r3, #4294967295
 800517a:	2201      	movs	r2, #1
 800517c:	480a      	ldr	r0, [pc, #40]	; (80051a8 <W25Q_ReadStatusRegister+0x48>)
 800517e:	f003 f9e8 	bl	8008552 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, &status, 1, HAL_MAX_DELAY);
 8005182:	1db9      	adds	r1, r7, #6
 8005184:	f04f 33ff 	mov.w	r3, #4294967295
 8005188:	2201      	movs	r2, #1
 800518a:	4807      	ldr	r0, [pc, #28]	; (80051a8 <W25Q_ReadStatusRegister+0x48>)
 800518c:	f003 fb1d 	bl	80087ca <HAL_SPI_Receive>
    W25Q_CHIP_SELECT_HIGH();
 8005190:	2201      	movs	r2, #1
 8005192:	2102      	movs	r1, #2
 8005194:	4803      	ldr	r0, [pc, #12]	; (80051a4 <W25Q_ReadStatusRegister+0x44>)
 8005196:	f000 ff03 	bl	8005fa0 <HAL_GPIO_WritePin>
    return status;
 800519a:	79bb      	ldrb	r3, [r7, #6]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40020800 	.word	0x40020800
 80051a8:	200002fc 	.word	0x200002fc

080051ac <W25Q_WaitForWriteEnd>:

void W25Q_WaitForWriteEnd(void) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
    uint8_t status;
    do {
        status = W25Q_ReadStatusRegister();
 80051b2:	f7ff ffd5 	bl	8005160 <W25Q_ReadStatusRegister>
 80051b6:	4603      	mov	r3, r0
 80051b8:	71fb      	strb	r3, [r7, #7]
    } while ((status & 0x01) == 0x01);
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f6      	bne.n	80051b2 <W25Q_WaitForWriteEnd+0x6>
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <W25Q_ReadData>:
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
    W25Q_CHIP_SELECT_HIGH();
    W25Q_WaitForWriteEnd();
}

void W25Q_ReadData(uint32_t address, uint8_t* buffer, uint16_t size) {
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4] = {CMD_READ_DATA, (address >> 16) & 0xFF, (address >> 8) & 0xFF, address & 0xFF};
 80051de:	2303      	movs	r3, #3
 80051e0:	753b      	strb	r3, [r7, #20]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	0c1b      	lsrs	r3, r3, #16
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	757b      	strb	r3, [r7, #21]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	0a1b      	lsrs	r3, r3, #8
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	75bb      	strb	r3, [r7, #22]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	75fb      	strb	r3, [r7, #23]
    W25Q_CHIP_SELECT_LOW();
 80051f8:	2200      	movs	r2, #0
 80051fa:	2102      	movs	r1, #2
 80051fc:	480d      	ldr	r0, [pc, #52]	; (8005234 <W25Q_ReadData+0x64>)
 80051fe:	f000 fecf 	bl	8005fa0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);
 8005202:	f107 0114 	add.w	r1, r7, #20
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	2204      	movs	r2, #4
 800520c:	480a      	ldr	r0, [pc, #40]	; (8005238 <W25Q_ReadData+0x68>)
 800520e:	f003 f9a0 	bl	8008552 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buffer, size, HAL_MAX_DELAY);
 8005212:	88fa      	ldrh	r2, [r7, #6]
 8005214:	f04f 33ff 	mov.w	r3, #4294967295
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	4807      	ldr	r0, [pc, #28]	; (8005238 <W25Q_ReadData+0x68>)
 800521c:	f003 fad5 	bl	80087ca <HAL_SPI_Receive>
    W25Q_CHIP_SELECT_HIGH();
 8005220:	2201      	movs	r2, #1
 8005222:	2102      	movs	r1, #2
 8005224:	4803      	ldr	r0, [pc, #12]	; (8005234 <W25Q_ReadData+0x64>)
 8005226:	f000 febb 	bl	8005fa0 <HAL_GPIO_WritePin>
}
 800522a:	bf00      	nop
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40020800 	.word	0x40020800
 8005238:	200002fc 	.word	0x200002fc

0800523c <W25Q_SectorErase>:



void W25Q_SectorErase(uint32_t address) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
    W25Q_WriteEnable();  // Yazma izni
 8005244:	f7ff ff6e 	bl	8005124 <W25Q_WriteEnable>

    uint8_t cmd[4] = {CMD_SECTOR_ERASE, (address >> 16) & 0xFF, (address >> 8) & 0xFF, address & 0xFF};
 8005248:	2320      	movs	r3, #32
 800524a:	733b      	strb	r3, [r7, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	b2db      	uxtb	r3, r3
 8005252:	737b      	strb	r3, [r7, #13]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	0a1b      	lsrs	r3, r3, #8
 8005258:	b2db      	uxtb	r3, r3
 800525a:	73bb      	strb	r3, [r7, #14]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	b2db      	uxtb	r3, r3
 8005260:	73fb      	strb	r3, [r7, #15]
    W25Q_CHIP_SELECT_LOW();
 8005262:	2200      	movs	r2, #0
 8005264:	2102      	movs	r1, #2
 8005266:	480b      	ldr	r0, [pc, #44]	; (8005294 <W25Q_SectorErase+0x58>)
 8005268:	f000 fe9a 	bl	8005fa0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);
 800526c:	f107 010c 	add.w	r1, r7, #12
 8005270:	f04f 33ff 	mov.w	r3, #4294967295
 8005274:	2204      	movs	r2, #4
 8005276:	4808      	ldr	r0, [pc, #32]	; (8005298 <W25Q_SectorErase+0x5c>)
 8005278:	f003 f96b 	bl	8008552 <HAL_SPI_Transmit>
    W25Q_CHIP_SELECT_HIGH();
 800527c:	2201      	movs	r2, #1
 800527e:	2102      	movs	r1, #2
 8005280:	4804      	ldr	r0, [pc, #16]	; (8005294 <W25Q_SectorErase+0x58>)
 8005282:	f000 fe8d 	bl	8005fa0 <HAL_GPIO_WritePin>

    W25Q_WaitForWriteEnd();  // Silme işleminin bitmesini bekle
 8005286:	f7ff ff91 	bl	80051ac <W25Q_WaitForWriteEnd>
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40020800 	.word	0x40020800
 8005298:	200002fc 	.word	0x200002fc

0800529c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800529c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052a0:	480d      	ldr	r0, [pc, #52]	; (80052d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052a2:	490e      	ldr	r1, [pc, #56]	; (80052dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80052a4:	4a0e      	ldr	r2, [pc, #56]	; (80052e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80052a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052a8:	e002      	b.n	80052b0 <LoopCopyDataInit>

080052aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052ae:	3304      	adds	r3, #4

080052b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052b4:	d3f9      	bcc.n	80052aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052b6:	4a0b      	ldr	r2, [pc, #44]	; (80052e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80052b8:	4c0b      	ldr	r4, [pc, #44]	; (80052e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80052ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052bc:	e001      	b.n	80052c2 <LoopFillZerobss>

080052be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052c0:	3204      	adds	r2, #4

080052c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052c4:	d3fb      	bcc.n	80052be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80052c6:	f7ff ff1b 	bl	8005100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052ca:	f006 fb41 	bl	800b950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052ce:	f7fe fb27 	bl	8003920 <main>
  bx  lr    
 80052d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80052d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80052d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052dc:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 80052e0:	0800eb68 	.word	0x0800eb68
  ldr r2, =_sbss
 80052e4:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 80052e8:	20000a14 	.word	0x20000a14

080052ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052ec:	e7fe      	b.n	80052ec <ADC_IRQHandler>
	...

080052f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80052f4:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <HAL_Init+0x40>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a0d      	ldr	r2, [pc, #52]	; (8005330 <HAL_Init+0x40>)
 80052fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <HAL_Init+0x40>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a0a      	ldr	r2, [pc, #40]	; (8005330 <HAL_Init+0x40>)
 8005306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800530a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800530c:	4b08      	ldr	r3, [pc, #32]	; (8005330 <HAL_Init+0x40>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a07      	ldr	r2, [pc, #28]	; (8005330 <HAL_Init+0x40>)
 8005312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005318:	2003      	movs	r0, #3
 800531a:	f000 fbc1 	bl	8005aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800531e:	200f      	movs	r0, #15
 8005320:	f000 f808 	bl	8005334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005324:	f7ff fb72 	bl	8004a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40023c00 	.word	0x40023c00

08005334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800533c:	4b12      	ldr	r3, [pc, #72]	; (8005388 <HAL_InitTick+0x54>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b12      	ldr	r3, [pc, #72]	; (800538c <HAL_InitTick+0x58>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	4619      	mov	r1, r3
 8005346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800534a:	fbb3 f3f1 	udiv	r3, r3, r1
 800534e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fbd9 	bl	8005b0a <HAL_SYSTICK_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e00e      	b.n	8005380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b0f      	cmp	r3, #15
 8005366:	d80a      	bhi.n	800537e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005368:	2200      	movs	r2, #0
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	f04f 30ff 	mov.w	r0, #4294967295
 8005370:	f000 fba1 	bl	8005ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005374:	4a06      	ldr	r2, [pc, #24]	; (8005390 <HAL_InitTick+0x5c>)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e000      	b.n	8005380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000044 	.word	0x20000044
 800538c:	2000004c 	.word	0x2000004c
 8005390:	20000048 	.word	0x20000048

08005394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005398:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <HAL_IncTick+0x20>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <HAL_IncTick+0x24>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4413      	add	r3, r2
 80053a4:	4a04      	ldr	r2, [pc, #16]	; (80053b8 <HAL_IncTick+0x24>)
 80053a6:	6013      	str	r3, [r2, #0]
}
 80053a8:	bf00      	nop
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	2000004c 	.word	0x2000004c
 80053b8:	200008b0 	.word	0x200008b0

080053bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return uwTick;
 80053c0:	4b03      	ldr	r3, [pc, #12]	; (80053d0 <HAL_GetTick+0x14>)
 80053c2:	681b      	ldr	r3, [r3, #0]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	200008b0 	.word	0x200008b0

080053d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053dc:	f7ff ffee 	bl	80053bc <HAL_GetTick>
 80053e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d005      	beq.n	80053fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <HAL_Delay+0x44>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80053fa:	bf00      	nop
 80053fc:	f7ff ffde 	bl	80053bc <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	429a      	cmp	r2, r3
 800540a:	d8f7      	bhi.n	80053fc <HAL_Delay+0x28>
  {
  }
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	2000004c 	.word	0x2000004c

0800541c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e033      	b.n	800549a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fb0e 	bl	8004a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f003 0310 	and.w	r3, r3, #16
 8005456:	2b00      	cmp	r3, #0
 8005458:	d118      	bne.n	800548c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005462:	f023 0302 	bic.w	r3, r3, #2
 8005466:	f043 0202 	orr.w	r2, r3, #2
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f94a 	bl	8005708 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f023 0303 	bic.w	r3, r3, #3
 8005482:	f043 0201 	orr.w	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
 800548a:	e001      	b.n	8005490 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005498:	7bfb      	ldrb	r3, [r7, #15]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x1c>
 80054bc:	2302      	movs	r3, #2
 80054be:	e113      	b.n	80056e8 <HAL_ADC_ConfigChannel+0x244>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b09      	cmp	r3, #9
 80054ce:	d925      	bls.n	800551c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68d9      	ldr	r1, [r3, #12]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	4613      	mov	r3, r2
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	4413      	add	r3, r2
 80054e4:	3b1e      	subs	r3, #30
 80054e6:	2207      	movs	r2, #7
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	43da      	mvns	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	400a      	ands	r2, r1
 80054f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68d9      	ldr	r1, [r3, #12]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	b29b      	uxth	r3, r3
 8005506:	4618      	mov	r0, r3
 8005508:	4603      	mov	r3, r0
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4403      	add	r3, r0
 800550e:	3b1e      	subs	r3, #30
 8005510:	409a      	lsls	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	60da      	str	r2, [r3, #12]
 800551a:	e022      	b.n	8005562 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6919      	ldr	r1, [r3, #16]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	4613      	mov	r3, r2
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	4413      	add	r3, r2
 8005530:	2207      	movs	r2, #7
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43da      	mvns	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	400a      	ands	r2, r1
 800553e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6919      	ldr	r1, [r3, #16]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	4618      	mov	r0, r3
 8005552:	4603      	mov	r3, r0
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	4403      	add	r3, r0
 8005558:	409a      	lsls	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b06      	cmp	r3, #6
 8005568:	d824      	bhi.n	80055b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	3b05      	subs	r3, #5
 800557c:	221f      	movs	r2, #31
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43da      	mvns	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	400a      	ands	r2, r1
 800558a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	4618      	mov	r0, r3
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	3b05      	subs	r3, #5
 80055a6:	fa00 f203 	lsl.w	r2, r0, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34
 80055b2:	e04c      	b.n	800564e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b0c      	cmp	r3, #12
 80055ba:	d824      	bhi.n	8005606 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	3b23      	subs	r3, #35	; 0x23
 80055ce:	221f      	movs	r2, #31
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	43da      	mvns	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	400a      	ands	r2, r1
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	4618      	mov	r0, r3
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	3b23      	subs	r3, #35	; 0x23
 80055f8:	fa00 f203 	lsl.w	r2, r0, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
 8005604:	e023      	b.n	800564e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	3b41      	subs	r3, #65	; 0x41
 8005618:	221f      	movs	r2, #31
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	43da      	mvns	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	400a      	ands	r2, r1
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	4618      	mov	r0, r3
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	3b41      	subs	r3, #65	; 0x41
 8005642:	fa00 f203 	lsl.w	r2, r0, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800564e:	4b29      	ldr	r3, [pc, #164]	; (80056f4 <HAL_ADC_ConfigChannel+0x250>)
 8005650:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a28      	ldr	r2, [pc, #160]	; (80056f8 <HAL_ADC_ConfigChannel+0x254>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d10f      	bne.n	800567c <HAL_ADC_ConfigChannel+0x1d8>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b12      	cmp	r3, #18
 8005662:	d10b      	bne.n	800567c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <HAL_ADC_ConfigChannel+0x254>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d12b      	bne.n	80056de <HAL_ADC_ConfigChannel+0x23a>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1c      	ldr	r2, [pc, #112]	; (80056fc <HAL_ADC_ConfigChannel+0x258>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <HAL_ADC_ConfigChannel+0x1f4>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b11      	cmp	r3, #17
 8005696:	d122      	bne.n	80056de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a11      	ldr	r2, [pc, #68]	; (80056fc <HAL_ADC_ConfigChannel+0x258>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d111      	bne.n	80056de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <HAL_ADC_ConfigChannel+0x25c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a11      	ldr	r2, [pc, #68]	; (8005704 <HAL_ADC_ConfigChannel+0x260>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	0c9a      	lsrs	r2, r3, #18
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056d0:	e002      	b.n	80056d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f9      	bne.n	80056d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	40012300 	.word	0x40012300
 80056f8:	40012000 	.word	0x40012000
 80056fc:	10000012 	.word	0x10000012
 8005700:	20000044 	.word	0x20000044
 8005704:	431bde83 	.word	0x431bde83

08005708 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005710:	4b79      	ldr	r3, [pc, #484]	; (80058f8 <ADC_Init+0x1f0>)
 8005712:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	431a      	orrs	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800573c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	021a      	lsls	r2, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005760:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6859      	ldr	r1, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6899      	ldr	r1, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	4a58      	ldr	r2, [pc, #352]	; (80058fc <ADC_Init+0x1f4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d022      	beq.n	80057e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6899      	ldr	r1, [r3, #8]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6899      	ldr	r1, [r3, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	e00f      	b.n	8005806 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005804:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0202 	bic.w	r2, r2, #2
 8005814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6899      	ldr	r1, [r3, #8]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	7e1b      	ldrb	r3, [r3, #24]
 8005820:	005a      	lsls	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01b      	beq.n	800586c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005842:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005852:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6859      	ldr	r1, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	3b01      	subs	r3, #1
 8005860:	035a      	lsls	r2, r3, #13
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
 800586a:	e007      	b.n	800587c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800587a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800588a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	3b01      	subs	r3, #1
 8005898:	051a      	lsls	r2, r3, #20
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6899      	ldr	r1, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058be:	025a      	lsls	r2, r3, #9
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6899      	ldr	r1, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	029a      	lsls	r2, r3, #10
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	609a      	str	r2, [r3, #8]
}
 80058ec:	bf00      	nop
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr
 80058f8:	40012300 	.word	0x40012300
 80058fc:	0f000001 	.word	0x0f000001

08005900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <__NVIC_SetPriorityGrouping+0x44>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800591c:	4013      	ands	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800592c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005932:	4a04      	ldr	r2, [pc, #16]	; (8005944 <__NVIC_SetPriorityGrouping+0x44>)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	60d3      	str	r3, [r2, #12]
}
 8005938:	bf00      	nop
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	e000ed00 	.word	0xe000ed00

08005948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800594c:	4b04      	ldr	r3, [pc, #16]	; (8005960 <__NVIC_GetPriorityGrouping+0x18>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	f003 0307 	and.w	r3, r3, #7
}
 8005956:	4618      	mov	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800596e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005972:	2b00      	cmp	r3, #0
 8005974:	db0b      	blt.n	800598e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	f003 021f 	and.w	r2, r3, #31
 800597c:	4907      	ldr	r1, [pc, #28]	; (800599c <__NVIC_EnableIRQ+0x38>)
 800597e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2001      	movs	r0, #1
 8005986:	fa00 f202 	lsl.w	r2, r0, r2
 800598a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	e000e100 	.word	0xe000e100

080059a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	db0a      	blt.n	80059ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	490c      	ldr	r1, [pc, #48]	; (80059ec <__NVIC_SetPriority+0x4c>)
 80059ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059be:	0112      	lsls	r2, r2, #4
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	440b      	add	r3, r1
 80059c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059c8:	e00a      	b.n	80059e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	4908      	ldr	r1, [pc, #32]	; (80059f0 <__NVIC_SetPriority+0x50>)
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	3b04      	subs	r3, #4
 80059d8:	0112      	lsls	r2, r2, #4
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	440b      	add	r3, r1
 80059de:	761a      	strb	r2, [r3, #24]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	e000e100 	.word	0xe000e100
 80059f0:	e000ed00 	.word	0xe000ed00

080059f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	; 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f1c3 0307 	rsb	r3, r3, #7
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	bf28      	it	cs
 8005a12:	2304      	movcs	r3, #4
 8005a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	2b06      	cmp	r3, #6
 8005a1c:	d902      	bls.n	8005a24 <NVIC_EncodePriority+0x30>
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	3b03      	subs	r3, #3
 8005a22:	e000      	b.n	8005a26 <NVIC_EncodePriority+0x32>
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a28:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43da      	mvns	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	401a      	ands	r2, r3
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	43d9      	mvns	r1, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a4c:	4313      	orrs	r3, r2
         );
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3724      	adds	r7, #36	; 0x24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a6c:	d301      	bcc.n	8005a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e00f      	b.n	8005a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a72:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <SysTick_Config+0x40>)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a7a:	210f      	movs	r1, #15
 8005a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a80:	f7ff ff8e 	bl	80059a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <SysTick_Config+0x40>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a8a:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <SysTick_Config+0x40>)
 8005a8c:	2207      	movs	r2, #7
 8005a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	e000e010 	.word	0xe000e010

08005aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff ff29 	bl	8005900 <__NVIC_SetPriorityGrouping>
}
 8005aae:	bf00      	nop
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b086      	sub	sp, #24
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	4603      	mov	r3, r0
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ac8:	f7ff ff3e 	bl	8005948 <__NVIC_GetPriorityGrouping>
 8005acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	6978      	ldr	r0, [r7, #20]
 8005ad4:	f7ff ff8e 	bl	80059f4 <NVIC_EncodePriority>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff ff5d 	bl	80059a0 <__NVIC_SetPriority>
}
 8005ae6:	bf00      	nop
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b082      	sub	sp, #8
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	4603      	mov	r3, r0
 8005af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff ff31 	bl	8005964 <__NVIC_EnableIRQ>
}
 8005b02:	bf00      	nop
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff ffa2 	bl	8005a5c <SysTick_Config>
 8005b18:	4603      	mov	r3, r0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b30:	f7ff fc44 	bl	80053bc <HAL_GetTick>
 8005b34:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d008      	beq.n	8005b54 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2280      	movs	r2, #128	; 0x80
 8005b46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e052      	b.n	8005bfa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0216 	bic.w	r2, r2, #22
 8005b62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b72:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d103      	bne.n	8005b84 <HAL_DMA_Abort+0x62>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0208 	bic.w	r2, r2, #8
 8005b92:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0201 	bic.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ba4:	e013      	b.n	8005bce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ba6:	f7ff fc09 	bl	80053bc <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b05      	cmp	r3, #5
 8005bb2:	d90c      	bls.n	8005bce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e015      	b.n	8005bfa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e4      	bne.n	8005ba6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be0:	223f      	movs	r2, #63	; 0x3f
 8005be2:	409a      	lsls	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d004      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2280      	movs	r2, #128	; 0x80
 8005c1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e00c      	b.n	8005c3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2205      	movs	r2, #5
 8005c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0201 	bic.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b089      	sub	sp, #36	; 0x24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	e165      	b.n	8005f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c64:	2201      	movs	r2, #1
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4013      	ands	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	f040 8154 	bne.w	8005f2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d005      	beq.n	8005c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d130      	bne.n	8005cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	2203      	movs	r2, #3
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43db      	mvns	r3, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	091b      	lsrs	r3, r3, #4
 8005ce6:	f003 0201 	and.w	r2, r3, #1
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d017      	beq.n	8005d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	2203      	movs	r2, #3
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d123      	bne.n	8005d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	08da      	lsrs	r2, r3, #3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3208      	adds	r2, #8
 8005d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	220f      	movs	r2, #15
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	43db      	mvns	r3, r3
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4013      	ands	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	08da      	lsrs	r2, r3, #3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3208      	adds	r2, #8
 8005d86:	69b9      	ldr	r1, [r7, #24]
 8005d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	2203      	movs	r2, #3
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4013      	ands	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f003 0203 	and.w	r2, r3, #3
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	fa02 f303 	lsl.w	r3, r2, r3
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 80ae 	beq.w	8005f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	4b5d      	ldr	r3, [pc, #372]	; (8005f48 <HAL_GPIO_Init+0x300>)
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd6:	4a5c      	ldr	r2, [pc, #368]	; (8005f48 <HAL_GPIO_Init+0x300>)
 8005dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8005dde:	4b5a      	ldr	r3, [pc, #360]	; (8005f48 <HAL_GPIO_Init+0x300>)
 8005de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dea:	4a58      	ldr	r2, [pc, #352]	; (8005f4c <HAL_GPIO_Init+0x304>)
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	089b      	lsrs	r3, r3, #2
 8005df0:	3302      	adds	r3, #2
 8005df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	220f      	movs	r2, #15
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	43db      	mvns	r3, r3
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a4f      	ldr	r2, [pc, #316]	; (8005f50 <HAL_GPIO_Init+0x308>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d025      	beq.n	8005e62 <HAL_GPIO_Init+0x21a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a4e      	ldr	r2, [pc, #312]	; (8005f54 <HAL_GPIO_Init+0x30c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d01f      	beq.n	8005e5e <HAL_GPIO_Init+0x216>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a4d      	ldr	r2, [pc, #308]	; (8005f58 <HAL_GPIO_Init+0x310>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d019      	beq.n	8005e5a <HAL_GPIO_Init+0x212>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a4c      	ldr	r2, [pc, #304]	; (8005f5c <HAL_GPIO_Init+0x314>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d013      	beq.n	8005e56 <HAL_GPIO_Init+0x20e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a4b      	ldr	r2, [pc, #300]	; (8005f60 <HAL_GPIO_Init+0x318>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00d      	beq.n	8005e52 <HAL_GPIO_Init+0x20a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a4a      	ldr	r2, [pc, #296]	; (8005f64 <HAL_GPIO_Init+0x31c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d007      	beq.n	8005e4e <HAL_GPIO_Init+0x206>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a49      	ldr	r2, [pc, #292]	; (8005f68 <HAL_GPIO_Init+0x320>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d101      	bne.n	8005e4a <HAL_GPIO_Init+0x202>
 8005e46:	2306      	movs	r3, #6
 8005e48:	e00c      	b.n	8005e64 <HAL_GPIO_Init+0x21c>
 8005e4a:	2307      	movs	r3, #7
 8005e4c:	e00a      	b.n	8005e64 <HAL_GPIO_Init+0x21c>
 8005e4e:	2305      	movs	r3, #5
 8005e50:	e008      	b.n	8005e64 <HAL_GPIO_Init+0x21c>
 8005e52:	2304      	movs	r3, #4
 8005e54:	e006      	b.n	8005e64 <HAL_GPIO_Init+0x21c>
 8005e56:	2303      	movs	r3, #3
 8005e58:	e004      	b.n	8005e64 <HAL_GPIO_Init+0x21c>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e002      	b.n	8005e64 <HAL_GPIO_Init+0x21c>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <HAL_GPIO_Init+0x21c>
 8005e62:	2300      	movs	r3, #0
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	f002 0203 	and.w	r2, r2, #3
 8005e6a:	0092      	lsls	r2, r2, #2
 8005e6c:	4093      	lsls	r3, r2
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e74:	4935      	ldr	r1, [pc, #212]	; (8005f4c <HAL_GPIO_Init+0x304>)
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	089b      	lsrs	r3, r3, #2
 8005e7a:	3302      	adds	r3, #2
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e82:	4b3a      	ldr	r3, [pc, #232]	; (8005f6c <HAL_GPIO_Init+0x324>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ea6:	4a31      	ldr	r2, [pc, #196]	; (8005f6c <HAL_GPIO_Init+0x324>)
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005eac:	4b2f      	ldr	r3, [pc, #188]	; (8005f6c <HAL_GPIO_Init+0x324>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ed0:	4a26      	ldr	r2, [pc, #152]	; (8005f6c <HAL_GPIO_Init+0x324>)
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ed6:	4b25      	ldr	r3, [pc, #148]	; (8005f6c <HAL_GPIO_Init+0x324>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005efa:	4a1c      	ldr	r2, [pc, #112]	; (8005f6c <HAL_GPIO_Init+0x324>)
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f00:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <HAL_GPIO_Init+0x324>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f24:	4a11      	ldr	r2, [pc, #68]	; (8005f6c <HAL_GPIO_Init+0x324>)
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	2b0f      	cmp	r3, #15
 8005f34:	f67f ae96 	bls.w	8005c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	3724      	adds	r7, #36	; 0x24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	40013800 	.word	0x40013800
 8005f50:	40020000 	.word	0x40020000
 8005f54:	40020400 	.word	0x40020400
 8005f58:	40020800 	.word	0x40020800
 8005f5c:	40020c00 	.word	0x40020c00
 8005f60:	40021000 	.word	0x40021000
 8005f64:	40021400 	.word	0x40021400
 8005f68:	40021800 	.word	0x40021800
 8005f6c:	40013c00 	.word	0x40013c00

08005f70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	887b      	ldrh	r3, [r7, #2]
 8005f82:	4013      	ands	r3, r2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	73fb      	strb	r3, [r7, #15]
 8005f8c:	e001      	b.n	8005f92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	807b      	strh	r3, [r7, #2]
 8005fac:	4613      	mov	r3, r2
 8005fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fb0:	787b      	ldrb	r3, [r7, #1]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fb6:	887a      	ldrh	r2, [r7, #2]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005fbc:	e003      	b.n	8005fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005fbe:	887b      	ldrh	r3, [r7, #2]
 8005fc0:	041a      	lsls	r2, r3, #16
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	619a      	str	r2, [r3, #24]
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005fe4:	887a      	ldrh	r2, [r7, #2]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	041a      	lsls	r2, r3, #16
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	43d9      	mvns	r1, r3
 8005ff0:	887b      	ldrh	r3, [r7, #2]
 8005ff2:	400b      	ands	r3, r1
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	619a      	str	r2, [r3, #24]
}
 8005ffa:	bf00      	nop
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e12b      	b.n	8006272 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fe fd58 	bl	8004ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2224      	movs	r2, #36	; 0x24
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0201 	bic.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800605a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800606a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800606c:	f001 fcf2 	bl	8007a54 <HAL_RCC_GetPCLK1Freq>
 8006070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	4a81      	ldr	r2, [pc, #516]	; (800627c <HAL_I2C_Init+0x274>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d807      	bhi.n	800608c <HAL_I2C_Init+0x84>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4a80      	ldr	r2, [pc, #512]	; (8006280 <HAL_I2C_Init+0x278>)
 8006080:	4293      	cmp	r3, r2
 8006082:	bf94      	ite	ls
 8006084:	2301      	movls	r3, #1
 8006086:	2300      	movhi	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	e006      	b.n	800609a <HAL_I2C_Init+0x92>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4a7d      	ldr	r2, [pc, #500]	; (8006284 <HAL_I2C_Init+0x27c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	bf94      	ite	ls
 8006094:	2301      	movls	r3, #1
 8006096:	2300      	movhi	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e0e7      	b.n	8006272 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4a78      	ldr	r2, [pc, #480]	; (8006288 <HAL_I2C_Init+0x280>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	0c9b      	lsrs	r3, r3, #18
 80060ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	4a6a      	ldr	r2, [pc, #424]	; (800627c <HAL_I2C_Init+0x274>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d802      	bhi.n	80060dc <HAL_I2C_Init+0xd4>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	3301      	adds	r3, #1
 80060da:	e009      	b.n	80060f0 <HAL_I2C_Init+0xe8>
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060e2:	fb02 f303 	mul.w	r3, r2, r3
 80060e6:	4a69      	ldr	r2, [pc, #420]	; (800628c <HAL_I2C_Init+0x284>)
 80060e8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ec:	099b      	lsrs	r3, r3, #6
 80060ee:	3301      	adds	r3, #1
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	430b      	orrs	r3, r1
 80060f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006102:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	495c      	ldr	r1, [pc, #368]	; (800627c <HAL_I2C_Init+0x274>)
 800610c:	428b      	cmp	r3, r1
 800610e:	d819      	bhi.n	8006144 <HAL_I2C_Init+0x13c>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	1e59      	subs	r1, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	fbb1 f3f3 	udiv	r3, r1, r3
 800611e:	1c59      	adds	r1, r3, #1
 8006120:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006124:	400b      	ands	r3, r1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <HAL_I2C_Init+0x138>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	1e59      	subs	r1, r3, #1
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	fbb1 f3f3 	udiv	r3, r1, r3
 8006138:	3301      	adds	r3, #1
 800613a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800613e:	e051      	b.n	80061e4 <HAL_I2C_Init+0x1dc>
 8006140:	2304      	movs	r3, #4
 8006142:	e04f      	b.n	80061e4 <HAL_I2C_Init+0x1dc>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d111      	bne.n	8006170 <HAL_I2C_Init+0x168>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	1e58      	subs	r0, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6859      	ldr	r1, [r3, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	440b      	add	r3, r1
 800615a:	fbb0 f3f3 	udiv	r3, r0, r3
 800615e:	3301      	adds	r3, #1
 8006160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006164:	2b00      	cmp	r3, #0
 8006166:	bf0c      	ite	eq
 8006168:	2301      	moveq	r3, #1
 800616a:	2300      	movne	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	e012      	b.n	8006196 <HAL_I2C_Init+0x18e>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	1e58      	subs	r0, r3, #1
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6859      	ldr	r1, [r3, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	440b      	add	r3, r1
 800617e:	0099      	lsls	r1, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	fbb0 f3f3 	udiv	r3, r0, r3
 8006186:	3301      	adds	r3, #1
 8006188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800618c:	2b00      	cmp	r3, #0
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <HAL_I2C_Init+0x196>
 800619a:	2301      	movs	r3, #1
 800619c:	e022      	b.n	80061e4 <HAL_I2C_Init+0x1dc>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10e      	bne.n	80061c4 <HAL_I2C_Init+0x1bc>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	1e58      	subs	r0, r3, #1
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6859      	ldr	r1, [r3, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	440b      	add	r3, r1
 80061b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80061b8:	3301      	adds	r3, #1
 80061ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c2:	e00f      	b.n	80061e4 <HAL_I2C_Init+0x1dc>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	1e58      	subs	r0, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6859      	ldr	r1, [r3, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	0099      	lsls	r1, r3, #2
 80061d4:	440b      	add	r3, r1
 80061d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061da:	3301      	adds	r3, #1
 80061dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	6809      	ldr	r1, [r1, #0]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	69da      	ldr	r2, [r3, #28]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6911      	ldr	r1, [r2, #16]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	68d2      	ldr	r2, [r2, #12]
 800621e:	4311      	orrs	r1, r2
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	6812      	ldr	r2, [r2, #0]
 8006224:	430b      	orrs	r3, r1
 8006226:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695a      	ldr	r2, [r3, #20]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0201 	orr.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2220      	movs	r2, #32
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	000186a0 	.word	0x000186a0
 8006280:	001e847f 	.word	0x001e847f
 8006284:	003d08ff 	.word	0x003d08ff
 8006288:	431bde83 	.word	0x431bde83
 800628c:	10624dd3 	.word	0x10624dd3

08006290 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	461a      	mov	r2, r3
 800629c:	460b      	mov	r3, r1
 800629e:	817b      	strh	r3, [r7, #10]
 80062a0:	4613      	mov	r3, r2
 80062a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062a4:	f7ff f88a 	bl	80053bc <HAL_GetTick>
 80062a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	f040 80e0 	bne.w	8006478 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	2319      	movs	r3, #25
 80062be:	2201      	movs	r2, #1
 80062c0:	4970      	ldr	r1, [pc, #448]	; (8006484 <HAL_I2C_Master_Transmit+0x1f4>)
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f001 f8f6 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80062ce:	2302      	movs	r3, #2
 80062d0:	e0d3      	b.n	800647a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_I2C_Master_Transmit+0x50>
 80062dc:	2302      	movs	r3, #2
 80062de:	e0cc      	b.n	800647a <HAL_I2C_Master_Transmit+0x1ea>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d007      	beq.n	8006306 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006314:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2221      	movs	r2, #33	; 0x21
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2210      	movs	r2, #16
 8006322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	893a      	ldrh	r2, [r7, #8]
 8006336:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a50      	ldr	r2, [pc, #320]	; (8006488 <HAL_I2C_Master_Transmit+0x1f8>)
 8006346:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006348:	8979      	ldrh	r1, [r7, #10]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	6a3a      	ldr	r2, [r7, #32]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 fde2 	bl	8006f18 <I2C_MasterRequestWrite>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e08d      	b.n	800647a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	613b      	str	r3, [r7, #16]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	613b      	str	r3, [r7, #16]
 8006372:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006374:	e066      	b.n	8006444 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	6a39      	ldr	r1, [r7, #32]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f001 f970 	bl	8007660 <I2C_WaitOnTXEFlagUntilTimeout>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00d      	beq.n	80063a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	2b04      	cmp	r3, #4
 800638c:	d107      	bne.n	800639e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800639c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e06b      	b.n	800647a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	781a      	ldrb	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d11b      	bne.n	8006418 <HAL_I2C_Master_Transmit+0x188>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d017      	beq.n	8006418 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	781a      	ldrb	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	6a39      	ldr	r1, [r7, #32]
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f001 f960 	bl	80076e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00d      	beq.n	8006444 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	2b04      	cmp	r3, #4
 800642e:	d107      	bne.n	8006440 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800643e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e01a      	b.n	800647a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006448:	2b00      	cmp	r3, #0
 800644a:	d194      	bne.n	8006376 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800645a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	e000      	b.n	800647a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006478:	2302      	movs	r3, #2
  }
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	00100002 	.word	0x00100002
 8006488:	ffff0000 	.word	0xffff0000

0800648c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08c      	sub	sp, #48	; 0x30
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	461a      	mov	r2, r3
 8006498:	460b      	mov	r3, r1
 800649a:	817b      	strh	r3, [r7, #10]
 800649c:	4613      	mov	r3, r2
 800649e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064a0:	f7fe ff8c 	bl	80053bc <HAL_GetTick>
 80064a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	f040 820b 	bne.w	80068ca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	2319      	movs	r3, #25
 80064ba:	2201      	movs	r2, #1
 80064bc:	497c      	ldr	r1, [pc, #496]	; (80066b0 <HAL_I2C_Master_Receive+0x224>)
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fff8 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80064ca:	2302      	movs	r3, #2
 80064cc:	e1fe      	b.n	80068cc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_I2C_Master_Receive+0x50>
 80064d8:	2302      	movs	r3, #2
 80064da:	e1f7      	b.n	80068cc <HAL_I2C_Master_Receive+0x440>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d007      	beq.n	8006502 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0201 	orr.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006510:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2222      	movs	r2, #34	; 0x22
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2210      	movs	r2, #16
 800651e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	893a      	ldrh	r2, [r7, #8]
 8006532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a5c      	ldr	r2, [pc, #368]	; (80066b4 <HAL_I2C_Master_Receive+0x228>)
 8006542:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006544:	8979      	ldrh	r1, [r7, #10]
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 fd66 	bl	800701c <I2C_MasterRequestRead>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e1b8      	b.n	80068cc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	2b00      	cmp	r3, #0
 8006560:	d113      	bne.n	800658a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006562:	2300      	movs	r3, #0
 8006564:	623b      	str	r3, [r7, #32]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	623b      	str	r3, [r7, #32]
 8006576:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	e18c      	b.n	80068a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658e:	2b01      	cmp	r3, #1
 8006590:	d11b      	bne.n	80065ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065a2:	2300      	movs	r3, #0
 80065a4:	61fb      	str	r3, [r7, #28]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	e16c      	b.n	80068a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d11b      	bne.n	800660a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f2:	2300      	movs	r3, #0
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	61bb      	str	r3, [r7, #24]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	61bb      	str	r3, [r7, #24]
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	e14c      	b.n	80068a4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006630:	e138      	b.n	80068a4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006636:	2b03      	cmp	r3, #3
 8006638:	f200 80f1 	bhi.w	800681e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006640:	2b01      	cmp	r3, #1
 8006642:	d123      	bne.n	800668c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f001 f88b 	bl	8007764 <I2C_WaitOnRXNEFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e139      	b.n	80068cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	855a      	strh	r2, [r3, #42]	; 0x2a
 800668a:	e10b      	b.n	80068a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006690:	2b02      	cmp	r3, #2
 8006692:	d14e      	bne.n	8006732 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	2200      	movs	r2, #0
 800669c:	4906      	ldr	r1, [pc, #24]	; (80066b8 <HAL_I2C_Master_Receive+0x22c>)
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 ff08 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d008      	beq.n	80066bc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e10e      	b.n	80068cc <HAL_I2C_Master_Receive+0x440>
 80066ae:	bf00      	nop
 80066b0:	00100002 	.word	0x00100002
 80066b4:	ffff0000 	.word	0xffff0000
 80066b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691a      	ldr	r2, [r3, #16]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006726:	b29b      	uxth	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	b29a      	uxth	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006730:	e0b8      	b.n	80068a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	2200      	movs	r2, #0
 800673a:	4966      	ldr	r1, [pc, #408]	; (80068d4 <HAL_I2C_Master_Receive+0x448>)
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 feb9 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e0bf      	b.n	80068cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800675a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	2200      	movs	r2, #0
 8006796:	494f      	ldr	r1, [pc, #316]	; (80068d4 <HAL_I2C_Master_Receive+0x448>)
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fe8b 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e091      	b.n	80068cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691a      	ldr	r2, [r3, #16]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d4:	3b01      	subs	r3, #1
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006806:	3b01      	subs	r3, #1
 8006808:	b29a      	uxth	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800681c:	e042      	b.n	80068a4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800681e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 ff9e 	bl	8007764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e04c      	b.n	80068cc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	b2d2      	uxtb	r2, r2
 800683e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684e:	3b01      	subs	r3, #1
 8006850:	b29a      	uxth	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685a:	b29b      	uxth	r3, r3
 800685c:	3b01      	subs	r3, #1
 800685e:	b29a      	uxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	2b04      	cmp	r3, #4
 8006870:	d118      	bne.n	80068a4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	691a      	ldr	r2, [r3, #16]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689a:	b29b      	uxth	r3, r3
 800689c:	3b01      	subs	r3, #1
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f47f aec2 	bne.w	8006632 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	e000      	b.n	80068cc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80068ca:	2302      	movs	r3, #2
  }
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3728      	adds	r7, #40	; 0x28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	00010004 	.word	0x00010004

080068d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	4608      	mov	r0, r1
 80068e2:	4611      	mov	r1, r2
 80068e4:	461a      	mov	r2, r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	817b      	strh	r3, [r7, #10]
 80068ea:	460b      	mov	r3, r1
 80068ec:	813b      	strh	r3, [r7, #8]
 80068ee:	4613      	mov	r3, r2
 80068f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068f2:	f7fe fd63 	bl	80053bc <HAL_GetTick>
 80068f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b20      	cmp	r3, #32
 8006902:	f040 80d9 	bne.w	8006ab8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	2319      	movs	r3, #25
 800690c:	2201      	movs	r2, #1
 800690e:	496d      	ldr	r1, [pc, #436]	; (8006ac4 <HAL_I2C_Mem_Write+0x1ec>)
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fdcf 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800691c:	2302      	movs	r3, #2
 800691e:	e0cc      	b.n	8006aba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_I2C_Mem_Write+0x56>
 800692a:	2302      	movs	r3, #2
 800692c:	e0c5      	b.n	8006aba <HAL_I2C_Mem_Write+0x1e2>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b01      	cmp	r3, #1
 8006942:	d007      	beq.n	8006954 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006962:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2221      	movs	r2, #33	; 0x21
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2240      	movs	r2, #64	; 0x40
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a3a      	ldr	r2, [r7, #32]
 800697e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698a:	b29a      	uxth	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4a4d      	ldr	r2, [pc, #308]	; (8006ac8 <HAL_I2C_Mem_Write+0x1f0>)
 8006994:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006996:	88f8      	ldrh	r0, [r7, #6]
 8006998:	893a      	ldrh	r2, [r7, #8]
 800699a:	8979      	ldrh	r1, [r7, #10]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	4603      	mov	r3, r0
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 fc06 	bl	80071b8 <I2C_RequestMemoryWrite>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d052      	beq.n	8006a58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e081      	b.n	8006aba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 fe50 	bl	8007660 <I2C_WaitOnTXEFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00d      	beq.n	80069e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d107      	bne.n	80069de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e06b      	b.n	8006aba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	781a      	ldrb	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d11b      	bne.n	8006a58 <HAL_I2C_Mem_Write+0x180>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d017      	beq.n	8006a58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	781a      	ldrb	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1aa      	bne.n	80069b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fe3c 	bl	80076e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00d      	beq.n	8006a8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d107      	bne.n	8006a88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e016      	b.n	8006aba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	e000      	b.n	8006aba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006ab8:	2302      	movs	r3, #2
  }
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	00100002 	.word	0x00100002
 8006ac8:	ffff0000 	.word	0xffff0000

08006acc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08c      	sub	sp, #48	; 0x30
 8006ad0:	af02      	add	r7, sp, #8
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	461a      	mov	r2, r3
 8006ada:	4603      	mov	r3, r0
 8006adc:	817b      	strh	r3, [r7, #10]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	813b      	strh	r3, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ae6:	f7fe fc69 	bl	80053bc <HAL_GetTick>
 8006aea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b20      	cmp	r3, #32
 8006af6:	f040 8208 	bne.w	8006f0a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	2319      	movs	r3, #25
 8006b00:	2201      	movs	r2, #1
 8006b02:	497b      	ldr	r1, [pc, #492]	; (8006cf0 <HAL_I2C_Mem_Read+0x224>)
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 fcd5 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006b10:	2302      	movs	r3, #2
 8006b12:	e1fb      	b.n	8006f0c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d101      	bne.n	8006b22 <HAL_I2C_Mem_Read+0x56>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e1f4      	b.n	8006f0c <HAL_I2C_Mem_Read+0x440>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d007      	beq.n	8006b48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0201 	orr.w	r2, r2, #1
 8006b46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2222      	movs	r2, #34	; 0x22
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2240      	movs	r2, #64	; 0x40
 8006b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4a5b      	ldr	r2, [pc, #364]	; (8006cf4 <HAL_I2C_Mem_Read+0x228>)
 8006b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b8a:	88f8      	ldrh	r0, [r7, #6]
 8006b8c:	893a      	ldrh	r2, [r7, #8]
 8006b8e:	8979      	ldrh	r1, [r7, #10]
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	9301      	str	r3, [sp, #4]
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	4603      	mov	r3, r0
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 fba2 	bl	80072e4 <I2C_RequestMemoryRead>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e1b0      	b.n	8006f0c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d113      	bne.n	8006bda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	623b      	str	r3, [r7, #32]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	623b      	str	r3, [r7, #32]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	623b      	str	r3, [r7, #32]
 8006bc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	e184      	b.n	8006ee4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d11b      	bne.n	8006c1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61fb      	str	r3, [r7, #28]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	61fb      	str	r3, [r7, #28]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	e164      	b.n	8006ee4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d11b      	bne.n	8006c5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c42:	2300      	movs	r3, #0
 8006c44:	61bb      	str	r3, [r7, #24]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	61bb      	str	r3, [r7, #24]
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	e144      	b.n	8006ee4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c70:	e138      	b.n	8006ee4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	f200 80f1 	bhi.w	8006e5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d123      	bne.n	8006ccc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fd6b 	bl	8007764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e139      	b.n	8006f0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691a      	ldr	r2, [r3, #16]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cca:	e10b      	b.n	8006ee4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d14e      	bne.n	8006d72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4906      	ldr	r1, [pc, #24]	; (8006cf8 <HAL_I2C_Mem_Read+0x22c>)
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 fbe8 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d008      	beq.n	8006cfc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e10e      	b.n	8006f0c <HAL_I2C_Mem_Read+0x440>
 8006cee:	bf00      	nop
 8006cf0:	00100002 	.word	0x00100002
 8006cf4:	ffff0000 	.word	0xffff0000
 8006cf8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	691a      	ldr	r2, [r3, #16]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	3b01      	subs	r3, #1
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d70:	e0b8      	b.n	8006ee4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4966      	ldr	r1, [pc, #408]	; (8006f14 <HAL_I2C_Mem_Read+0x448>)
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fb99 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0bf      	b.n	8006f0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691a      	ldr	r2, [r3, #16]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	494f      	ldr	r1, [pc, #316]	; (8006f14 <HAL_I2C_Mem_Read+0x448>)
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 fb6b 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e091      	b.n	8006f0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	691a      	ldr	r2, [r3, #16]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e5c:	e042      	b.n	8006ee4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 fc7e 	bl	8007764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e04c      	b.n	8006f0c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7c:	b2d2      	uxtb	r2, r2
 8006e7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d118      	bne.n	8006ee4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	691a      	ldr	r2, [r3, #16]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f47f aec2 	bne.w	8006c72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	e000      	b.n	8006f0c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006f0a:	2302      	movs	r3, #2
  }
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3728      	adds	r7, #40	; 0x28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	00010004 	.word	0x00010004

08006f18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b088      	sub	sp, #32
 8006f1c:	af02      	add	r7, sp, #8
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	607a      	str	r2, [r7, #4]
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	460b      	mov	r3, r1
 8006f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d006      	beq.n	8006f42 <I2C_MasterRequestWrite+0x2a>
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d003      	beq.n	8006f42 <I2C_MasterRequestWrite+0x2a>
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f40:	d108      	bne.n	8006f54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	e00b      	b.n	8006f6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f58:	2b12      	cmp	r3, #18
 8006f5a:	d107      	bne.n	8006f6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 fa9b 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00d      	beq.n	8006fa0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f92:	d103      	bne.n	8006f9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e035      	b.n	800700c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fa8:	d108      	bne.n	8006fbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006faa:	897b      	ldrh	r3, [r7, #10]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	461a      	mov	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fb8:	611a      	str	r2, [r3, #16]
 8006fba:	e01b      	b.n	8006ff4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006fbc:	897b      	ldrh	r3, [r7, #10]
 8006fbe:	11db      	asrs	r3, r3, #7
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	f003 0306 	and.w	r3, r3, #6
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f063 030f 	orn	r3, r3, #15
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	490e      	ldr	r1, [pc, #56]	; (8007014 <I2C_MasterRequestWrite+0xfc>)
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 fac1 	bl	8007562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e010      	b.n	800700c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006fea:	897b      	ldrh	r3, [r7, #10]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	4907      	ldr	r1, [pc, #28]	; (8007018 <I2C_MasterRequestWrite+0x100>)
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 fab1 	bl	8007562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	00010008 	.word	0x00010008
 8007018:	00010002 	.word	0x00010002

0800701c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af02      	add	r7, sp, #8
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	607a      	str	r2, [r7, #4]
 8007026:	603b      	str	r3, [r7, #0]
 8007028:	460b      	mov	r3, r1
 800702a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007040:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b08      	cmp	r3, #8
 8007046:	d006      	beq.n	8007056 <I2C_MasterRequestRead+0x3a>
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d003      	beq.n	8007056 <I2C_MasterRequestRead+0x3a>
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007054:	d108      	bne.n	8007068 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	e00b      	b.n	8007080 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706c:	2b11      	cmp	r3, #17
 800706e:	d107      	bne.n	8007080 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800707e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 fa11 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00d      	beq.n	80070b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a6:	d103      	bne.n	80070b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e079      	b.n	80071a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070bc:	d108      	bne.n	80070d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80070be:	897b      	ldrh	r3, [r7, #10]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	611a      	str	r2, [r3, #16]
 80070ce:	e05f      	b.n	8007190 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070d0:	897b      	ldrh	r3, [r7, #10]
 80070d2:	11db      	asrs	r3, r3, #7
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f003 0306 	and.w	r3, r3, #6
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	f063 030f 	orn	r3, r3, #15
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	4930      	ldr	r1, [pc, #192]	; (80071b0 <I2C_MasterRequestRead+0x194>)
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 fa37 	bl	8007562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e054      	b.n	80071a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80070fe:	897b      	ldrh	r3, [r7, #10]
 8007100:	b2da      	uxtb	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	4929      	ldr	r1, [pc, #164]	; (80071b4 <I2C_MasterRequestRead+0x198>)
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 fa27 	bl	8007562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e044      	b.n	80071a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800711e:	2300      	movs	r3, #0
 8007120:	613b      	str	r3, [r7, #16]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	613b      	str	r3, [r7, #16]
 8007132:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007142:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f9af 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00d      	beq.n	8007178 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800716a:	d103      	bne.n	8007174 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007172:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e017      	b.n	80071a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007178:	897b      	ldrh	r3, [r7, #10]
 800717a:	11db      	asrs	r3, r3, #7
 800717c:	b2db      	uxtb	r3, r3
 800717e:	f003 0306 	and.w	r3, r3, #6
 8007182:	b2db      	uxtb	r3, r3
 8007184:	f063 030e 	orn	r3, r3, #14
 8007188:	b2da      	uxtb	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	4907      	ldr	r1, [pc, #28]	; (80071b4 <I2C_MasterRequestRead+0x198>)
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f9e3 	bl	8007562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e000      	b.n	80071a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	00010008 	.word	0x00010008
 80071b4:	00010002 	.word	0x00010002

080071b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af02      	add	r7, sp, #8
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	4608      	mov	r0, r1
 80071c2:	4611      	mov	r1, r2
 80071c4:	461a      	mov	r2, r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	817b      	strh	r3, [r7, #10]
 80071ca:	460b      	mov	r3, r1
 80071cc:	813b      	strh	r3, [r7, #8]
 80071ce:	4613      	mov	r3, r2
 80071d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 f960 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007208:	d103      	bne.n	8007212 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e05f      	b.n	80072d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007216:	897b      	ldrh	r3, [r7, #10]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007224:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	6a3a      	ldr	r2, [r7, #32]
 800722a:	492d      	ldr	r1, [pc, #180]	; (80072e0 <I2C_RequestMemoryWrite+0x128>)
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 f998 	bl	8007562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e04c      	b.n	80072d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007254:	6a39      	ldr	r1, [r7, #32]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fa02 	bl	8007660 <I2C_WaitOnTXEFlagUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00d      	beq.n	800727e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	2b04      	cmp	r3, #4
 8007268:	d107      	bne.n	800727a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007278:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e02b      	b.n	80072d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800727e:	88fb      	ldrh	r3, [r7, #6]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d105      	bne.n	8007290 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007284:	893b      	ldrh	r3, [r7, #8]
 8007286:	b2da      	uxtb	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	611a      	str	r2, [r3, #16]
 800728e:	e021      	b.n	80072d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007290:	893b      	ldrh	r3, [r7, #8]
 8007292:	0a1b      	lsrs	r3, r3, #8
 8007294:	b29b      	uxth	r3, r3
 8007296:	b2da      	uxtb	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800729e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a0:	6a39      	ldr	r1, [r7, #32]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 f9dc 	bl	8007660 <I2C_WaitOnTXEFlagUntilTimeout>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00d      	beq.n	80072ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d107      	bne.n	80072c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e005      	b.n	80072d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072ca:	893b      	ldrh	r3, [r7, #8]
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	00010002 	.word	0x00010002

080072e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	4608      	mov	r0, r1
 80072ee:	4611      	mov	r1, r2
 80072f0:	461a      	mov	r2, r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	817b      	strh	r3, [r7, #10]
 80072f6:	460b      	mov	r3, r1
 80072f8:	813b      	strh	r3, [r7, #8]
 80072fa:	4613      	mov	r3, r2
 80072fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800730c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800731c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	2200      	movs	r2, #0
 8007326:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 f8c2 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00d      	beq.n	8007352 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007344:	d103      	bne.n	800734e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800734c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e0aa      	b.n	80074a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007352:	897b      	ldrh	r3, [r7, #10]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007360:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	6a3a      	ldr	r2, [r7, #32]
 8007366:	4952      	ldr	r1, [pc, #328]	; (80074b0 <I2C_RequestMemoryRead+0x1cc>)
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f8fa 	bl	8007562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e097      	b.n	80074a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800738e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007390:	6a39      	ldr	r1, [r7, #32]
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 f964 	bl	8007660 <I2C_WaitOnTXEFlagUntilTimeout>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00d      	beq.n	80073ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d107      	bne.n	80073b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e076      	b.n	80074a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d105      	bne.n	80073cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073c0:	893b      	ldrh	r3, [r7, #8]
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	611a      	str	r2, [r3, #16]
 80073ca:	e021      	b.n	8007410 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80073cc:	893b      	ldrh	r3, [r7, #8]
 80073ce:	0a1b      	lsrs	r3, r3, #8
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073dc:	6a39      	ldr	r1, [r7, #32]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 f93e 	bl	8007660 <I2C_WaitOnTXEFlagUntilTimeout>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00d      	beq.n	8007406 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d107      	bne.n	8007402 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007400:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e050      	b.n	80074a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007406:	893b      	ldrh	r3, [r7, #8]
 8007408:	b2da      	uxtb	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007412:	6a39      	ldr	r1, [r7, #32]
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f923 	bl	8007660 <I2C_WaitOnTXEFlagUntilTimeout>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00d      	beq.n	800743c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007424:	2b04      	cmp	r3, #4
 8007426:	d107      	bne.n	8007438 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007436:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e035      	b.n	80074a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800744a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	2200      	movs	r2, #0
 8007454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 f82b 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00d      	beq.n	8007480 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007472:	d103      	bne.n	800747c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800747a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e013      	b.n	80074a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007480:	897b      	ldrh	r3, [r7, #10]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	b2da      	uxtb	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	6a3a      	ldr	r2, [r7, #32]
 8007494:	4906      	ldr	r1, [pc, #24]	; (80074b0 <I2C_RequestMemoryRead+0x1cc>)
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 f863 	bl	8007562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	00010002 	.word	0x00010002

080074b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074c4:	e025      	b.n	8007512 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074cc:	d021      	beq.n	8007512 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ce:	f7fd ff75 	bl	80053bc <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d302      	bcc.n	80074e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d116      	bne.n	8007512 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f043 0220 	orr.w	r2, r3, #32
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e023      	b.n	800755a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	0c1b      	lsrs	r3, r3, #16
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b01      	cmp	r3, #1
 800751a:	d10d      	bne.n	8007538 <I2C_WaitOnFlagUntilTimeout+0x84>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	43da      	mvns	r2, r3
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	4013      	ands	r3, r2
 8007528:	b29b      	uxth	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	bf0c      	ite	eq
 800752e:	2301      	moveq	r3, #1
 8007530:	2300      	movne	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	461a      	mov	r2, r3
 8007536:	e00c      	b.n	8007552 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	43da      	mvns	r2, r3
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4013      	ands	r3, r2
 8007544:	b29b      	uxth	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	bf0c      	ite	eq
 800754a:	2301      	moveq	r3, #1
 800754c:	2300      	movne	r3, #0
 800754e:	b2db      	uxtb	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	429a      	cmp	r2, r3
 8007556:	d0b6      	beq.n	80074c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	607a      	str	r2, [r7, #4]
 800756e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007570:	e051      	b.n	8007616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800757c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007580:	d123      	bne.n	80075ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007590:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800759a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	f043 0204 	orr.w	r2, r3, #4
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e046      	b.n	8007658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d0:	d021      	beq.n	8007616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d2:	f7fd fef3 	bl	80053bc <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d302      	bcc.n	80075e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d116      	bne.n	8007616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	f043 0220 	orr.w	r2, r3, #32
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e020      	b.n	8007658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	0c1b      	lsrs	r3, r3, #16
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b01      	cmp	r3, #1
 800761e:	d10c      	bne.n	800763a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	43da      	mvns	r2, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	4013      	ands	r3, r2
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	bf14      	ite	ne
 8007632:	2301      	movne	r3, #1
 8007634:	2300      	moveq	r3, #0
 8007636:	b2db      	uxtb	r3, r3
 8007638:	e00b      	b.n	8007652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	43da      	mvns	r2, r3
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	4013      	ands	r3, r2
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	bf14      	ite	ne
 800764c:	2301      	movne	r3, #1
 800764e:	2300      	moveq	r3, #0
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d18d      	bne.n	8007572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800766c:	e02d      	b.n	80076ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 f8ce 	bl	8007810 <I2C_IsAcknowledgeFailed>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e02d      	b.n	80076da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007684:	d021      	beq.n	80076ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007686:	f7fd fe99 	bl	80053bc <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	429a      	cmp	r2, r3
 8007694:	d302      	bcc.n	800769c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d116      	bne.n	80076ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	f043 0220 	orr.w	r2, r3, #32
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e007      	b.n	80076da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d4:	2b80      	cmp	r3, #128	; 0x80
 80076d6:	d1ca      	bne.n	800766e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076ee:	e02d      	b.n	800774c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 f88d 	bl	8007810 <I2C_IsAcknowledgeFailed>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e02d      	b.n	800775c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007706:	d021      	beq.n	800774c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007708:	f7fd fe58 	bl	80053bc <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	429a      	cmp	r2, r3
 8007716:	d302      	bcc.n	800771e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d116      	bne.n	800774c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2220      	movs	r2, #32
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	f043 0220 	orr.w	r2, r3, #32
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e007      	b.n	800775c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	f003 0304 	and.w	r3, r3, #4
 8007756:	2b04      	cmp	r3, #4
 8007758:	d1ca      	bne.n	80076f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007770:	e042      	b.n	80077f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	f003 0310 	and.w	r3, r3, #16
 800777c:	2b10      	cmp	r3, #16
 800777e:	d119      	bne.n	80077b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0210 	mvn.w	r2, #16
 8007788:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e029      	b.n	8007808 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b4:	f7fd fe02 	bl	80053bc <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d302      	bcc.n	80077ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d116      	bne.n	80077f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e4:	f043 0220 	orr.w	r2, r3, #32
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e007      	b.n	8007808 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007802:	2b40      	cmp	r3, #64	; 0x40
 8007804:	d1b5      	bne.n	8007772 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007826:	d11b      	bne.n	8007860 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007830:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2220      	movs	r2, #32
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	f043 0204 	orr.w	r2, r3, #4
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e000      	b.n	8007862 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
	...

08007870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e0cc      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007884:	4b68      	ldr	r3, [pc, #416]	; (8007a28 <HAL_RCC_ClockConfig+0x1b8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 030f 	and.w	r3, r3, #15
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d90c      	bls.n	80078ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007892:	4b65      	ldr	r3, [pc, #404]	; (8007a28 <HAL_RCC_ClockConfig+0x1b8>)
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800789a:	4b63      	ldr	r3, [pc, #396]	; (8007a28 <HAL_RCC_ClockConfig+0x1b8>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 030f 	and.w	r3, r3, #15
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d001      	beq.n	80078ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e0b8      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d020      	beq.n	80078fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078c4:	4b59      	ldr	r3, [pc, #356]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	4a58      	ldr	r2, [pc, #352]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 80078ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80078ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078dc:	4b53      	ldr	r3, [pc, #332]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	4a52      	ldr	r2, [pc, #328]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 80078e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80078e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078e8:	4b50      	ldr	r3, [pc, #320]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	494d      	ldr	r1, [pc, #308]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d044      	beq.n	8007990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d107      	bne.n	800791e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800790e:	4b47      	ldr	r3, [pc, #284]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d119      	bne.n	800794e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e07f      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	2b02      	cmp	r3, #2
 8007924:	d003      	beq.n	800792e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800792a:	2b03      	cmp	r3, #3
 800792c:	d107      	bne.n	800793e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800792e:	4b3f      	ldr	r3, [pc, #252]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d109      	bne.n	800794e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e06f      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800793e:	4b3b      	ldr	r3, [pc, #236]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e067      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800794e:	4b37      	ldr	r3, [pc, #220]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f023 0203 	bic.w	r2, r3, #3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	4934      	ldr	r1, [pc, #208]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 800795c:	4313      	orrs	r3, r2
 800795e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007960:	f7fd fd2c 	bl	80053bc <HAL_GetTick>
 8007964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007966:	e00a      	b.n	800797e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007968:	f7fd fd28 	bl	80053bc <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	f241 3288 	movw	r2, #5000	; 0x1388
 8007976:	4293      	cmp	r3, r2
 8007978:	d901      	bls.n	800797e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e04f      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800797e:	4b2b      	ldr	r3, [pc, #172]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f003 020c 	and.w	r2, r3, #12
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	429a      	cmp	r2, r3
 800798e:	d1eb      	bne.n	8007968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007990:	4b25      	ldr	r3, [pc, #148]	; (8007a28 <HAL_RCC_ClockConfig+0x1b8>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	d20c      	bcs.n	80079b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800799e:	4b22      	ldr	r3, [pc, #136]	; (8007a28 <HAL_RCC_ClockConfig+0x1b8>)
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	b2d2      	uxtb	r2, r2
 80079a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079a6:	4b20      	ldr	r3, [pc, #128]	; (8007a28 <HAL_RCC_ClockConfig+0x1b8>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d001      	beq.n	80079b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e032      	b.n	8007a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d008      	beq.n	80079d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079c4:	4b19      	ldr	r3, [pc, #100]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	4916      	ldr	r1, [pc, #88]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0308 	and.w	r3, r3, #8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d009      	beq.n	80079f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079e2:	4b12      	ldr	r3, [pc, #72]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	490e      	ldr	r1, [pc, #56]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80079f6:	f000 f855 	bl	8007aa4 <HAL_RCC_GetSysClockFreq>
 80079fa:	4602      	mov	r2, r0
 80079fc:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <HAL_RCC_ClockConfig+0x1bc>)
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	091b      	lsrs	r3, r3, #4
 8007a02:	f003 030f 	and.w	r3, r3, #15
 8007a06:	490a      	ldr	r1, [pc, #40]	; (8007a30 <HAL_RCC_ClockConfig+0x1c0>)
 8007a08:	5ccb      	ldrb	r3, [r1, r3]
 8007a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a0e:	4a09      	ldr	r2, [pc, #36]	; (8007a34 <HAL_RCC_ClockConfig+0x1c4>)
 8007a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007a12:	4b09      	ldr	r3, [pc, #36]	; (8007a38 <HAL_RCC_ClockConfig+0x1c8>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fd fc8c 	bl	8005334 <HAL_InitTick>

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	40023c00 	.word	0x40023c00
 8007a2c:	40023800 	.word	0x40023800
 8007a30:	0800e718 	.word	0x0800e718
 8007a34:	20000044 	.word	0x20000044
 8007a38:	20000048 	.word	0x20000048

08007a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a40:	4b03      	ldr	r3, [pc, #12]	; (8007a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a42:	681b      	ldr	r3, [r3, #0]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000044 	.word	0x20000044

08007a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a58:	f7ff fff0 	bl	8007a3c <HAL_RCC_GetHCLKFreq>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	0a9b      	lsrs	r3, r3, #10
 8007a64:	f003 0307 	and.w	r3, r3, #7
 8007a68:	4903      	ldr	r1, [pc, #12]	; (8007a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a6a:	5ccb      	ldrb	r3, [r1, r3]
 8007a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	40023800 	.word	0x40023800
 8007a78:	0800e728 	.word	0x0800e728

08007a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007a80:	f7ff ffdc 	bl	8007a3c <HAL_RCC_GetHCLKFreq>
 8007a84:	4602      	mov	r2, r0
 8007a86:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	0b5b      	lsrs	r3, r3, #13
 8007a8c:	f003 0307 	and.w	r3, r3, #7
 8007a90:	4903      	ldr	r1, [pc, #12]	; (8007aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a92:	5ccb      	ldrb	r3, [r1, r3]
 8007a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	40023800 	.word	0x40023800
 8007aa0:	0800e728 	.word	0x0800e728

08007aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aa8:	b0ae      	sub	sp, #184	; 0xb8
 8007aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007aca:	4bcb      	ldr	r3, [pc, #812]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 030c 	and.w	r3, r3, #12
 8007ad2:	2b0c      	cmp	r3, #12
 8007ad4:	f200 8206 	bhi.w	8007ee4 <HAL_RCC_GetSysClockFreq+0x440>
 8007ad8:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ade:	bf00      	nop
 8007ae0:	08007b15 	.word	0x08007b15
 8007ae4:	08007ee5 	.word	0x08007ee5
 8007ae8:	08007ee5 	.word	0x08007ee5
 8007aec:	08007ee5 	.word	0x08007ee5
 8007af0:	08007b1d 	.word	0x08007b1d
 8007af4:	08007ee5 	.word	0x08007ee5
 8007af8:	08007ee5 	.word	0x08007ee5
 8007afc:	08007ee5 	.word	0x08007ee5
 8007b00:	08007b25 	.word	0x08007b25
 8007b04:	08007ee5 	.word	0x08007ee5
 8007b08:	08007ee5 	.word	0x08007ee5
 8007b0c:	08007ee5 	.word	0x08007ee5
 8007b10:	08007d15 	.word	0x08007d15
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b14:	4bb9      	ldr	r3, [pc, #740]	; (8007dfc <HAL_RCC_GetSysClockFreq+0x358>)
 8007b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007b1a:	e1e7      	b.n	8007eec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b1c:	4bb8      	ldr	r3, [pc, #736]	; (8007e00 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007b22:	e1e3      	b.n	8007eec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b24:	4bb4      	ldr	r3, [pc, #720]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b30:	4bb1      	ldr	r3, [pc, #708]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d071      	beq.n	8007c20 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b3c:	4bae      	ldr	r3, [pc, #696]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	099b      	lsrs	r3, r3, #6
 8007b42:	2200      	movs	r2, #0
 8007b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b48:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007b62:	4622      	mov	r2, r4
 8007b64:	462b      	mov	r3, r5
 8007b66:	f04f 0000 	mov.w	r0, #0
 8007b6a:	f04f 0100 	mov.w	r1, #0
 8007b6e:	0159      	lsls	r1, r3, #5
 8007b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b74:	0150      	lsls	r0, r2, #5
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	1a51      	subs	r1, r2, r1
 8007b7e:	6439      	str	r1, [r7, #64]	; 0x40
 8007b80:	4629      	mov	r1, r5
 8007b82:	eb63 0301 	sbc.w	r3, r3, r1
 8007b86:	647b      	str	r3, [r7, #68]	; 0x44
 8007b88:	f04f 0200 	mov.w	r2, #0
 8007b8c:	f04f 0300 	mov.w	r3, #0
 8007b90:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007b94:	4649      	mov	r1, r9
 8007b96:	018b      	lsls	r3, r1, #6
 8007b98:	4641      	mov	r1, r8
 8007b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b9e:	4641      	mov	r1, r8
 8007ba0:	018a      	lsls	r2, r1, #6
 8007ba2:	4641      	mov	r1, r8
 8007ba4:	1a51      	subs	r1, r2, r1
 8007ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ba8:	4649      	mov	r1, r9
 8007baa:	eb63 0301 	sbc.w	r3, r3, r1
 8007bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	00cb      	lsls	r3, r1, #3
 8007bc0:	4641      	mov	r1, r8
 8007bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bc6:	4641      	mov	r1, r8
 8007bc8:	00ca      	lsls	r2, r1, #3
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4603      	mov	r3, r0
 8007bd0:	4622      	mov	r2, r4
 8007bd2:	189b      	adds	r3, r3, r2
 8007bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8007bd6:	462b      	mov	r3, r5
 8007bd8:	460a      	mov	r2, r1
 8007bda:	eb42 0303 	adc.w	r3, r2, r3
 8007bde:	637b      	str	r3, [r7, #52]	; 0x34
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007bec:	4629      	mov	r1, r5
 8007bee:	024b      	lsls	r3, r1, #9
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	024a      	lsls	r2, r1, #9
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007c10:	f7f9 f8a2 	bl	8000d58 <__aeabi_uldivmod>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	4613      	mov	r3, r2
 8007c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c1e:	e067      	b.n	8007cf0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c20:	4b75      	ldr	r3, [pc, #468]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	099b      	lsrs	r3, r3, #6
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c2c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007c30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c38:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c3e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007c42:	4622      	mov	r2, r4
 8007c44:	462b      	mov	r3, r5
 8007c46:	f04f 0000 	mov.w	r0, #0
 8007c4a:	f04f 0100 	mov.w	r1, #0
 8007c4e:	0159      	lsls	r1, r3, #5
 8007c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c54:	0150      	lsls	r0, r2, #5
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	1a51      	subs	r1, r2, r1
 8007c5e:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c60:	4629      	mov	r1, r5
 8007c62:	eb63 0301 	sbc.w	r3, r3, r1
 8007c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c68:	f04f 0200 	mov.w	r2, #0
 8007c6c:	f04f 0300 	mov.w	r3, #0
 8007c70:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007c74:	4649      	mov	r1, r9
 8007c76:	018b      	lsls	r3, r1, #6
 8007c78:	4641      	mov	r1, r8
 8007c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c7e:	4641      	mov	r1, r8
 8007c80:	018a      	lsls	r2, r1, #6
 8007c82:	4641      	mov	r1, r8
 8007c84:	ebb2 0a01 	subs.w	sl, r2, r1
 8007c88:	4649      	mov	r1, r9
 8007c8a:	eb63 0b01 	sbc.w	fp, r3, r1
 8007c8e:	f04f 0200 	mov.w	r2, #0
 8007c92:	f04f 0300 	mov.w	r3, #0
 8007c96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c9a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ca2:	4692      	mov	sl, r2
 8007ca4:	469b      	mov	fp, r3
 8007ca6:	4623      	mov	r3, r4
 8007ca8:	eb1a 0303 	adds.w	r3, sl, r3
 8007cac:	623b      	str	r3, [r7, #32]
 8007cae:	462b      	mov	r3, r5
 8007cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007cb6:	f04f 0200 	mov.w	r2, #0
 8007cba:	f04f 0300 	mov.w	r3, #0
 8007cbe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	028b      	lsls	r3, r1, #10
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ccc:	4621      	mov	r1, r4
 8007cce:	028a      	lsls	r2, r1, #10
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cd8:	2200      	movs	r2, #0
 8007cda:	673b      	str	r3, [r7, #112]	; 0x70
 8007cdc:	677a      	str	r2, [r7, #116]	; 0x74
 8007cde:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007ce2:	f7f9 f839 	bl	8000d58 <__aeabi_uldivmod>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4613      	mov	r3, r2
 8007cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007cf0:	4b41      	ldr	r3, [pc, #260]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	0c1b      	lsrs	r3, r3, #16
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007d12:	e0eb      	b.n	8007eec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d14:	4b38      	ldr	r3, [pc, #224]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d20:	4b35      	ldr	r3, [pc, #212]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d06b      	beq.n	8007e04 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d2c:	4b32      	ldr	r3, [pc, #200]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	099b      	lsrs	r3, r3, #6
 8007d32:	2200      	movs	r2, #0
 8007d34:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3e:	663b      	str	r3, [r7, #96]	; 0x60
 8007d40:	2300      	movs	r3, #0
 8007d42:	667b      	str	r3, [r7, #100]	; 0x64
 8007d44:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007d48:	4622      	mov	r2, r4
 8007d4a:	462b      	mov	r3, r5
 8007d4c:	f04f 0000 	mov.w	r0, #0
 8007d50:	f04f 0100 	mov.w	r1, #0
 8007d54:	0159      	lsls	r1, r3, #5
 8007d56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d5a:	0150      	lsls	r0, r2, #5
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4621      	mov	r1, r4
 8007d62:	1a51      	subs	r1, r2, r1
 8007d64:	61b9      	str	r1, [r7, #24]
 8007d66:	4629      	mov	r1, r5
 8007d68:	eb63 0301 	sbc.w	r3, r3, r1
 8007d6c:	61fb      	str	r3, [r7, #28]
 8007d6e:	f04f 0200 	mov.w	r2, #0
 8007d72:	f04f 0300 	mov.w	r3, #0
 8007d76:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007d7a:	4659      	mov	r1, fp
 8007d7c:	018b      	lsls	r3, r1, #6
 8007d7e:	4651      	mov	r1, sl
 8007d80:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d84:	4651      	mov	r1, sl
 8007d86:	018a      	lsls	r2, r1, #6
 8007d88:	4651      	mov	r1, sl
 8007d8a:	ebb2 0801 	subs.w	r8, r2, r1
 8007d8e:	4659      	mov	r1, fp
 8007d90:	eb63 0901 	sbc.w	r9, r3, r1
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007da0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007da4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007da8:	4690      	mov	r8, r2
 8007daa:	4699      	mov	r9, r3
 8007dac:	4623      	mov	r3, r4
 8007dae:	eb18 0303 	adds.w	r3, r8, r3
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	462b      	mov	r3, r5
 8007db6:	eb49 0303 	adc.w	r3, r9, r3
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	f04f 0300 	mov.w	r3, #0
 8007dc4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007dc8:	4629      	mov	r1, r5
 8007dca:	024b      	lsls	r3, r1, #9
 8007dcc:	4621      	mov	r1, r4
 8007dce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	024a      	lsls	r2, r1, #9
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dde:	2200      	movs	r2, #0
 8007de0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007de2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007de4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007de8:	f7f8 ffb6 	bl	8000d58 <__aeabi_uldivmod>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4613      	mov	r3, r2
 8007df2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007df6:	e065      	b.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x420>
 8007df8:	40023800 	.word	0x40023800
 8007dfc:	00f42400 	.word	0x00f42400
 8007e00:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e04:	4b3d      	ldr	r3, [pc, #244]	; (8007efc <HAL_RCC_GetSysClockFreq+0x458>)
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	099b      	lsrs	r3, r3, #6
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	4611      	mov	r1, r2
 8007e10:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e14:	653b      	str	r3, [r7, #80]	; 0x50
 8007e16:	2300      	movs	r3, #0
 8007e18:	657b      	str	r3, [r7, #84]	; 0x54
 8007e1a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007e1e:	4642      	mov	r2, r8
 8007e20:	464b      	mov	r3, r9
 8007e22:	f04f 0000 	mov.w	r0, #0
 8007e26:	f04f 0100 	mov.w	r1, #0
 8007e2a:	0159      	lsls	r1, r3, #5
 8007e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e30:	0150      	lsls	r0, r2, #5
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4641      	mov	r1, r8
 8007e38:	1a51      	subs	r1, r2, r1
 8007e3a:	60b9      	str	r1, [r7, #8]
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007e50:	4659      	mov	r1, fp
 8007e52:	018b      	lsls	r3, r1, #6
 8007e54:	4651      	mov	r1, sl
 8007e56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e5a:	4651      	mov	r1, sl
 8007e5c:	018a      	lsls	r2, r1, #6
 8007e5e:	4651      	mov	r1, sl
 8007e60:	1a54      	subs	r4, r2, r1
 8007e62:	4659      	mov	r1, fp
 8007e64:	eb63 0501 	sbc.w	r5, r3, r1
 8007e68:	f04f 0200 	mov.w	r2, #0
 8007e6c:	f04f 0300 	mov.w	r3, #0
 8007e70:	00eb      	lsls	r3, r5, #3
 8007e72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e76:	00e2      	lsls	r2, r4, #3
 8007e78:	4614      	mov	r4, r2
 8007e7a:	461d      	mov	r5, r3
 8007e7c:	4643      	mov	r3, r8
 8007e7e:	18e3      	adds	r3, r4, r3
 8007e80:	603b      	str	r3, [r7, #0]
 8007e82:	464b      	mov	r3, r9
 8007e84:	eb45 0303 	adc.w	r3, r5, r3
 8007e88:	607b      	str	r3, [r7, #4]
 8007e8a:	f04f 0200 	mov.w	r2, #0
 8007e8e:	f04f 0300 	mov.w	r3, #0
 8007e92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e96:	4629      	mov	r1, r5
 8007e98:	028b      	lsls	r3, r1, #10
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ea0:	4621      	mov	r1, r4
 8007ea2:	028a      	lsls	r2, r1, #10
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007eac:	2200      	movs	r2, #0
 8007eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eb0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007eb2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007eb6:	f7f8 ff4f 	bl	8000d58 <__aeabi_uldivmod>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007ec4:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <HAL_RCC_GetSysClockFreq+0x458>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	0f1b      	lsrs	r3, r3, #28
 8007eca:	f003 0307 	and.w	r3, r3, #7
 8007ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007ed2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ed6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007ee2:	e003      	b.n	8007eec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ee4:	4b06      	ldr	r3, [pc, #24]	; (8007f00 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007eea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007eec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	37b8      	adds	r7, #184	; 0xb8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007efa:	bf00      	nop
 8007efc:	40023800 	.word	0x40023800
 8007f00:	00f42400 	.word	0x00f42400

08007f04 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e28d      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 8083 	beq.w	800802a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007f24:	4b94      	ldr	r3, [pc, #592]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f003 030c 	and.w	r3, r3, #12
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d019      	beq.n	8007f64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007f30:	4b91      	ldr	r3, [pc, #580]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d106      	bne.n	8007f4a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007f3c:	4b8e      	ldr	r3, [pc, #568]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f48:	d00c      	beq.n	8007f64 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f4a:	4b8b      	ldr	r3, [pc, #556]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007f52:	2b0c      	cmp	r3, #12
 8007f54:	d112      	bne.n	8007f7c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f56:	4b88      	ldr	r3, [pc, #544]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f62:	d10b      	bne.n	8007f7c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f64:	4b84      	ldr	r3, [pc, #528]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d05b      	beq.n	8008028 <HAL_RCC_OscConfig+0x124>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d157      	bne.n	8008028 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e25a      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f84:	d106      	bne.n	8007f94 <HAL_RCC_OscConfig+0x90>
 8007f86:	4b7c      	ldr	r3, [pc, #496]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a7b      	ldr	r2, [pc, #492]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f90:	6013      	str	r3, [r2, #0]
 8007f92:	e01d      	b.n	8007fd0 <HAL_RCC_OscConfig+0xcc>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f9c:	d10c      	bne.n	8007fb8 <HAL_RCC_OscConfig+0xb4>
 8007f9e:	4b76      	ldr	r3, [pc, #472]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a75      	ldr	r2, [pc, #468]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	4b73      	ldr	r3, [pc, #460]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a72      	ldr	r2, [pc, #456]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	e00b      	b.n	8007fd0 <HAL_RCC_OscConfig+0xcc>
 8007fb8:	4b6f      	ldr	r3, [pc, #444]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a6e      	ldr	r2, [pc, #440]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fc2:	6013      	str	r3, [r2, #0]
 8007fc4:	4b6c      	ldr	r3, [pc, #432]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a6b      	ldr	r2, [pc, #428]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d013      	beq.n	8008000 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd8:	f7fd f9f0 	bl	80053bc <HAL_GetTick>
 8007fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fde:	e008      	b.n	8007ff2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fe0:	f7fd f9ec 	bl	80053bc <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	2b64      	cmp	r3, #100	; 0x64
 8007fec:	d901      	bls.n	8007ff2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e21f      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ff2:	4b61      	ldr	r3, [pc, #388]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0f0      	beq.n	8007fe0 <HAL_RCC_OscConfig+0xdc>
 8007ffe:	e014      	b.n	800802a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008000:	f7fd f9dc 	bl	80053bc <HAL_GetTick>
 8008004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008006:	e008      	b.n	800801a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008008:	f7fd f9d8 	bl	80053bc <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b64      	cmp	r3, #100	; 0x64
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e20b      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800801a:	4b57      	ldr	r3, [pc, #348]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1f0      	bne.n	8008008 <HAL_RCC_OscConfig+0x104>
 8008026:	e000      	b.n	800802a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d06f      	beq.n	8008116 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008036:	4b50      	ldr	r3, [pc, #320]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f003 030c 	and.w	r3, r3, #12
 800803e:	2b00      	cmp	r3, #0
 8008040:	d017      	beq.n	8008072 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008042:	4b4d      	ldr	r3, [pc, #308]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800804a:	2b08      	cmp	r3, #8
 800804c:	d105      	bne.n	800805a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800804e:	4b4a      	ldr	r3, [pc, #296]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00b      	beq.n	8008072 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800805a:	4b47      	ldr	r3, [pc, #284]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008062:	2b0c      	cmp	r3, #12
 8008064:	d11c      	bne.n	80080a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008066:	4b44      	ldr	r3, [pc, #272]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d116      	bne.n	80080a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008072:	4b41      	ldr	r3, [pc, #260]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <HAL_RCC_OscConfig+0x186>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d001      	beq.n	800808a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e1d3      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800808a:	4b3b      	ldr	r3, [pc, #236]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	4937      	ldr	r1, [pc, #220]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 800809a:	4313      	orrs	r3, r2
 800809c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800809e:	e03a      	b.n	8008116 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d020      	beq.n	80080ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080a8:	4b34      	ldr	r3, [pc, #208]	; (800817c <HAL_RCC_OscConfig+0x278>)
 80080aa:	2201      	movs	r2, #1
 80080ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ae:	f7fd f985 	bl	80053bc <HAL_GetTick>
 80080b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080b4:	e008      	b.n	80080c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080b6:	f7fd f981 	bl	80053bc <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d901      	bls.n	80080c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e1b4      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080c8:	4b2b      	ldr	r3, [pc, #172]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d0f0      	beq.n	80080b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d4:	4b28      	ldr	r3, [pc, #160]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	4925      	ldr	r1, [pc, #148]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	600b      	str	r3, [r1, #0]
 80080e8:	e015      	b.n	8008116 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080ea:	4b24      	ldr	r3, [pc, #144]	; (800817c <HAL_RCC_OscConfig+0x278>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f0:	f7fd f964 	bl	80053bc <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080f8:	f7fd f960 	bl	80053bc <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e193      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800810a:	4b1b      	ldr	r3, [pc, #108]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1f0      	bne.n	80080f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0308 	and.w	r3, r3, #8
 800811e:	2b00      	cmp	r3, #0
 8008120:	d036      	beq.n	8008190 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d016      	beq.n	8008158 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800812a:	4b15      	ldr	r3, [pc, #84]	; (8008180 <HAL_RCC_OscConfig+0x27c>)
 800812c:	2201      	movs	r2, #1
 800812e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008130:	f7fd f944 	bl	80053bc <HAL_GetTick>
 8008134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008136:	e008      	b.n	800814a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008138:	f7fd f940 	bl	80053bc <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	2b02      	cmp	r3, #2
 8008144:	d901      	bls.n	800814a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e173      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800814a:	4b0b      	ldr	r3, [pc, #44]	; (8008178 <HAL_RCC_OscConfig+0x274>)
 800814c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f0      	beq.n	8008138 <HAL_RCC_OscConfig+0x234>
 8008156:	e01b      	b.n	8008190 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008158:	4b09      	ldr	r3, [pc, #36]	; (8008180 <HAL_RCC_OscConfig+0x27c>)
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800815e:	f7fd f92d 	bl	80053bc <HAL_GetTick>
 8008162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008164:	e00e      	b.n	8008184 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008166:	f7fd f929 	bl	80053bc <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	2b02      	cmp	r3, #2
 8008172:	d907      	bls.n	8008184 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e15c      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
 8008178:	40023800 	.word	0x40023800
 800817c:	42470000 	.word	0x42470000
 8008180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008184:	4b8a      	ldr	r3, [pc, #552]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 8008186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1ea      	bne.n	8008166 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0304 	and.w	r3, r3, #4
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 8097 	beq.w	80082cc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800819e:	2300      	movs	r3, #0
 80081a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081a2:	4b83      	ldr	r3, [pc, #524]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 80081a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10f      	bne.n	80081ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ae:	2300      	movs	r3, #0
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	4b7f      	ldr	r3, [pc, #508]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 80081b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b6:	4a7e      	ldr	r2, [pc, #504]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 80081b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081bc:	6413      	str	r3, [r2, #64]	; 0x40
 80081be:	4b7c      	ldr	r3, [pc, #496]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081c6:	60bb      	str	r3, [r7, #8]
 80081c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081ca:	2301      	movs	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ce:	4b79      	ldr	r3, [pc, #484]	; (80083b4 <HAL_RCC_OscConfig+0x4b0>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d118      	bne.n	800820c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081da:	4b76      	ldr	r3, [pc, #472]	; (80083b4 <HAL_RCC_OscConfig+0x4b0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a75      	ldr	r2, [pc, #468]	; (80083b4 <HAL_RCC_OscConfig+0x4b0>)
 80081e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081e6:	f7fd f8e9 	bl	80053bc <HAL_GetTick>
 80081ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ec:	e008      	b.n	8008200 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ee:	f7fd f8e5 	bl	80053bc <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d901      	bls.n	8008200 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e118      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008200:	4b6c      	ldr	r3, [pc, #432]	; (80083b4 <HAL_RCC_OscConfig+0x4b0>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0f0      	beq.n	80081ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d106      	bne.n	8008222 <HAL_RCC_OscConfig+0x31e>
 8008214:	4b66      	ldr	r3, [pc, #408]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 8008216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008218:	4a65      	ldr	r2, [pc, #404]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 800821a:	f043 0301 	orr.w	r3, r3, #1
 800821e:	6713      	str	r3, [r2, #112]	; 0x70
 8008220:	e01c      	b.n	800825c <HAL_RCC_OscConfig+0x358>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2b05      	cmp	r3, #5
 8008228:	d10c      	bne.n	8008244 <HAL_RCC_OscConfig+0x340>
 800822a:	4b61      	ldr	r3, [pc, #388]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 800822c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822e:	4a60      	ldr	r2, [pc, #384]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 8008230:	f043 0304 	orr.w	r3, r3, #4
 8008234:	6713      	str	r3, [r2, #112]	; 0x70
 8008236:	4b5e      	ldr	r3, [pc, #376]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 8008238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823a:	4a5d      	ldr	r2, [pc, #372]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 800823c:	f043 0301 	orr.w	r3, r3, #1
 8008240:	6713      	str	r3, [r2, #112]	; 0x70
 8008242:	e00b      	b.n	800825c <HAL_RCC_OscConfig+0x358>
 8008244:	4b5a      	ldr	r3, [pc, #360]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 8008246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008248:	4a59      	ldr	r2, [pc, #356]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 800824a:	f023 0301 	bic.w	r3, r3, #1
 800824e:	6713      	str	r3, [r2, #112]	; 0x70
 8008250:	4b57      	ldr	r3, [pc, #348]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 8008252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008254:	4a56      	ldr	r2, [pc, #344]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 8008256:	f023 0304 	bic.w	r3, r3, #4
 800825a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d015      	beq.n	8008290 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008264:	f7fd f8aa 	bl	80053bc <HAL_GetTick>
 8008268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800826a:	e00a      	b.n	8008282 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800826c:	f7fd f8a6 	bl	80053bc <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	f241 3288 	movw	r2, #5000	; 0x1388
 800827a:	4293      	cmp	r3, r2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e0d7      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008282:	4b4b      	ldr	r3, [pc, #300]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 8008284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0ee      	beq.n	800826c <HAL_RCC_OscConfig+0x368>
 800828e:	e014      	b.n	80082ba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008290:	f7fd f894 	bl	80053bc <HAL_GetTick>
 8008294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008296:	e00a      	b.n	80082ae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008298:	f7fd f890 	bl	80053bc <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d901      	bls.n	80082ae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e0c1      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082ae:	4b40      	ldr	r3, [pc, #256]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 80082b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1ee      	bne.n	8008298 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d105      	bne.n	80082cc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082c0:	4b3b      	ldr	r3, [pc, #236]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 80082c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c4:	4a3a      	ldr	r2, [pc, #232]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 80082c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 80ad 	beq.w	8008430 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082d6:	4b36      	ldr	r3, [pc, #216]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f003 030c 	and.w	r3, r3, #12
 80082de:	2b08      	cmp	r3, #8
 80082e0:	d060      	beq.n	80083a4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d145      	bne.n	8008376 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ea:	4b33      	ldr	r3, [pc, #204]	; (80083b8 <HAL_RCC_OscConfig+0x4b4>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f0:	f7fd f864 	bl	80053bc <HAL_GetTick>
 80082f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082f6:	e008      	b.n	800830a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082f8:	f7fd f860 	bl	80053bc <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	2b02      	cmp	r3, #2
 8008304:	d901      	bls.n	800830a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e093      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800830a:	4b29      	ldr	r3, [pc, #164]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1f0      	bne.n	80082f8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	69da      	ldr	r2, [r3, #28]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	431a      	orrs	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008324:	019b      	lsls	r3, r3, #6
 8008326:	431a      	orrs	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832c:	085b      	lsrs	r3, r3, #1
 800832e:	3b01      	subs	r3, #1
 8008330:	041b      	lsls	r3, r3, #16
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008338:	061b      	lsls	r3, r3, #24
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008340:	071b      	lsls	r3, r3, #28
 8008342:	491b      	ldr	r1, [pc, #108]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 8008344:	4313      	orrs	r3, r2
 8008346:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008348:	4b1b      	ldr	r3, [pc, #108]	; (80083b8 <HAL_RCC_OscConfig+0x4b4>)
 800834a:	2201      	movs	r2, #1
 800834c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834e:	f7fd f835 	bl	80053bc <HAL_GetTick>
 8008352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008354:	e008      	b.n	8008368 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008356:	f7fd f831 	bl	80053bc <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d901      	bls.n	8008368 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e064      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008368:	4b11      	ldr	r3, [pc, #68]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0f0      	beq.n	8008356 <HAL_RCC_OscConfig+0x452>
 8008374:	e05c      	b.n	8008430 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008376:	4b10      	ldr	r3, [pc, #64]	; (80083b8 <HAL_RCC_OscConfig+0x4b4>)
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837c:	f7fd f81e 	bl	80053bc <HAL_GetTick>
 8008380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008382:	e008      	b.n	8008396 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008384:	f7fd f81a 	bl	80053bc <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b02      	cmp	r3, #2
 8008390:	d901      	bls.n	8008396 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e04d      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008396:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <HAL_RCC_OscConfig+0x4ac>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f0      	bne.n	8008384 <HAL_RCC_OscConfig+0x480>
 80083a2:	e045      	b.n	8008430 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d107      	bne.n	80083bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e040      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
 80083b0:	40023800 	.word	0x40023800
 80083b4:	40007000 	.word	0x40007000
 80083b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083bc:	4b1f      	ldr	r3, [pc, #124]	; (800843c <HAL_RCC_OscConfig+0x538>)
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d030      	beq.n	800842c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d129      	bne.n	800842c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d122      	bne.n	800842c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80083ec:	4013      	ands	r3, r2
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80083f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d119      	bne.n	800842c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	085b      	lsrs	r3, r3, #1
 8008404:	3b01      	subs	r3, #1
 8008406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008408:	429a      	cmp	r2, r3
 800840a:	d10f      	bne.n	800842c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008418:	429a      	cmp	r2, r3
 800841a:	d107      	bne.n	800842c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008426:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008428:	429a      	cmp	r2, r3
 800842a:	d001      	beq.n	8008430 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e000      	b.n	8008432 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	40023800 	.word	0x40023800

08008440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e07b      	b.n	800854a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	2b00      	cmp	r3, #0
 8008458:	d108      	bne.n	800846c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008462:	d009      	beq.n	8008478 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	61da      	str	r2, [r3, #28]
 800846a:	e005      	b.n	8008478 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d106      	bne.n	8008498 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7fc fb6e 	bl	8004b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2202      	movs	r2, #2
 800849c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80084c0:	431a      	orrs	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	431a      	orrs	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	431a      	orrs	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084f2:	431a      	orrs	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fc:	ea42 0103 	orr.w	r1, r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008504:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	699b      	ldr	r3, [r3, #24]
 8008514:	0c1b      	lsrs	r3, r3, #16
 8008516:	f003 0104 	and.w	r1, r3, #4
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	f003 0210 	and.w	r2, r3, #16
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69da      	ldr	r2, [r3, #28]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008538:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b088      	sub	sp, #32
 8008556:	af00      	add	r7, sp, #0
 8008558:	60f8      	str	r0, [r7, #12]
 800855a:	60b9      	str	r1, [r7, #8]
 800855c:	603b      	str	r3, [r7, #0]
 800855e:	4613      	mov	r3, r2
 8008560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800856c:	2b01      	cmp	r3, #1
 800856e:	d101      	bne.n	8008574 <HAL_SPI_Transmit+0x22>
 8008570:	2302      	movs	r3, #2
 8008572:	e126      	b.n	80087c2 <HAL_SPI_Transmit+0x270>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800857c:	f7fc ff1e 	bl	80053bc <HAL_GetTick>
 8008580:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008582:	88fb      	ldrh	r3, [r7, #6]
 8008584:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b01      	cmp	r3, #1
 8008590:	d002      	beq.n	8008598 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008592:	2302      	movs	r3, #2
 8008594:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008596:	e10b      	b.n	80087b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <HAL_SPI_Transmit+0x52>
 800859e:	88fb      	ldrh	r3, [r7, #6]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d102      	bne.n	80085aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80085a8:	e102      	b.n	80087b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2203      	movs	r2, #3
 80085ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	88fa      	ldrh	r2, [r7, #6]
 80085c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	88fa      	ldrh	r2, [r7, #6]
 80085c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085f0:	d10f      	bne.n	8008612 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008600:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008610:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861c:	2b40      	cmp	r3, #64	; 0x40
 800861e:	d007      	beq.n	8008630 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800862e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008638:	d14b      	bne.n	80086d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <HAL_SPI_Transmit+0xf6>
 8008642:	8afb      	ldrh	r3, [r7, #22]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d13e      	bne.n	80086c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864c:	881a      	ldrh	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	1c9a      	adds	r2, r3, #2
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008662:	b29b      	uxth	r3, r3
 8008664:	3b01      	subs	r3, #1
 8008666:	b29a      	uxth	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800866c:	e02b      	b.n	80086c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b02      	cmp	r3, #2
 800867a:	d112      	bne.n	80086a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008680:	881a      	ldrh	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	1c9a      	adds	r2, r3, #2
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008696:	b29b      	uxth	r3, r3
 8008698:	3b01      	subs	r3, #1
 800869a:	b29a      	uxth	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	86da      	strh	r2, [r3, #54]	; 0x36
 80086a0:	e011      	b.n	80086c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086a2:	f7fc fe8b 	bl	80053bc <HAL_GetTick>
 80086a6:	4602      	mov	r2, r0
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d803      	bhi.n	80086ba <HAL_SPI_Transmit+0x168>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b8:	d102      	bne.n	80086c0 <HAL_SPI_Transmit+0x16e>
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d102      	bne.n	80086c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80086c4:	e074      	b.n	80087b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1ce      	bne.n	800866e <HAL_SPI_Transmit+0x11c>
 80086d0:	e04c      	b.n	800876c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <HAL_SPI_Transmit+0x18e>
 80086da:	8afb      	ldrh	r3, [r7, #22]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d140      	bne.n	8008762 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	330c      	adds	r3, #12
 80086ea:	7812      	ldrb	r2, [r2, #0]
 80086ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	3b01      	subs	r3, #1
 8008700:	b29a      	uxth	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008706:	e02c      	b.n	8008762 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b02      	cmp	r3, #2
 8008714:	d113      	bne.n	800873e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	330c      	adds	r3, #12
 8008720:	7812      	ldrb	r2, [r2, #0]
 8008722:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008732:	b29b      	uxth	r3, r3
 8008734:	3b01      	subs	r3, #1
 8008736:	b29a      	uxth	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	86da      	strh	r2, [r3, #54]	; 0x36
 800873c:	e011      	b.n	8008762 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800873e:	f7fc fe3d 	bl	80053bc <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d803      	bhi.n	8008756 <HAL_SPI_Transmit+0x204>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008754:	d102      	bne.n	800875c <HAL_SPI_Transmit+0x20a>
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d102      	bne.n	8008762 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008760:	e026      	b.n	80087b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008766:	b29b      	uxth	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1cd      	bne.n	8008708 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 fbcb 	bl	8008f0c <SPI_EndRxTxTransaction>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2220      	movs	r2, #32
 8008780:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10a      	bne.n	80087a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800878a:	2300      	movs	r3, #0
 800878c:	613b      	str	r3, [r7, #16]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	613b      	str	r3, [r7, #16]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	613b      	str	r3, [r7, #16]
 800879e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	77fb      	strb	r3, [r7, #31]
 80087ac:	e000      	b.n	80087b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80087ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80087c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3720      	adds	r7, #32
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b088      	sub	sp, #32
 80087ce:	af02      	add	r7, sp, #8
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	603b      	str	r3, [r7, #0]
 80087d6:	4613      	mov	r3, r2
 80087d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087e6:	d112      	bne.n	800880e <HAL_SPI_Receive+0x44>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10e      	bne.n	800880e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2204      	movs	r2, #4
 80087f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80087f8:	88fa      	ldrh	r2, [r7, #6]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	4613      	mov	r3, r2
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 f8f1 	bl	80089ec <HAL_SPI_TransmitReceive>
 800880a:	4603      	mov	r3, r0
 800880c:	e0ea      	b.n	80089e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008814:	2b01      	cmp	r3, #1
 8008816:	d101      	bne.n	800881c <HAL_SPI_Receive+0x52>
 8008818:	2302      	movs	r3, #2
 800881a:	e0e3      	b.n	80089e4 <HAL_SPI_Receive+0x21a>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008824:	f7fc fdca 	bl	80053bc <HAL_GetTick>
 8008828:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b01      	cmp	r3, #1
 8008834:	d002      	beq.n	800883c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008836:	2302      	movs	r3, #2
 8008838:	75fb      	strb	r3, [r7, #23]
    goto error;
 800883a:	e0ca      	b.n	80089d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d002      	beq.n	8008848 <HAL_SPI_Receive+0x7e>
 8008842:	88fb      	ldrh	r3, [r7, #6]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d102      	bne.n	800884e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800884c:	e0c1      	b.n	80089d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2204      	movs	r2, #4
 8008852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	88fa      	ldrh	r2, [r7, #6]
 8008866:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	88fa      	ldrh	r2, [r7, #6]
 800886c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008894:	d10f      	bne.n	80088b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80088b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c0:	2b40      	cmp	r3, #64	; 0x40
 80088c2:	d007      	beq.n	80088d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d162      	bne.n	80089a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80088dc:	e02e      	b.n	800893c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d115      	bne.n	8008918 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f103 020c 	add.w	r2, r3, #12
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f8:	7812      	ldrb	r2, [r2, #0]
 80088fa:	b2d2      	uxtb	r2, r2
 80088fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	1c5a      	adds	r2, r3, #1
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800890c:	b29b      	uxth	r3, r3
 800890e:	3b01      	subs	r3, #1
 8008910:	b29a      	uxth	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008916:	e011      	b.n	800893c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008918:	f7fc fd50 	bl	80053bc <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	429a      	cmp	r2, r3
 8008926:	d803      	bhi.n	8008930 <HAL_SPI_Receive+0x166>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892e:	d102      	bne.n	8008936 <HAL_SPI_Receive+0x16c>
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d102      	bne.n	800893c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	75fb      	strb	r3, [r7, #23]
          goto error;
 800893a:	e04a      	b.n	80089d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008940:	b29b      	uxth	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1cb      	bne.n	80088de <HAL_SPI_Receive+0x114>
 8008946:	e031      	b.n	80089ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b01      	cmp	r3, #1
 8008954:	d113      	bne.n	800897e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68da      	ldr	r2, [r3, #12]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008960:	b292      	uxth	r2, r2
 8008962:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008968:	1c9a      	adds	r2, r3, #2
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008972:	b29b      	uxth	r3, r3
 8008974:	3b01      	subs	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800897c:	e011      	b.n	80089a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800897e:	f7fc fd1d 	bl	80053bc <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	429a      	cmp	r2, r3
 800898c:	d803      	bhi.n	8008996 <HAL_SPI_Receive+0x1cc>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d102      	bne.n	800899c <HAL_SPI_Receive+0x1d2>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d102      	bne.n	80089a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80089a0:	e017      	b.n	80089d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1cd      	bne.n	8008948 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 fa45 	bl	8008e40 <SPI_EndRxTransaction>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2220      	movs	r2, #32
 80089c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	75fb      	strb	r3, [r7, #23]
 80089ce:	e000      	b.n	80089d2 <HAL_SPI_Receive+0x208>
  }

error :
 80089d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b08c      	sub	sp, #48	; 0x30
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80089fa:	2301      	movs	r3, #1
 80089fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d101      	bne.n	8008a12 <HAL_SPI_TransmitReceive+0x26>
 8008a0e:	2302      	movs	r3, #2
 8008a10:	e18a      	b.n	8008d28 <HAL_SPI_TransmitReceive+0x33c>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a1a:	f7fc fccf 	bl	80053bc <HAL_GetTick>
 8008a1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008a30:	887b      	ldrh	r3, [r7, #2]
 8008a32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d00f      	beq.n	8008a5c <HAL_SPI_TransmitReceive+0x70>
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a42:	d107      	bne.n	8008a54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d103      	bne.n	8008a54 <HAL_SPI_TransmitReceive+0x68>
 8008a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a50:	2b04      	cmp	r3, #4
 8008a52:	d003      	beq.n	8008a5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008a54:	2302      	movs	r3, #2
 8008a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008a5a:	e15b      	b.n	8008d14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d005      	beq.n	8008a6e <HAL_SPI_TransmitReceive+0x82>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <HAL_SPI_TransmitReceive+0x82>
 8008a68:	887b      	ldrh	r3, [r7, #2]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d103      	bne.n	8008a76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008a74:	e14e      	b.n	8008d14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d003      	beq.n	8008a8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2205      	movs	r2, #5
 8008a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	887a      	ldrh	r2, [r7, #2]
 8008a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	887a      	ldrh	r2, [r7, #2]
 8008aa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	887a      	ldrh	r2, [r7, #2]
 8008aac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	887a      	ldrh	r2, [r7, #2]
 8008ab2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aca:	2b40      	cmp	r3, #64	; 0x40
 8008acc:	d007      	beq.n	8008ade <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008adc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ae6:	d178      	bne.n	8008bda <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <HAL_SPI_TransmitReceive+0x10a>
 8008af0:	8b7b      	ldrh	r3, [r7, #26]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d166      	bne.n	8008bc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afa:	881a      	ldrh	r2, [r3, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	1c9a      	adds	r2, r3, #2
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	3b01      	subs	r3, #1
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b1a:	e053      	b.n	8008bc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d11b      	bne.n	8008b62 <HAL_SPI_TransmitReceive+0x176>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d016      	beq.n	8008b62 <HAL_SPI_TransmitReceive+0x176>
 8008b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d113      	bne.n	8008b62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3e:	881a      	ldrh	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4a:	1c9a      	adds	r2, r3, #2
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	3b01      	subs	r3, #1
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d119      	bne.n	8008ba4 <HAL_SPI_TransmitReceive+0x1b8>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d014      	beq.n	8008ba4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b84:	b292      	uxth	r2, r2
 8008b86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8c:	1c9a      	adds	r2, r3, #2
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ba4:	f7fc fc0a 	bl	80053bc <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d807      	bhi.n	8008bc4 <HAL_SPI_TransmitReceive+0x1d8>
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bba:	d003      	beq.n	8008bc4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008bc2:	e0a7      	b.n	8008d14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1a6      	bne.n	8008b1c <HAL_SPI_TransmitReceive+0x130>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1a1      	bne.n	8008b1c <HAL_SPI_TransmitReceive+0x130>
 8008bd8:	e07c      	b.n	8008cd4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <HAL_SPI_TransmitReceive+0x1fc>
 8008be2:	8b7b      	ldrh	r3, [r7, #26]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d16b      	bne.n	8008cc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	330c      	adds	r3, #12
 8008bf2:	7812      	ldrb	r2, [r2, #0]
 8008bf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bfa:	1c5a      	adds	r2, r3, #1
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	3b01      	subs	r3, #1
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c0e:	e057      	b.n	8008cc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d11c      	bne.n	8008c58 <HAL_SPI_TransmitReceive+0x26c>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d017      	beq.n	8008c58 <HAL_SPI_TransmitReceive+0x26c>
 8008c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d114      	bne.n	8008c58 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	330c      	adds	r3, #12
 8008c38:	7812      	ldrb	r2, [r2, #0]
 8008c3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c40:	1c5a      	adds	r2, r3, #1
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d119      	bne.n	8008c9a <HAL_SPI_TransmitReceive+0x2ae>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d014      	beq.n	8008c9a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68da      	ldr	r2, [r3, #12]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7a:	b2d2      	uxtb	r2, r2
 8008c7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c96:	2301      	movs	r3, #1
 8008c98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c9a:	f7fc fb8f 	bl	80053bc <HAL_GetTick>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d803      	bhi.n	8008cb2 <HAL_SPI_TransmitReceive+0x2c6>
 8008caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb0:	d102      	bne.n	8008cb8 <HAL_SPI_TransmitReceive+0x2cc>
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d103      	bne.n	8008cc0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008cbe:	e029      	b.n	8008d14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1a2      	bne.n	8008c10 <HAL_SPI_TransmitReceive+0x224>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d19d      	bne.n	8008c10 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 f917 	bl	8008f0c <SPI_EndRxTxTransaction>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d006      	beq.n	8008cf2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2220      	movs	r2, #32
 8008cee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008cf0:	e010      	b.n	8008d14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10b      	bne.n	8008d12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	617b      	str	r3, [r7, #20]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	617b      	str	r3, [r7, #20]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	617b      	str	r3, [r7, #20]
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	e000      	b.n	8008d14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008d12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3730      	adds	r7, #48	; 0x30
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	603b      	str	r3, [r7, #0]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d40:	f7fc fb3c 	bl	80053bc <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d48:	1a9b      	subs	r3, r3, r2
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d50:	f7fc fb34 	bl	80053bc <HAL_GetTick>
 8008d54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d56:	4b39      	ldr	r3, [pc, #228]	; (8008e3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	015b      	lsls	r3, r3, #5
 8008d5c:	0d1b      	lsrs	r3, r3, #20
 8008d5e:	69fa      	ldr	r2, [r7, #28]
 8008d60:	fb02 f303 	mul.w	r3, r2, r3
 8008d64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d66:	e054      	b.n	8008e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6e:	d050      	beq.n	8008e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d70:	f7fc fb24 	bl	80053bc <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	69fa      	ldr	r2, [r7, #28]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d902      	bls.n	8008d86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d13d      	bne.n	8008e02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d9e:	d111      	bne.n	8008dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008da8:	d004      	beq.n	8008db4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008db2:	d107      	bne.n	8008dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dcc:	d10f      	bne.n	8008dee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e017      	b.n	8008e32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	bf0c      	ite	eq
 8008e22:	2301      	moveq	r3, #1
 8008e24:	2300      	movne	r3, #0
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	461a      	mov	r2, r3
 8008e2a:	79fb      	ldrb	r3, [r7, #7]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d19b      	bne.n	8008d68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3720      	adds	r7, #32
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20000044 	.word	0x20000044

08008e40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e54:	d111      	bne.n	8008e7a <SPI_EndRxTransaction+0x3a>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e5e:	d004      	beq.n	8008e6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e68:	d107      	bne.n	8008e7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e82:	d12a      	bne.n	8008eda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e8c:	d012      	beq.n	8008eb4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2200      	movs	r2, #0
 8008e96:	2180      	movs	r1, #128	; 0x80
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f7ff ff49 	bl	8008d30 <SPI_WaitFlagStateUntilTimeout>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d02d      	beq.n	8008f00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea8:	f043 0220 	orr.w	r2, r3, #32
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e026      	b.n	8008f02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f7ff ff36 	bl	8008d30 <SPI_WaitFlagStateUntilTimeout>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d01a      	beq.n	8008f00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ece:	f043 0220 	orr.w	r2, r3, #32
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e013      	b.n	8008f02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff ff23 	bl	8008d30 <SPI_WaitFlagStateUntilTimeout>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d007      	beq.n	8008f00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef4:	f043 0220 	orr.w	r2, r3, #32
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008efc:	2303      	movs	r3, #3
 8008efe:	e000      	b.n	8008f02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
	...

08008f0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b088      	sub	sp, #32
 8008f10:	af02      	add	r7, sp, #8
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008f18:	4b1b      	ldr	r3, [pc, #108]	; (8008f88 <SPI_EndRxTxTransaction+0x7c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a1b      	ldr	r2, [pc, #108]	; (8008f8c <SPI_EndRxTxTransaction+0x80>)
 8008f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f22:	0d5b      	lsrs	r3, r3, #21
 8008f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f28:	fb02 f303 	mul.w	r3, r2, r3
 8008f2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f36:	d112      	bne.n	8008f5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2180      	movs	r1, #128	; 0x80
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f7ff fef4 	bl	8008d30 <SPI_WaitFlagStateUntilTimeout>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d016      	beq.n	8008f7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f52:	f043 0220 	orr.w	r2, r3, #32
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e00f      	b.n	8008f7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00a      	beq.n	8008f7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	3b01      	subs	r3, #1
 8008f68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f74:	2b80      	cmp	r3, #128	; 0x80
 8008f76:	d0f2      	beq.n	8008f5e <SPI_EndRxTxTransaction+0x52>
 8008f78:	e000      	b.n	8008f7c <SPI_EndRxTxTransaction+0x70>
        break;
 8008f7a:	bf00      	nop
  }

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20000044 	.word	0x20000044
 8008f8c:	165e9f81 	.word	0x165e9f81

08008f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e041      	b.n	8009026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7fb fe24 	bl	8004c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	3304      	adds	r3, #4
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4610      	mov	r0, r2
 8008fd0:	f000 f9fe 	bl	80093d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b01      	cmp	r3, #1
 8009042:	d001      	beq.n	8009048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e04e      	b.n	80090e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2202      	movs	r2, #2
 800904c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68da      	ldr	r2, [r3, #12]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0201 	orr.w	r2, r2, #1
 800905e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a23      	ldr	r2, [pc, #140]	; (80090f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d022      	beq.n	80090b0 <HAL_TIM_Base_Start_IT+0x80>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009072:	d01d      	beq.n	80090b0 <HAL_TIM_Base_Start_IT+0x80>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a1f      	ldr	r2, [pc, #124]	; (80090f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d018      	beq.n	80090b0 <HAL_TIM_Base_Start_IT+0x80>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a1e      	ldr	r2, [pc, #120]	; (80090fc <HAL_TIM_Base_Start_IT+0xcc>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d013      	beq.n	80090b0 <HAL_TIM_Base_Start_IT+0x80>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a1c      	ldr	r2, [pc, #112]	; (8009100 <HAL_TIM_Base_Start_IT+0xd0>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d00e      	beq.n	80090b0 <HAL_TIM_Base_Start_IT+0x80>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a1b      	ldr	r2, [pc, #108]	; (8009104 <HAL_TIM_Base_Start_IT+0xd4>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d009      	beq.n	80090b0 <HAL_TIM_Base_Start_IT+0x80>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a19      	ldr	r2, [pc, #100]	; (8009108 <HAL_TIM_Base_Start_IT+0xd8>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d004      	beq.n	80090b0 <HAL_TIM_Base_Start_IT+0x80>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a18      	ldr	r2, [pc, #96]	; (800910c <HAL_TIM_Base_Start_IT+0xdc>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d111      	bne.n	80090d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 0307 	and.w	r3, r3, #7
 80090ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2b06      	cmp	r3, #6
 80090c0:	d010      	beq.n	80090e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0201 	orr.w	r2, r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d2:	e007      	b.n	80090e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	40010000 	.word	0x40010000
 80090f8:	40000400 	.word	0x40000400
 80090fc:	40000800 	.word	0x40000800
 8009100:	40000c00 	.word	0x40000c00
 8009104:	40010400 	.word	0x40010400
 8009108:	40014000 	.word	0x40014000
 800910c:	40001800 	.word	0x40001800

08009110 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68da      	ldr	r2, [r3, #12]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 0201 	bic.w	r2, r2, #1
 8009126:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6a1a      	ldr	r2, [r3, #32]
 800912e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009132:	4013      	ands	r3, r2
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10f      	bne.n	8009158 <HAL_TIM_Base_Stop_IT+0x48>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6a1a      	ldr	r2, [r3, #32]
 800913e:	f240 4344 	movw	r3, #1092	; 0x444
 8009142:	4013      	ands	r3, r2
 8009144:	2b00      	cmp	r3, #0
 8009146:	d107      	bne.n	8009158 <HAL_TIM_Base_Stop_IT+0x48>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f022 0201 	bic.w	r2, r2, #1
 8009156:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	370c      	adds	r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	f003 0302 	and.w	r3, r3, #2
 8009180:	2b02      	cmp	r3, #2
 8009182:	d122      	bne.n	80091ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b02      	cmp	r3, #2
 8009190:	d11b      	bne.n	80091ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f06f 0202 	mvn.w	r2, #2
 800919a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	f003 0303 	and.w	r3, r3, #3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f8ee 	bl	8009392 <HAL_TIM_IC_CaptureCallback>
 80091b6:	e005      	b.n	80091c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f8e0 	bl	800937e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f8f1 	bl	80093a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	f003 0304 	and.w	r3, r3, #4
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	d122      	bne.n	800921e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f003 0304 	and.w	r3, r3, #4
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d11b      	bne.n	800921e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f06f 0204 	mvn.w	r2, #4
 80091ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f8c4 	bl	8009392 <HAL_TIM_IC_CaptureCallback>
 800920a:	e005      	b.n	8009218 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f8b6 	bl	800937e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f8c7 	bl	80093a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	f003 0308 	and.w	r3, r3, #8
 8009228:	2b08      	cmp	r3, #8
 800922a:	d122      	bne.n	8009272 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f003 0308 	and.w	r3, r3, #8
 8009236:	2b08      	cmp	r3, #8
 8009238:	d11b      	bne.n	8009272 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f06f 0208 	mvn.w	r2, #8
 8009242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2204      	movs	r2, #4
 8009248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	f003 0303 	and.w	r3, r3, #3
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f89a 	bl	8009392 <HAL_TIM_IC_CaptureCallback>
 800925e:	e005      	b.n	800926c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f88c 	bl	800937e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f89d 	bl	80093a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	f003 0310 	and.w	r3, r3, #16
 800927c:	2b10      	cmp	r3, #16
 800927e:	d122      	bne.n	80092c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	f003 0310 	and.w	r3, r3, #16
 800928a:	2b10      	cmp	r3, #16
 800928c:	d11b      	bne.n	80092c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f06f 0210 	mvn.w	r2, #16
 8009296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2208      	movs	r2, #8
 800929c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f870 	bl	8009392 <HAL_TIM_IC_CaptureCallback>
 80092b2:	e005      	b.n	80092c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f862 	bl	800937e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f873 	bl	80093a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d10e      	bne.n	80092f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d107      	bne.n	80092f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f06f 0201 	mvn.w	r2, #1
 80092ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7fa fadd 	bl	80038ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092fc:	2b80      	cmp	r3, #128	; 0x80
 80092fe:	d10e      	bne.n	800931e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930a:	2b80      	cmp	r3, #128	; 0x80
 800930c:	d107      	bne.n	800931e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f97f 	bl	800961c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009328:	2b40      	cmp	r3, #64	; 0x40
 800932a:	d10e      	bne.n	800934a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009336:	2b40      	cmp	r3, #64	; 0x40
 8009338:	d107      	bne.n	800934a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f838 	bl	80093ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	f003 0320 	and.w	r3, r3, #32
 8009354:	2b20      	cmp	r3, #32
 8009356:	d10e      	bne.n	8009376 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	f003 0320 	and.w	r3, r3, #32
 8009362:	2b20      	cmp	r3, #32
 8009364:	d107      	bne.n	8009376 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f06f 0220 	mvn.w	r2, #32
 800936e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f949 	bl	8009608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009386:	bf00      	nop
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b083      	sub	sp, #12
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093ae:	bf00      	nop
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093c2:	bf00      	nop
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
	...

080093d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a40      	ldr	r2, [pc, #256]	; (80094e4 <TIM_Base_SetConfig+0x114>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d013      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ee:	d00f      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a3d      	ldr	r2, [pc, #244]	; (80094e8 <TIM_Base_SetConfig+0x118>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d00b      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a3c      	ldr	r2, [pc, #240]	; (80094ec <TIM_Base_SetConfig+0x11c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d007      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a3b      	ldr	r2, [pc, #236]	; (80094f0 <TIM_Base_SetConfig+0x120>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d003      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a3a      	ldr	r2, [pc, #232]	; (80094f4 <TIM_Base_SetConfig+0x124>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d108      	bne.n	8009422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4313      	orrs	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a2f      	ldr	r2, [pc, #188]	; (80094e4 <TIM_Base_SetConfig+0x114>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d02b      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009430:	d027      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a2c      	ldr	r2, [pc, #176]	; (80094e8 <TIM_Base_SetConfig+0x118>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d023      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a2b      	ldr	r2, [pc, #172]	; (80094ec <TIM_Base_SetConfig+0x11c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d01f      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a2a      	ldr	r2, [pc, #168]	; (80094f0 <TIM_Base_SetConfig+0x120>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d01b      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a29      	ldr	r2, [pc, #164]	; (80094f4 <TIM_Base_SetConfig+0x124>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d017      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a28      	ldr	r2, [pc, #160]	; (80094f8 <TIM_Base_SetConfig+0x128>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d013      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a27      	ldr	r2, [pc, #156]	; (80094fc <TIM_Base_SetConfig+0x12c>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d00f      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a26      	ldr	r2, [pc, #152]	; (8009500 <TIM_Base_SetConfig+0x130>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d00b      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a25      	ldr	r2, [pc, #148]	; (8009504 <TIM_Base_SetConfig+0x134>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d007      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a24      	ldr	r2, [pc, #144]	; (8009508 <TIM_Base_SetConfig+0x138>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d003      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a23      	ldr	r2, [pc, #140]	; (800950c <TIM_Base_SetConfig+0x13c>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d108      	bne.n	8009494 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	4313      	orrs	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	4313      	orrs	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a0a      	ldr	r2, [pc, #40]	; (80094e4 <TIM_Base_SetConfig+0x114>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d003      	beq.n	80094c8 <TIM_Base_SetConfig+0xf8>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a0c      	ldr	r2, [pc, #48]	; (80094f4 <TIM_Base_SetConfig+0x124>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d103      	bne.n	80094d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	691a      	ldr	r2, [r3, #16]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	615a      	str	r2, [r3, #20]
}
 80094d6:	bf00      	nop
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	40010000 	.word	0x40010000
 80094e8:	40000400 	.word	0x40000400
 80094ec:	40000800 	.word	0x40000800
 80094f0:	40000c00 	.word	0x40000c00
 80094f4:	40010400 	.word	0x40010400
 80094f8:	40014000 	.word	0x40014000
 80094fc:	40014400 	.word	0x40014400
 8009500:	40014800 	.word	0x40014800
 8009504:	40001800 	.word	0x40001800
 8009508:	40001c00 	.word	0x40001c00
 800950c:	40002000 	.word	0x40002000

08009510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009520:	2b01      	cmp	r3, #1
 8009522:	d101      	bne.n	8009528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009524:	2302      	movs	r3, #2
 8009526:	e05a      	b.n	80095de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2202      	movs	r2, #2
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800954e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	4313      	orrs	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a21      	ldr	r2, [pc, #132]	; (80095ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d022      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009574:	d01d      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a1d      	ldr	r2, [pc, #116]	; (80095f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d018      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a1b      	ldr	r2, [pc, #108]	; (80095f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d013      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a1a      	ldr	r2, [pc, #104]	; (80095f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00e      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a18      	ldr	r2, [pc, #96]	; (80095fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d009      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a17      	ldr	r2, [pc, #92]	; (8009600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d004      	beq.n	80095b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a15      	ldr	r2, [pc, #84]	; (8009604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d10c      	bne.n	80095cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	40010000 	.word	0x40010000
 80095f0:	40000400 	.word	0x40000400
 80095f4:	40000800 	.word	0x40000800
 80095f8:	40000c00 	.word	0x40000c00
 80095fc:	40010400 	.word	0x40010400
 8009600:	40014000 	.word	0x40014000
 8009604:	40001800 	.word	0x40001800

08009608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e03f      	b.n	80096c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d106      	bne.n	800965c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7fb fb56 	bl	8004d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2224      	movs	r2, #36	; 0x24
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fddf 	bl	800a238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	691a      	ldr	r2, [r3, #16]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	695a      	ldr	r2, [r3, #20]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68da      	ldr	r2, [r3, #12]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2220      	movs	r2, #32
 80096b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2220      	movs	r2, #32
 80096bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b08a      	sub	sp, #40	; 0x28
 80096ce:	af02      	add	r7, sp, #8
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	60b9      	str	r1, [r7, #8]
 80096d4:	603b      	str	r3, [r7, #0]
 80096d6:	4613      	mov	r3, r2
 80096d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	d17c      	bne.n	80097e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d002      	beq.n	80096f6 <HAL_UART_Transmit+0x2c>
 80096f0:	88fb      	ldrh	r3, [r7, #6]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e075      	b.n	80097e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009700:	2b01      	cmp	r3, #1
 8009702:	d101      	bne.n	8009708 <HAL_UART_Transmit+0x3e>
 8009704:	2302      	movs	r3, #2
 8009706:	e06e      	b.n	80097e6 <HAL_UART_Transmit+0x11c>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2221      	movs	r2, #33	; 0x21
 800971a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800971e:	f7fb fe4d 	bl	80053bc <HAL_GetTick>
 8009722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	88fa      	ldrh	r2, [r7, #6]
 8009728:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	88fa      	ldrh	r2, [r7, #6]
 800972e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009738:	d108      	bne.n	800974c <HAL_UART_Transmit+0x82>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d104      	bne.n	800974c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009742:	2300      	movs	r3, #0
 8009744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	61bb      	str	r3, [r7, #24]
 800974a:	e003      	b.n	8009754 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009750:	2300      	movs	r3, #0
 8009752:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800975c:	e02a      	b.n	80097b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	2200      	movs	r2, #0
 8009766:	2180      	movs	r1, #128	; 0x80
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f000 fb1f 	bl	8009dac <UART_WaitOnFlagUntilTimeout>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009774:	2303      	movs	r3, #3
 8009776:	e036      	b.n	80097e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10b      	bne.n	8009796 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800978c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	3302      	adds	r3, #2
 8009792:	61bb      	str	r3, [r7, #24]
 8009794:	e007      	b.n	80097a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	781a      	ldrb	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	3301      	adds	r3, #1
 80097a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	3b01      	subs	r3, #1
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1cf      	bne.n	800975e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	2200      	movs	r2, #0
 80097c6:	2140      	movs	r1, #64	; 0x40
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 faef 	bl	8009dac <UART_WaitOnFlagUntilTimeout>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e006      	b.n	80097e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2220      	movs	r2, #32
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	e000      	b.n	80097e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80097e4:	2302      	movs	r3, #2
  }
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3720      	adds	r7, #32
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	4613      	mov	r3, r2
 80097fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b20      	cmp	r3, #32
 8009806:	d11d      	bne.n	8009844 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d002      	beq.n	8009814 <HAL_UART_Receive_IT+0x26>
 800980e:	88fb      	ldrh	r3, [r7, #6]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e016      	b.n	8009846 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800981e:	2b01      	cmp	r3, #1
 8009820:	d101      	bne.n	8009826 <HAL_UART_Receive_IT+0x38>
 8009822:	2302      	movs	r3, #2
 8009824:	e00f      	b.n	8009846 <HAL_UART_Receive_IT+0x58>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009834:	88fb      	ldrh	r3, [r7, #6]
 8009836:	461a      	mov	r2, r3
 8009838:	68b9      	ldr	r1, [r7, #8]
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f000 fb24 	bl	8009e88 <UART_Start_Receive_IT>
 8009840:	4603      	mov	r3, r0
 8009842:	e000      	b.n	8009846 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009844:	2302      	movs	r3, #2
  }
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b0ba      	sub	sp, #232	; 0xe8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009876:	2300      	movs	r3, #0
 8009878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800987c:	2300      	movs	r3, #0
 800987e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009886:	f003 030f 	and.w	r3, r3, #15
 800988a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800988e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10f      	bne.n	80098b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800989a:	f003 0320 	and.w	r3, r3, #32
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d009      	beq.n	80098b6 <HAL_UART_IRQHandler+0x66>
 80098a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a6:	f003 0320 	and.w	r3, r3, #32
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d003      	beq.n	80098b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fc07 	bl	800a0c2 <UART_Receive_IT>
      return;
 80098b4:	e256      	b.n	8009d64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80098b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 80de 	beq.w	8009a7c <HAL_UART_IRQHandler+0x22c>
 80098c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098c4:	f003 0301 	and.w	r3, r3, #1
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d106      	bne.n	80098da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80098cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 80d1 	beq.w	8009a7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80098da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00b      	beq.n	80098fe <HAL_UART_IRQHandler+0xae>
 80098e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d005      	beq.n	80098fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f6:	f043 0201 	orr.w	r2, r3, #1
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80098fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009902:	f003 0304 	and.w	r3, r3, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00b      	beq.n	8009922 <HAL_UART_IRQHandler+0xd2>
 800990a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d005      	beq.n	8009922 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991a:	f043 0202 	orr.w	r2, r3, #2
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009926:	f003 0302 	and.w	r3, r3, #2
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00b      	beq.n	8009946 <HAL_UART_IRQHandler+0xf6>
 800992e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009932:	f003 0301 	and.w	r3, r3, #1
 8009936:	2b00      	cmp	r3, #0
 8009938:	d005      	beq.n	8009946 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	f043 0204 	orr.w	r2, r3, #4
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800994a:	f003 0308 	and.w	r3, r3, #8
 800994e:	2b00      	cmp	r3, #0
 8009950:	d011      	beq.n	8009976 <HAL_UART_IRQHandler+0x126>
 8009952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b00      	cmp	r3, #0
 800995c:	d105      	bne.n	800996a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800995e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009962:	f003 0301 	and.w	r3, r3, #1
 8009966:	2b00      	cmp	r3, #0
 8009968:	d005      	beq.n	8009976 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996e:	f043 0208 	orr.w	r2, r3, #8
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 81ed 	beq.w	8009d5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009984:	f003 0320 	and.w	r3, r3, #32
 8009988:	2b00      	cmp	r3, #0
 800998a:	d008      	beq.n	800999e <HAL_UART_IRQHandler+0x14e>
 800998c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009990:	f003 0320 	and.w	r3, r3, #32
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fb92 	bl	800a0c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a8:	2b40      	cmp	r3, #64	; 0x40
 80099aa:	bf0c      	ite	eq
 80099ac:	2301      	moveq	r3, #1
 80099ae:	2300      	movne	r3, #0
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	f003 0308 	and.w	r3, r3, #8
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d103      	bne.n	80099ca <HAL_UART_IRQHandler+0x17a>
 80099c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d04f      	beq.n	8009a6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fa9a 	bl	8009f04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099da:	2b40      	cmp	r3, #64	; 0x40
 80099dc:	d141      	bne.n	8009a62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3314      	adds	r3, #20
 80099e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099ec:	e853 3f00 	ldrex	r3, [r3]
 80099f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80099f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3314      	adds	r3, #20
 8009a06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009a0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009a16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009a1a:	e841 2300 	strex	r3, r2, [r1]
 8009a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1d9      	bne.n	80099de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d013      	beq.n	8009a5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a36:	4a7d      	ldr	r2, [pc, #500]	; (8009c2c <HAL_UART_IRQHandler+0x3dc>)
 8009a38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fc f8df 	bl	8005c02 <HAL_DMA_Abort_IT>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d016      	beq.n	8009a78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009a54:	4610      	mov	r0, r2
 8009a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a58:	e00e      	b.n	8009a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f990 	bl	8009d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a60:	e00a      	b.n	8009a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f98c 	bl	8009d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a68:	e006      	b.n	8009a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f988 	bl	8009d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009a76:	e170      	b.n	8009d5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a78:	bf00      	nop
    return;
 8009a7a:	e16e      	b.n	8009d5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	f040 814a 	bne.w	8009d1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a8a:	f003 0310 	and.w	r3, r3, #16
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f000 8143 	beq.w	8009d1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a98:	f003 0310 	and.w	r3, r3, #16
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 813c 	beq.w	8009d1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	60bb      	str	r3, [r7, #8]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	60bb      	str	r3, [r7, #8]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	60bb      	str	r3, [r7, #8]
 8009ab6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac2:	2b40      	cmp	r3, #64	; 0x40
 8009ac4:	f040 80b4 	bne.w	8009c30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ad4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 8140 	beq.w	8009d5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	f080 8139 	bcs.w	8009d5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009af2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af8:	69db      	ldr	r3, [r3, #28]
 8009afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009afe:	f000 8088 	beq.w	8009c12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	330c      	adds	r3, #12
 8009b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b10:	e853 3f00 	ldrex	r3, [r3]
 8009b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	330c      	adds	r3, #12
 8009b2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009b2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b3e:	e841 2300 	strex	r3, r2, [r1]
 8009b42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1d9      	bne.n	8009b02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3314      	adds	r3, #20
 8009b54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b58:	e853 3f00 	ldrex	r3, [r3]
 8009b5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b60:	f023 0301 	bic.w	r3, r3, #1
 8009b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3314      	adds	r3, #20
 8009b6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009b7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b7e:	e841 2300 	strex	r3, r2, [r1]
 8009b82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1e1      	bne.n	8009b4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3314      	adds	r3, #20
 8009b90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b94:	e853 3f00 	ldrex	r3, [r3]
 8009b98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3314      	adds	r3, #20
 8009baa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009bae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009bb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009bb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009bb6:	e841 2300 	strex	r3, r2, [r1]
 8009bba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1e3      	bne.n	8009b8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	330c      	adds	r3, #12
 8009bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bda:	e853 3f00 	ldrex	r3, [r3]
 8009bde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009be2:	f023 0310 	bic.w	r3, r3, #16
 8009be6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	330c      	adds	r3, #12
 8009bf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009bf4:	65ba      	str	r2, [r7, #88]	; 0x58
 8009bf6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009bfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e3      	bne.n	8009bd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fb ff88 	bl	8005b22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f8b6 	bl	8009d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c28:	e099      	b.n	8009d5e <HAL_UART_IRQHandler+0x50e>
 8009c2a:	bf00      	nop
 8009c2c:	08009fcb 	.word	0x08009fcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 808b 	beq.w	8009d62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009c4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 8086 	beq.w	8009d62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	330c      	adds	r3, #12
 8009c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c60:	e853 3f00 	ldrex	r3, [r3]
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	330c      	adds	r3, #12
 8009c76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009c7a:	647a      	str	r2, [r7, #68]	; 0x44
 8009c7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1e3      	bne.n	8009c56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3314      	adds	r3, #20
 8009c94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	e853 3f00 	ldrex	r3, [r3]
 8009c9c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	f023 0301 	bic.w	r3, r3, #1
 8009ca4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	3314      	adds	r3, #20
 8009cae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009cb2:	633a      	str	r2, [r7, #48]	; 0x30
 8009cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cba:	e841 2300 	strex	r3, r2, [r1]
 8009cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1e3      	bne.n	8009c8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	330c      	adds	r3, #12
 8009cda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	e853 3f00 	ldrex	r3, [r3]
 8009ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f023 0310 	bic.w	r3, r3, #16
 8009cea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	330c      	adds	r3, #12
 8009cf4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009cf8:	61fa      	str	r2, [r7, #28]
 8009cfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfc:	69b9      	ldr	r1, [r7, #24]
 8009cfe:	69fa      	ldr	r2, [r7, #28]
 8009d00:	e841 2300 	strex	r3, r2, [r1]
 8009d04:	617b      	str	r3, [r7, #20]
   return(result);
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e3      	bne.n	8009cd4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f83e 	bl	8009d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d18:	e023      	b.n	8009d62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d009      	beq.n	8009d3a <HAL_UART_IRQHandler+0x4ea>
 8009d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f95d 	bl	8009ff2 <UART_Transmit_IT>
    return;
 8009d38:	e014      	b.n	8009d64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00e      	beq.n	8009d64 <HAL_UART_IRQHandler+0x514>
 8009d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d008      	beq.n	8009d64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f99d 	bl	800a092 <UART_EndTransmit_IT>
    return;
 8009d58:	e004      	b.n	8009d64 <HAL_UART_IRQHandler+0x514>
    return;
 8009d5a:	bf00      	nop
 8009d5c:	e002      	b.n	8009d64 <HAL_UART_IRQHandler+0x514>
      return;
 8009d5e:	bf00      	nop
 8009d60:	e000      	b.n	8009d64 <HAL_UART_IRQHandler+0x514>
      return;
 8009d62:	bf00      	nop
  }
}
 8009d64:	37e8      	adds	r7, #232	; 0xe8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop

08009d6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b090      	sub	sp, #64	; 0x40
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	4613      	mov	r3, r2
 8009dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dbc:	e050      	b.n	8009e60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc4:	d04c      	beq.n	8009e60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d007      	beq.n	8009ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8009dcc:	f7fb faf6 	bl	80053bc <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d241      	bcs.n	8009e60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	330c      	adds	r3, #12
 8009de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	e853 3f00 	ldrex	r3, [r3]
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	330c      	adds	r3, #12
 8009dfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009dfc:	637a      	str	r2, [r7, #52]	; 0x34
 8009dfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e04:	e841 2300 	strex	r3, r2, [r1]
 8009e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1e5      	bne.n	8009ddc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3314      	adds	r3, #20
 8009e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	e853 3f00 	ldrex	r3, [r3]
 8009e1e:	613b      	str	r3, [r7, #16]
   return(result);
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f023 0301 	bic.w	r3, r3, #1
 8009e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3314      	adds	r3, #20
 8009e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e30:	623a      	str	r2, [r7, #32]
 8009e32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e34:	69f9      	ldr	r1, [r7, #28]
 8009e36:	6a3a      	ldr	r2, [r7, #32]
 8009e38:	e841 2300 	strex	r3, r2, [r1]
 8009e3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1e5      	bne.n	8009e10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2220      	movs	r2, #32
 8009e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2220      	movs	r2, #32
 8009e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e00f      	b.n	8009e80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	4013      	ands	r3, r2
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	bf0c      	ite	eq
 8009e70:	2301      	moveq	r3, #1
 8009e72:	2300      	movne	r3, #0
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	461a      	mov	r2, r3
 8009e78:	79fb      	ldrb	r3, [r7, #7]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d09f      	beq.n	8009dbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3740      	adds	r7, #64	; 0x40
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	4613      	mov	r3, r2
 8009e94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	88fa      	ldrh	r2, [r7, #6]
 8009ea0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	88fa      	ldrh	r2, [r7, #6]
 8009ea6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2222      	movs	r2, #34	; 0x22
 8009eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d007      	beq.n	8009ed6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68da      	ldr	r2, [r3, #12]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ed4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	695a      	ldr	r2, [r3, #20]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f042 0201 	orr.w	r2, r2, #1
 8009ee4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68da      	ldr	r2, [r3, #12]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f042 0220 	orr.w	r2, r2, #32
 8009ef4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b095      	sub	sp, #84	; 0x54
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	330c      	adds	r3, #12
 8009f12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f16:	e853 3f00 	ldrex	r3, [r3]
 8009f1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	330c      	adds	r3, #12
 8009f2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f2c:	643a      	str	r2, [r7, #64]	; 0x40
 8009f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f34:	e841 2300 	strex	r3, r2, [r1]
 8009f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1e5      	bne.n	8009f0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3314      	adds	r3, #20
 8009f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	f023 0301 	bic.w	r3, r3, #1
 8009f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3314      	adds	r3, #20
 8009f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e5      	bne.n	8009f40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d119      	bne.n	8009fb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	330c      	adds	r3, #12
 8009f82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	e853 3f00 	ldrex	r3, [r3]
 8009f8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	f023 0310 	bic.w	r3, r3, #16
 8009f92:	647b      	str	r3, [r7, #68]	; 0x44
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	330c      	adds	r3, #12
 8009f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f9c:	61ba      	str	r2, [r7, #24]
 8009f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa0:	6979      	ldr	r1, [r7, #20]
 8009fa2:	69ba      	ldr	r2, [r7, #24]
 8009fa4:	e841 2300 	strex	r3, r2, [r1]
 8009fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1e5      	bne.n	8009f7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2220      	movs	r2, #32
 8009fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009fbe:	bf00      	nop
 8009fc0:	3754      	adds	r7, #84	; 0x54
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b084      	sub	sp, #16
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f7ff fecb 	bl	8009d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fea:	bf00      	nop
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b085      	sub	sp, #20
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b21      	cmp	r3, #33	; 0x21
 800a004:	d13e      	bne.n	800a084 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a00e:	d114      	bne.n	800a03a <UART_Transmit_IT+0x48>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d110      	bne.n	800a03a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	881b      	ldrh	r3, [r3, #0]
 800a022:	461a      	mov	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a02c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	1c9a      	adds	r2, r3, #2
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	621a      	str	r2, [r3, #32]
 800a038:	e008      	b.n	800a04c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	1c59      	adds	r1, r3, #1
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	6211      	str	r1, [r2, #32]
 800a044:	781a      	ldrb	r2, [r3, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a050:	b29b      	uxth	r3, r3
 800a052:	3b01      	subs	r3, #1
 800a054:	b29b      	uxth	r3, r3
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	4619      	mov	r1, r3
 800a05a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10f      	bne.n	800a080 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68da      	ldr	r2, [r3, #12]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a06e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68da      	ldr	r2, [r3, #12]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a07e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	e000      	b.n	800a086 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a084:	2302      	movs	r3, #2
  }
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68da      	ldr	r2, [r3, #12]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2220      	movs	r2, #32
 800a0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f7ff fe5a 	bl	8009d6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b08c      	sub	sp, #48	; 0x30
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b22      	cmp	r3, #34	; 0x22
 800a0d4:	f040 80ab 	bne.w	800a22e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e0:	d117      	bne.n	800a112 <UART_Receive_IT+0x50>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d113      	bne.n	800a112 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a100:	b29a      	uxth	r2, r3
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10a:	1c9a      	adds	r2, r3, #2
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	629a      	str	r2, [r3, #40]	; 0x28
 800a110:	e026      	b.n	800a160 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a116:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a118:	2300      	movs	r3, #0
 800a11a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a124:	d007      	beq.n	800a136 <UART_Receive_IT+0x74>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10a      	bne.n	800a144 <UART_Receive_IT+0x82>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d106      	bne.n	800a144 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	b2da      	uxtb	r2, r3
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a140:	701a      	strb	r2, [r3, #0]
 800a142:	e008      	b.n	800a156 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a150:	b2da      	uxtb	r2, r3
 800a152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a154:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15a:	1c5a      	adds	r2, r3, #1
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a164:	b29b      	uxth	r3, r3
 800a166:	3b01      	subs	r3, #1
 800a168:	b29b      	uxth	r3, r3
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	4619      	mov	r1, r3
 800a16e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a170:	2b00      	cmp	r3, #0
 800a172:	d15a      	bne.n	800a22a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68da      	ldr	r2, [r3, #12]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f022 0220 	bic.w	r2, r2, #32
 800a182:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68da      	ldr	r2, [r3, #12]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	695a      	ldr	r2, [r3, #20]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f022 0201 	bic.w	r2, r2, #1
 800a1a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2220      	movs	r2, #32
 800a1a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d135      	bne.n	800a220 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	330c      	adds	r3, #12
 800a1c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	e853 3f00 	ldrex	r3, [r3]
 800a1c8:	613b      	str	r3, [r7, #16]
   return(result);
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f023 0310 	bic.w	r3, r3, #16
 800a1d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	330c      	adds	r3, #12
 800a1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1da:	623a      	str	r2, [r7, #32]
 800a1dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1de:	69f9      	ldr	r1, [r7, #28]
 800a1e0:	6a3a      	ldr	r2, [r7, #32]
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e5      	bne.n	800a1ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0310 	and.w	r3, r3, #16
 800a1f8:	2b10      	cmp	r3, #16
 800a1fa:	d10a      	bne.n	800a212 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	60fb      	str	r3, [r7, #12]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	60fb      	str	r3, [r7, #12]
 800a210:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff fdbb 	bl	8009d94 <HAL_UARTEx_RxEventCallback>
 800a21e:	e002      	b.n	800a226 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7f9 fb09 	bl	8003838 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	e002      	b.n	800a230 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	e000      	b.n	800a230 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a22e:	2302      	movs	r3, #2
  }
}
 800a230:	4618      	mov	r0, r3
 800a232:	3730      	adds	r7, #48	; 0x30
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a23c:	b0c0      	sub	sp, #256	; 0x100
 800a23e:	af00      	add	r7, sp, #0
 800a240:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a254:	68d9      	ldr	r1, [r3, #12]
 800a256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	ea40 0301 	orr.w	r3, r0, r1
 800a260:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	431a      	orrs	r2, r3
 800a270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	431a      	orrs	r2, r3
 800a278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27c:	69db      	ldr	r3, [r3, #28]
 800a27e:	4313      	orrs	r3, r2
 800a280:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a290:	f021 010c 	bic.w	r1, r1, #12
 800a294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a29e:	430b      	orrs	r3, r1
 800a2a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b2:	6999      	ldr	r1, [r3, #24]
 800a2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	ea40 0301 	orr.w	r3, r0, r1
 800a2be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	4b8f      	ldr	r3, [pc, #572]	; (800a504 <UART_SetConfig+0x2cc>)
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d005      	beq.n	800a2d8 <UART_SetConfig+0xa0>
 800a2cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	4b8d      	ldr	r3, [pc, #564]	; (800a508 <UART_SetConfig+0x2d0>)
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d104      	bne.n	800a2e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2d8:	f7fd fbd0 	bl	8007a7c <HAL_RCC_GetPCLK2Freq>
 800a2dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a2e0:	e003      	b.n	800a2ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2e2:	f7fd fbb7 	bl	8007a54 <HAL_RCC_GetPCLK1Freq>
 800a2e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ee:	69db      	ldr	r3, [r3, #28]
 800a2f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2f4:	f040 810c 	bne.w	800a510 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a302:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a306:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a30a:	4622      	mov	r2, r4
 800a30c:	462b      	mov	r3, r5
 800a30e:	1891      	adds	r1, r2, r2
 800a310:	65b9      	str	r1, [r7, #88]	; 0x58
 800a312:	415b      	adcs	r3, r3
 800a314:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a316:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a31a:	4621      	mov	r1, r4
 800a31c:	eb12 0801 	adds.w	r8, r2, r1
 800a320:	4629      	mov	r1, r5
 800a322:	eb43 0901 	adc.w	r9, r3, r1
 800a326:	f04f 0200 	mov.w	r2, #0
 800a32a:	f04f 0300 	mov.w	r3, #0
 800a32e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a33a:	4690      	mov	r8, r2
 800a33c:	4699      	mov	r9, r3
 800a33e:	4623      	mov	r3, r4
 800a340:	eb18 0303 	adds.w	r3, r8, r3
 800a344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a348:	462b      	mov	r3, r5
 800a34a:	eb49 0303 	adc.w	r3, r9, r3
 800a34e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a35e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a362:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a366:	460b      	mov	r3, r1
 800a368:	18db      	adds	r3, r3, r3
 800a36a:	653b      	str	r3, [r7, #80]	; 0x50
 800a36c:	4613      	mov	r3, r2
 800a36e:	eb42 0303 	adc.w	r3, r2, r3
 800a372:	657b      	str	r3, [r7, #84]	; 0x54
 800a374:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a378:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a37c:	f7f6 fcec 	bl	8000d58 <__aeabi_uldivmod>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4b61      	ldr	r3, [pc, #388]	; (800a50c <UART_SetConfig+0x2d4>)
 800a386:	fba3 2302 	umull	r2, r3, r3, r2
 800a38a:	095b      	lsrs	r3, r3, #5
 800a38c:	011c      	lsls	r4, r3, #4
 800a38e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a392:	2200      	movs	r2, #0
 800a394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a398:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a39c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a3a0:	4642      	mov	r2, r8
 800a3a2:	464b      	mov	r3, r9
 800a3a4:	1891      	adds	r1, r2, r2
 800a3a6:	64b9      	str	r1, [r7, #72]	; 0x48
 800a3a8:	415b      	adcs	r3, r3
 800a3aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a3b0:	4641      	mov	r1, r8
 800a3b2:	eb12 0a01 	adds.w	sl, r2, r1
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	eb43 0b01 	adc.w	fp, r3, r1
 800a3bc:	f04f 0200 	mov.w	r2, #0
 800a3c0:	f04f 0300 	mov.w	r3, #0
 800a3c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a3c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a3cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3d0:	4692      	mov	sl, r2
 800a3d2:	469b      	mov	fp, r3
 800a3d4:	4643      	mov	r3, r8
 800a3d6:	eb1a 0303 	adds.w	r3, sl, r3
 800a3da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3de:	464b      	mov	r3, r9
 800a3e0:	eb4b 0303 	adc.w	r3, fp, r3
 800a3e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a3e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a3f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	18db      	adds	r3, r3, r3
 800a400:	643b      	str	r3, [r7, #64]	; 0x40
 800a402:	4613      	mov	r3, r2
 800a404:	eb42 0303 	adc.w	r3, r2, r3
 800a408:	647b      	str	r3, [r7, #68]	; 0x44
 800a40a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a40e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a412:	f7f6 fca1 	bl	8000d58 <__aeabi_uldivmod>
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	4611      	mov	r1, r2
 800a41c:	4b3b      	ldr	r3, [pc, #236]	; (800a50c <UART_SetConfig+0x2d4>)
 800a41e:	fba3 2301 	umull	r2, r3, r3, r1
 800a422:	095b      	lsrs	r3, r3, #5
 800a424:	2264      	movs	r2, #100	; 0x64
 800a426:	fb02 f303 	mul.w	r3, r2, r3
 800a42a:	1acb      	subs	r3, r1, r3
 800a42c:	00db      	lsls	r3, r3, #3
 800a42e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a432:	4b36      	ldr	r3, [pc, #216]	; (800a50c <UART_SetConfig+0x2d4>)
 800a434:	fba3 2302 	umull	r2, r3, r3, r2
 800a438:	095b      	lsrs	r3, r3, #5
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a440:	441c      	add	r4, r3
 800a442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a446:	2200      	movs	r2, #0
 800a448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a44c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a450:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a454:	4642      	mov	r2, r8
 800a456:	464b      	mov	r3, r9
 800a458:	1891      	adds	r1, r2, r2
 800a45a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a45c:	415b      	adcs	r3, r3
 800a45e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a460:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a464:	4641      	mov	r1, r8
 800a466:	1851      	adds	r1, r2, r1
 800a468:	6339      	str	r1, [r7, #48]	; 0x30
 800a46a:	4649      	mov	r1, r9
 800a46c:	414b      	adcs	r3, r1
 800a46e:	637b      	str	r3, [r7, #52]	; 0x34
 800a470:	f04f 0200 	mov.w	r2, #0
 800a474:	f04f 0300 	mov.w	r3, #0
 800a478:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a47c:	4659      	mov	r1, fp
 800a47e:	00cb      	lsls	r3, r1, #3
 800a480:	4651      	mov	r1, sl
 800a482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a486:	4651      	mov	r1, sl
 800a488:	00ca      	lsls	r2, r1, #3
 800a48a:	4610      	mov	r0, r2
 800a48c:	4619      	mov	r1, r3
 800a48e:	4603      	mov	r3, r0
 800a490:	4642      	mov	r2, r8
 800a492:	189b      	adds	r3, r3, r2
 800a494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a498:	464b      	mov	r3, r9
 800a49a:	460a      	mov	r2, r1
 800a49c:	eb42 0303 	adc.w	r3, r2, r3
 800a4a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a4b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a4b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	18db      	adds	r3, r3, r3
 800a4bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4be:	4613      	mov	r3, r2
 800a4c0:	eb42 0303 	adc.w	r3, r2, r3
 800a4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a4ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a4ce:	f7f6 fc43 	bl	8000d58 <__aeabi_uldivmod>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4b0d      	ldr	r3, [pc, #52]	; (800a50c <UART_SetConfig+0x2d4>)
 800a4d8:	fba3 1302 	umull	r1, r3, r3, r2
 800a4dc:	095b      	lsrs	r3, r3, #5
 800a4de:	2164      	movs	r1, #100	; 0x64
 800a4e0:	fb01 f303 	mul.w	r3, r1, r3
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	00db      	lsls	r3, r3, #3
 800a4e8:	3332      	adds	r3, #50	; 0x32
 800a4ea:	4a08      	ldr	r2, [pc, #32]	; (800a50c <UART_SetConfig+0x2d4>)
 800a4ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f0:	095b      	lsrs	r3, r3, #5
 800a4f2:	f003 0207 	and.w	r2, r3, #7
 800a4f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4422      	add	r2, r4
 800a4fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a500:	e106      	b.n	800a710 <UART_SetConfig+0x4d8>
 800a502:	bf00      	nop
 800a504:	40011000 	.word	0x40011000
 800a508:	40011400 	.word	0x40011400
 800a50c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a514:	2200      	movs	r2, #0
 800a516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a51a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a51e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a522:	4642      	mov	r2, r8
 800a524:	464b      	mov	r3, r9
 800a526:	1891      	adds	r1, r2, r2
 800a528:	6239      	str	r1, [r7, #32]
 800a52a:	415b      	adcs	r3, r3
 800a52c:	627b      	str	r3, [r7, #36]	; 0x24
 800a52e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a532:	4641      	mov	r1, r8
 800a534:	1854      	adds	r4, r2, r1
 800a536:	4649      	mov	r1, r9
 800a538:	eb43 0501 	adc.w	r5, r3, r1
 800a53c:	f04f 0200 	mov.w	r2, #0
 800a540:	f04f 0300 	mov.w	r3, #0
 800a544:	00eb      	lsls	r3, r5, #3
 800a546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a54a:	00e2      	lsls	r2, r4, #3
 800a54c:	4614      	mov	r4, r2
 800a54e:	461d      	mov	r5, r3
 800a550:	4643      	mov	r3, r8
 800a552:	18e3      	adds	r3, r4, r3
 800a554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a558:	464b      	mov	r3, r9
 800a55a:	eb45 0303 	adc.w	r3, r5, r3
 800a55e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a56e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a572:	f04f 0200 	mov.w	r2, #0
 800a576:	f04f 0300 	mov.w	r3, #0
 800a57a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a57e:	4629      	mov	r1, r5
 800a580:	008b      	lsls	r3, r1, #2
 800a582:	4621      	mov	r1, r4
 800a584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a588:	4621      	mov	r1, r4
 800a58a:	008a      	lsls	r2, r1, #2
 800a58c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a590:	f7f6 fbe2 	bl	8000d58 <__aeabi_uldivmod>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4b60      	ldr	r3, [pc, #384]	; (800a71c <UART_SetConfig+0x4e4>)
 800a59a:	fba3 2302 	umull	r2, r3, r3, r2
 800a59e:	095b      	lsrs	r3, r3, #5
 800a5a0:	011c      	lsls	r4, r3, #4
 800a5a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a5ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a5b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a5b4:	4642      	mov	r2, r8
 800a5b6:	464b      	mov	r3, r9
 800a5b8:	1891      	adds	r1, r2, r2
 800a5ba:	61b9      	str	r1, [r7, #24]
 800a5bc:	415b      	adcs	r3, r3
 800a5be:	61fb      	str	r3, [r7, #28]
 800a5c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5c4:	4641      	mov	r1, r8
 800a5c6:	1851      	adds	r1, r2, r1
 800a5c8:	6139      	str	r1, [r7, #16]
 800a5ca:	4649      	mov	r1, r9
 800a5cc:	414b      	adcs	r3, r1
 800a5ce:	617b      	str	r3, [r7, #20]
 800a5d0:	f04f 0200 	mov.w	r2, #0
 800a5d4:	f04f 0300 	mov.w	r3, #0
 800a5d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a5dc:	4659      	mov	r1, fp
 800a5de:	00cb      	lsls	r3, r1, #3
 800a5e0:	4651      	mov	r1, sl
 800a5e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5e6:	4651      	mov	r1, sl
 800a5e8:	00ca      	lsls	r2, r1, #3
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	189b      	adds	r3, r3, r2
 800a5f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5f8:	464b      	mov	r3, r9
 800a5fa:	460a      	mov	r2, r1
 800a5fc:	eb42 0303 	adc.w	r3, r2, r3
 800a600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a60e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a610:	f04f 0200 	mov.w	r2, #0
 800a614:	f04f 0300 	mov.w	r3, #0
 800a618:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a61c:	4649      	mov	r1, r9
 800a61e:	008b      	lsls	r3, r1, #2
 800a620:	4641      	mov	r1, r8
 800a622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a626:	4641      	mov	r1, r8
 800a628:	008a      	lsls	r2, r1, #2
 800a62a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a62e:	f7f6 fb93 	bl	8000d58 <__aeabi_uldivmod>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	4611      	mov	r1, r2
 800a638:	4b38      	ldr	r3, [pc, #224]	; (800a71c <UART_SetConfig+0x4e4>)
 800a63a:	fba3 2301 	umull	r2, r3, r3, r1
 800a63e:	095b      	lsrs	r3, r3, #5
 800a640:	2264      	movs	r2, #100	; 0x64
 800a642:	fb02 f303 	mul.w	r3, r2, r3
 800a646:	1acb      	subs	r3, r1, r3
 800a648:	011b      	lsls	r3, r3, #4
 800a64a:	3332      	adds	r3, #50	; 0x32
 800a64c:	4a33      	ldr	r2, [pc, #204]	; (800a71c <UART_SetConfig+0x4e4>)
 800a64e:	fba2 2303 	umull	r2, r3, r2, r3
 800a652:	095b      	lsrs	r3, r3, #5
 800a654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a658:	441c      	add	r4, r3
 800a65a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a65e:	2200      	movs	r2, #0
 800a660:	673b      	str	r3, [r7, #112]	; 0x70
 800a662:	677a      	str	r2, [r7, #116]	; 0x74
 800a664:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a668:	4642      	mov	r2, r8
 800a66a:	464b      	mov	r3, r9
 800a66c:	1891      	adds	r1, r2, r2
 800a66e:	60b9      	str	r1, [r7, #8]
 800a670:	415b      	adcs	r3, r3
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a678:	4641      	mov	r1, r8
 800a67a:	1851      	adds	r1, r2, r1
 800a67c:	6039      	str	r1, [r7, #0]
 800a67e:	4649      	mov	r1, r9
 800a680:	414b      	adcs	r3, r1
 800a682:	607b      	str	r3, [r7, #4]
 800a684:	f04f 0200 	mov.w	r2, #0
 800a688:	f04f 0300 	mov.w	r3, #0
 800a68c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a690:	4659      	mov	r1, fp
 800a692:	00cb      	lsls	r3, r1, #3
 800a694:	4651      	mov	r1, sl
 800a696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a69a:	4651      	mov	r1, sl
 800a69c:	00ca      	lsls	r2, r1, #3
 800a69e:	4610      	mov	r0, r2
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	4642      	mov	r2, r8
 800a6a6:	189b      	adds	r3, r3, r2
 800a6a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6aa:	464b      	mov	r3, r9
 800a6ac:	460a      	mov	r2, r1
 800a6ae:	eb42 0303 	adc.w	r3, r2, r3
 800a6b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	663b      	str	r3, [r7, #96]	; 0x60
 800a6be:	667a      	str	r2, [r7, #100]	; 0x64
 800a6c0:	f04f 0200 	mov.w	r2, #0
 800a6c4:	f04f 0300 	mov.w	r3, #0
 800a6c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	008b      	lsls	r3, r1, #2
 800a6d0:	4641      	mov	r1, r8
 800a6d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6d6:	4641      	mov	r1, r8
 800a6d8:	008a      	lsls	r2, r1, #2
 800a6da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a6de:	f7f6 fb3b 	bl	8000d58 <__aeabi_uldivmod>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4b0d      	ldr	r3, [pc, #52]	; (800a71c <UART_SetConfig+0x4e4>)
 800a6e8:	fba3 1302 	umull	r1, r3, r3, r2
 800a6ec:	095b      	lsrs	r3, r3, #5
 800a6ee:	2164      	movs	r1, #100	; 0x64
 800a6f0:	fb01 f303 	mul.w	r3, r1, r3
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	011b      	lsls	r3, r3, #4
 800a6f8:	3332      	adds	r3, #50	; 0x32
 800a6fa:	4a08      	ldr	r2, [pc, #32]	; (800a71c <UART_SetConfig+0x4e4>)
 800a6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a700:	095b      	lsrs	r3, r3, #5
 800a702:	f003 020f 	and.w	r2, r3, #15
 800a706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4422      	add	r2, r4
 800a70e:	609a      	str	r2, [r3, #8]
}
 800a710:	bf00      	nop
 800a712:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a716:	46bd      	mov	sp, r7
 800a718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a71c:	51eb851f 	.word	0x51eb851f

0800a720 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a724:	4904      	ldr	r1, [pc, #16]	; (800a738 <MX_FATFS_Init+0x18>)
 800a726:	4805      	ldr	r0, [pc, #20]	; (800a73c <MX_FATFS_Init+0x1c>)
 800a728:	f000 f8b0 	bl	800a88c <FATFS_LinkDriver>
 800a72c:	4603      	mov	r3, r0
 800a72e:	461a      	mov	r2, r3
 800a730:	4b03      	ldr	r3, [pc, #12]	; (800a740 <MX_FATFS_Init+0x20>)
 800a732:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a734:	bf00      	nop
 800a736:	bd80      	pop	{r7, pc}
 800a738:	200008b8 	.word	0x200008b8
 800a73c:	20000050 	.word	0x20000050
 800a740:	200008b4 	.word	0x200008b4

0800a744 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4603      	mov	r3, r0
 800a74c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800a74e:	4b06      	ldr	r3, [pc, #24]	; (800a768 <USER_initialize+0x24>)
 800a750:	2201      	movs	r2, #1
 800a752:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a754:	4b04      	ldr	r3, [pc, #16]	; (800a768 <USER_initialize+0x24>)
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	2000004d 	.word	0x2000004d

0800a76c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	4603      	mov	r3, r0
 800a774:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800a776:	4b06      	ldr	r3, [pc, #24]	; (800a790 <USER_status+0x24>)
 800a778:	2201      	movs	r2, #1
 800a77a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a77c:	4b04      	ldr	r3, [pc, #16]	; (800a790 <USER_status+0x24>)
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a782:	4618      	mov	r0, r3
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	2000004d 	.word	0x2000004d

0800a794 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60b9      	str	r1, [r7, #8]
 800a79c:	607a      	str	r2, [r7, #4]
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800a7a4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b085      	sub	sp, #20
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
 800a7bc:	603b      	str	r3, [r7, #0]
 800a7be:	4603      	mov	r3, r0
 800a7c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800a7c2:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	603a      	str	r2, [r7, #0]
 800a7da:	71fb      	strb	r3, [r7, #7]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	73fb      	strb	r3, [r7, #15]
    return res;
 800a7e4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
	...

0800a7f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	4613      	mov	r3, r2
 800a800:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a802:	2301      	movs	r3, #1
 800a804:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a80a:	4b1f      	ldr	r3, [pc, #124]	; (800a888 <FATFS_LinkDriverEx+0x94>)
 800a80c:	7a5b      	ldrb	r3, [r3, #9]
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	2b00      	cmp	r3, #0
 800a812:	d131      	bne.n	800a878 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a814:	4b1c      	ldr	r3, [pc, #112]	; (800a888 <FATFS_LinkDriverEx+0x94>)
 800a816:	7a5b      	ldrb	r3, [r3, #9]
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	461a      	mov	r2, r3
 800a81c:	4b1a      	ldr	r3, [pc, #104]	; (800a888 <FATFS_LinkDriverEx+0x94>)
 800a81e:	2100      	movs	r1, #0
 800a820:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a822:	4b19      	ldr	r3, [pc, #100]	; (800a888 <FATFS_LinkDriverEx+0x94>)
 800a824:	7a5b      	ldrb	r3, [r3, #9]
 800a826:	b2db      	uxtb	r3, r3
 800a828:	4a17      	ldr	r2, [pc, #92]	; (800a888 <FATFS_LinkDriverEx+0x94>)
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4413      	add	r3, r2
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a832:	4b15      	ldr	r3, [pc, #84]	; (800a888 <FATFS_LinkDriverEx+0x94>)
 800a834:	7a5b      	ldrb	r3, [r3, #9]
 800a836:	b2db      	uxtb	r3, r3
 800a838:	461a      	mov	r2, r3
 800a83a:	4b13      	ldr	r3, [pc, #76]	; (800a888 <FATFS_LinkDriverEx+0x94>)
 800a83c:	4413      	add	r3, r2
 800a83e:	79fa      	ldrb	r2, [r7, #7]
 800a840:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a842:	4b11      	ldr	r3, [pc, #68]	; (800a888 <FATFS_LinkDriverEx+0x94>)
 800a844:	7a5b      	ldrb	r3, [r3, #9]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	1c5a      	adds	r2, r3, #1
 800a84a:	b2d1      	uxtb	r1, r2
 800a84c:	4a0e      	ldr	r2, [pc, #56]	; (800a888 <FATFS_LinkDriverEx+0x94>)
 800a84e:	7251      	strb	r1, [r2, #9]
 800a850:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a852:	7dbb      	ldrb	r3, [r7, #22]
 800a854:	3330      	adds	r3, #48	; 0x30
 800a856:	b2da      	uxtb	r2, r3
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	3301      	adds	r3, #1
 800a860:	223a      	movs	r2, #58	; 0x3a
 800a862:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	3302      	adds	r3, #2
 800a868:	222f      	movs	r2, #47	; 0x2f
 800a86a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	3303      	adds	r3, #3
 800a870:	2200      	movs	r2, #0
 800a872:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a878:	7dfb      	ldrb	r3, [r7, #23]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	371c      	adds	r7, #28
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	200008bc 	.word	0x200008bc

0800a88c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a896:	2200      	movs	r2, #0
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f7ff ffaa 	bl	800a7f4 <FATFS_LinkDriverEx>
 800a8a0:	4603      	mov	r3, r0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
	...

0800a8ac <malloc>:
 800a8ac:	4b02      	ldr	r3, [pc, #8]	; (800a8b8 <malloc+0xc>)
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	6818      	ldr	r0, [r3, #0]
 800a8b2:	f000 b82b 	b.w	800a90c <_malloc_r>
 800a8b6:	bf00      	nop
 800a8b8:	20000228 	.word	0x20000228

0800a8bc <free>:
 800a8bc:	4b02      	ldr	r3, [pc, #8]	; (800a8c8 <free+0xc>)
 800a8be:	4601      	mov	r1, r0
 800a8c0:	6818      	ldr	r0, [r3, #0]
 800a8c2:	f001 b885 	b.w	800b9d0 <_free_r>
 800a8c6:	bf00      	nop
 800a8c8:	20000228 	.word	0x20000228

0800a8cc <sbrk_aligned>:
 800a8cc:	b570      	push	{r4, r5, r6, lr}
 800a8ce:	4e0e      	ldr	r6, [pc, #56]	; (800a908 <sbrk_aligned+0x3c>)
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	6831      	ldr	r1, [r6, #0]
 800a8d4:	4605      	mov	r5, r0
 800a8d6:	b911      	cbnz	r1, 800a8de <sbrk_aligned+0x12>
 800a8d8:	f001 f812 	bl	800b900 <_sbrk_r>
 800a8dc:	6030      	str	r0, [r6, #0]
 800a8de:	4621      	mov	r1, r4
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f001 f80d 	bl	800b900 <_sbrk_r>
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	d00a      	beq.n	800a900 <sbrk_aligned+0x34>
 800a8ea:	1cc4      	adds	r4, r0, #3
 800a8ec:	f024 0403 	bic.w	r4, r4, #3
 800a8f0:	42a0      	cmp	r0, r4
 800a8f2:	d007      	beq.n	800a904 <sbrk_aligned+0x38>
 800a8f4:	1a21      	subs	r1, r4, r0
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	f001 f802 	bl	800b900 <_sbrk_r>
 800a8fc:	3001      	adds	r0, #1
 800a8fe:	d101      	bne.n	800a904 <sbrk_aligned+0x38>
 800a900:	f04f 34ff 	mov.w	r4, #4294967295
 800a904:	4620      	mov	r0, r4
 800a906:	bd70      	pop	{r4, r5, r6, pc}
 800a908:	200008cc 	.word	0x200008cc

0800a90c <_malloc_r>:
 800a90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a910:	1ccd      	adds	r5, r1, #3
 800a912:	f025 0503 	bic.w	r5, r5, #3
 800a916:	3508      	adds	r5, #8
 800a918:	2d0c      	cmp	r5, #12
 800a91a:	bf38      	it	cc
 800a91c:	250c      	movcc	r5, #12
 800a91e:	2d00      	cmp	r5, #0
 800a920:	4607      	mov	r7, r0
 800a922:	db01      	blt.n	800a928 <_malloc_r+0x1c>
 800a924:	42a9      	cmp	r1, r5
 800a926:	d905      	bls.n	800a934 <_malloc_r+0x28>
 800a928:	230c      	movs	r3, #12
 800a92a:	603b      	str	r3, [r7, #0]
 800a92c:	2600      	movs	r6, #0
 800a92e:	4630      	mov	r0, r6
 800a930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a934:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa08 <_malloc_r+0xfc>
 800a938:	f000 f868 	bl	800aa0c <__malloc_lock>
 800a93c:	f8d8 3000 	ldr.w	r3, [r8]
 800a940:	461c      	mov	r4, r3
 800a942:	bb5c      	cbnz	r4, 800a99c <_malloc_r+0x90>
 800a944:	4629      	mov	r1, r5
 800a946:	4638      	mov	r0, r7
 800a948:	f7ff ffc0 	bl	800a8cc <sbrk_aligned>
 800a94c:	1c43      	adds	r3, r0, #1
 800a94e:	4604      	mov	r4, r0
 800a950:	d155      	bne.n	800a9fe <_malloc_r+0xf2>
 800a952:	f8d8 4000 	ldr.w	r4, [r8]
 800a956:	4626      	mov	r6, r4
 800a958:	2e00      	cmp	r6, #0
 800a95a:	d145      	bne.n	800a9e8 <_malloc_r+0xdc>
 800a95c:	2c00      	cmp	r4, #0
 800a95e:	d048      	beq.n	800a9f2 <_malloc_r+0xe6>
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	4631      	mov	r1, r6
 800a964:	4638      	mov	r0, r7
 800a966:	eb04 0903 	add.w	r9, r4, r3
 800a96a:	f000 ffc9 	bl	800b900 <_sbrk_r>
 800a96e:	4581      	cmp	r9, r0
 800a970:	d13f      	bne.n	800a9f2 <_malloc_r+0xe6>
 800a972:	6821      	ldr	r1, [r4, #0]
 800a974:	1a6d      	subs	r5, r5, r1
 800a976:	4629      	mov	r1, r5
 800a978:	4638      	mov	r0, r7
 800a97a:	f7ff ffa7 	bl	800a8cc <sbrk_aligned>
 800a97e:	3001      	adds	r0, #1
 800a980:	d037      	beq.n	800a9f2 <_malloc_r+0xe6>
 800a982:	6823      	ldr	r3, [r4, #0]
 800a984:	442b      	add	r3, r5
 800a986:	6023      	str	r3, [r4, #0]
 800a988:	f8d8 3000 	ldr.w	r3, [r8]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d038      	beq.n	800aa02 <_malloc_r+0xf6>
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	42a2      	cmp	r2, r4
 800a994:	d12b      	bne.n	800a9ee <_malloc_r+0xe2>
 800a996:	2200      	movs	r2, #0
 800a998:	605a      	str	r2, [r3, #4]
 800a99a:	e00f      	b.n	800a9bc <_malloc_r+0xb0>
 800a99c:	6822      	ldr	r2, [r4, #0]
 800a99e:	1b52      	subs	r2, r2, r5
 800a9a0:	d41f      	bmi.n	800a9e2 <_malloc_r+0xd6>
 800a9a2:	2a0b      	cmp	r2, #11
 800a9a4:	d917      	bls.n	800a9d6 <_malloc_r+0xca>
 800a9a6:	1961      	adds	r1, r4, r5
 800a9a8:	42a3      	cmp	r3, r4
 800a9aa:	6025      	str	r5, [r4, #0]
 800a9ac:	bf18      	it	ne
 800a9ae:	6059      	strne	r1, [r3, #4]
 800a9b0:	6863      	ldr	r3, [r4, #4]
 800a9b2:	bf08      	it	eq
 800a9b4:	f8c8 1000 	streq.w	r1, [r8]
 800a9b8:	5162      	str	r2, [r4, r5]
 800a9ba:	604b      	str	r3, [r1, #4]
 800a9bc:	4638      	mov	r0, r7
 800a9be:	f104 060b 	add.w	r6, r4, #11
 800a9c2:	f000 f829 	bl	800aa18 <__malloc_unlock>
 800a9c6:	f026 0607 	bic.w	r6, r6, #7
 800a9ca:	1d23      	adds	r3, r4, #4
 800a9cc:	1af2      	subs	r2, r6, r3
 800a9ce:	d0ae      	beq.n	800a92e <_malloc_r+0x22>
 800a9d0:	1b9b      	subs	r3, r3, r6
 800a9d2:	50a3      	str	r3, [r4, r2]
 800a9d4:	e7ab      	b.n	800a92e <_malloc_r+0x22>
 800a9d6:	42a3      	cmp	r3, r4
 800a9d8:	6862      	ldr	r2, [r4, #4]
 800a9da:	d1dd      	bne.n	800a998 <_malloc_r+0x8c>
 800a9dc:	f8c8 2000 	str.w	r2, [r8]
 800a9e0:	e7ec      	b.n	800a9bc <_malloc_r+0xb0>
 800a9e2:	4623      	mov	r3, r4
 800a9e4:	6864      	ldr	r4, [r4, #4]
 800a9e6:	e7ac      	b.n	800a942 <_malloc_r+0x36>
 800a9e8:	4634      	mov	r4, r6
 800a9ea:	6876      	ldr	r6, [r6, #4]
 800a9ec:	e7b4      	b.n	800a958 <_malloc_r+0x4c>
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	e7cc      	b.n	800a98c <_malloc_r+0x80>
 800a9f2:	230c      	movs	r3, #12
 800a9f4:	603b      	str	r3, [r7, #0]
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	f000 f80e 	bl	800aa18 <__malloc_unlock>
 800a9fc:	e797      	b.n	800a92e <_malloc_r+0x22>
 800a9fe:	6025      	str	r5, [r4, #0]
 800aa00:	e7dc      	b.n	800a9bc <_malloc_r+0xb0>
 800aa02:	605b      	str	r3, [r3, #4]
 800aa04:	deff      	udf	#255	; 0xff
 800aa06:	bf00      	nop
 800aa08:	200008c8 	.word	0x200008c8

0800aa0c <__malloc_lock>:
 800aa0c:	4801      	ldr	r0, [pc, #4]	; (800aa14 <__malloc_lock+0x8>)
 800aa0e:	f000 bfc4 	b.w	800b99a <__retarget_lock_acquire_recursive>
 800aa12:	bf00      	nop
 800aa14:	20000a10 	.word	0x20000a10

0800aa18 <__malloc_unlock>:
 800aa18:	4801      	ldr	r0, [pc, #4]	; (800aa20 <__malloc_unlock+0x8>)
 800aa1a:	f000 bfbf 	b.w	800b99c <__retarget_lock_release_recursive>
 800aa1e:	bf00      	nop
 800aa20:	20000a10 	.word	0x20000a10

0800aa24 <sulp>:
 800aa24:	b570      	push	{r4, r5, r6, lr}
 800aa26:	4604      	mov	r4, r0
 800aa28:	460d      	mov	r5, r1
 800aa2a:	ec45 4b10 	vmov	d0, r4, r5
 800aa2e:	4616      	mov	r6, r2
 800aa30:	f001 fef0 	bl	800c814 <__ulp>
 800aa34:	ec51 0b10 	vmov	r0, r1, d0
 800aa38:	b17e      	cbz	r6, 800aa5a <sulp+0x36>
 800aa3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aa3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	dd09      	ble.n	800aa5a <sulp+0x36>
 800aa46:	051b      	lsls	r3, r3, #20
 800aa48:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aa4c:	2400      	movs	r4, #0
 800aa4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aa52:	4622      	mov	r2, r4
 800aa54:	462b      	mov	r3, r5
 800aa56:	f7f5 fde7 	bl	8000628 <__aeabi_dmul>
 800aa5a:	bd70      	pop	{r4, r5, r6, pc}
 800aa5c:	0000      	movs	r0, r0
	...

0800aa60 <_strtod_l>:
 800aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa64:	ed2d 8b02 	vpush	{d8}
 800aa68:	b09b      	sub	sp, #108	; 0x6c
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	9213      	str	r2, [sp, #76]	; 0x4c
 800aa6e:	2200      	movs	r2, #0
 800aa70:	9216      	str	r2, [sp, #88]	; 0x58
 800aa72:	460d      	mov	r5, r1
 800aa74:	f04f 0800 	mov.w	r8, #0
 800aa78:	f04f 0900 	mov.w	r9, #0
 800aa7c:	460a      	mov	r2, r1
 800aa7e:	9215      	str	r2, [sp, #84]	; 0x54
 800aa80:	7811      	ldrb	r1, [r2, #0]
 800aa82:	292b      	cmp	r1, #43	; 0x2b
 800aa84:	d04c      	beq.n	800ab20 <_strtod_l+0xc0>
 800aa86:	d83a      	bhi.n	800aafe <_strtod_l+0x9e>
 800aa88:	290d      	cmp	r1, #13
 800aa8a:	d834      	bhi.n	800aaf6 <_strtod_l+0x96>
 800aa8c:	2908      	cmp	r1, #8
 800aa8e:	d834      	bhi.n	800aafa <_strtod_l+0x9a>
 800aa90:	2900      	cmp	r1, #0
 800aa92:	d03d      	beq.n	800ab10 <_strtod_l+0xb0>
 800aa94:	2200      	movs	r2, #0
 800aa96:	920a      	str	r2, [sp, #40]	; 0x28
 800aa98:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800aa9a:	7832      	ldrb	r2, [r6, #0]
 800aa9c:	2a30      	cmp	r2, #48	; 0x30
 800aa9e:	f040 80b4 	bne.w	800ac0a <_strtod_l+0x1aa>
 800aaa2:	7872      	ldrb	r2, [r6, #1]
 800aaa4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800aaa8:	2a58      	cmp	r2, #88	; 0x58
 800aaaa:	d170      	bne.n	800ab8e <_strtod_l+0x12e>
 800aaac:	9302      	str	r3, [sp, #8]
 800aaae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab0:	9301      	str	r3, [sp, #4]
 800aab2:	ab16      	add	r3, sp, #88	; 0x58
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	4a8e      	ldr	r2, [pc, #568]	; (800acf0 <_strtod_l+0x290>)
 800aab8:	ab17      	add	r3, sp, #92	; 0x5c
 800aaba:	a915      	add	r1, sp, #84	; 0x54
 800aabc:	4620      	mov	r0, r4
 800aabe:	f001 f83b 	bl	800bb38 <__gethex>
 800aac2:	f010 070f 	ands.w	r7, r0, #15
 800aac6:	4605      	mov	r5, r0
 800aac8:	d005      	beq.n	800aad6 <_strtod_l+0x76>
 800aaca:	2f06      	cmp	r7, #6
 800aacc:	d12a      	bne.n	800ab24 <_strtod_l+0xc4>
 800aace:	3601      	adds	r6, #1
 800aad0:	2300      	movs	r3, #0
 800aad2:	9615      	str	r6, [sp, #84]	; 0x54
 800aad4:	930a      	str	r3, [sp, #40]	; 0x28
 800aad6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f040 857f 	bne.w	800b5dc <_strtod_l+0xb7c>
 800aade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae0:	b1db      	cbz	r3, 800ab1a <_strtod_l+0xba>
 800aae2:	4642      	mov	r2, r8
 800aae4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aae8:	ec43 2b10 	vmov	d0, r2, r3
 800aaec:	b01b      	add	sp, #108	; 0x6c
 800aaee:	ecbd 8b02 	vpop	{d8}
 800aaf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf6:	2920      	cmp	r1, #32
 800aaf8:	d1cc      	bne.n	800aa94 <_strtod_l+0x34>
 800aafa:	3201      	adds	r2, #1
 800aafc:	e7bf      	b.n	800aa7e <_strtod_l+0x1e>
 800aafe:	292d      	cmp	r1, #45	; 0x2d
 800ab00:	d1c8      	bne.n	800aa94 <_strtod_l+0x34>
 800ab02:	2101      	movs	r1, #1
 800ab04:	910a      	str	r1, [sp, #40]	; 0x28
 800ab06:	1c51      	adds	r1, r2, #1
 800ab08:	9115      	str	r1, [sp, #84]	; 0x54
 800ab0a:	7852      	ldrb	r2, [r2, #1]
 800ab0c:	2a00      	cmp	r2, #0
 800ab0e:	d1c3      	bne.n	800aa98 <_strtod_l+0x38>
 800ab10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab12:	9515      	str	r5, [sp, #84]	; 0x54
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f040 855f 	bne.w	800b5d8 <_strtod_l+0xb78>
 800ab1a:	4642      	mov	r2, r8
 800ab1c:	464b      	mov	r3, r9
 800ab1e:	e7e3      	b.n	800aae8 <_strtod_l+0x88>
 800ab20:	2100      	movs	r1, #0
 800ab22:	e7ef      	b.n	800ab04 <_strtod_l+0xa4>
 800ab24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab26:	b13a      	cbz	r2, 800ab38 <_strtod_l+0xd8>
 800ab28:	2135      	movs	r1, #53	; 0x35
 800ab2a:	a818      	add	r0, sp, #96	; 0x60
 800ab2c:	f001 ff6f 	bl	800ca0e <__copybits>
 800ab30:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab32:	4620      	mov	r0, r4
 800ab34:	f001 fb42 	bl	800c1bc <_Bfree>
 800ab38:	3f01      	subs	r7, #1
 800ab3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab3c:	2f04      	cmp	r7, #4
 800ab3e:	d806      	bhi.n	800ab4e <_strtod_l+0xee>
 800ab40:	e8df f007 	tbb	[pc, r7]
 800ab44:	201d0314 	.word	0x201d0314
 800ab48:	14          	.byte	0x14
 800ab49:	00          	.byte	0x00
 800ab4a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ab4e:	05e9      	lsls	r1, r5, #23
 800ab50:	bf48      	it	mi
 800ab52:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ab56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab5a:	0d1b      	lsrs	r3, r3, #20
 800ab5c:	051b      	lsls	r3, r3, #20
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1b9      	bne.n	800aad6 <_strtod_l+0x76>
 800ab62:	f000 feef 	bl	800b944 <__errno>
 800ab66:	2322      	movs	r3, #34	; 0x22
 800ab68:	6003      	str	r3, [r0, #0]
 800ab6a:	e7b4      	b.n	800aad6 <_strtod_l+0x76>
 800ab6c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ab70:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ab74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ab78:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ab7c:	e7e7      	b.n	800ab4e <_strtod_l+0xee>
 800ab7e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800acf8 <_strtod_l+0x298>
 800ab82:	e7e4      	b.n	800ab4e <_strtod_l+0xee>
 800ab84:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ab88:	f04f 38ff 	mov.w	r8, #4294967295
 800ab8c:	e7df      	b.n	800ab4e <_strtod_l+0xee>
 800ab8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	9215      	str	r2, [sp, #84]	; 0x54
 800ab94:	785b      	ldrb	r3, [r3, #1]
 800ab96:	2b30      	cmp	r3, #48	; 0x30
 800ab98:	d0f9      	beq.n	800ab8e <_strtod_l+0x12e>
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d09b      	beq.n	800aad6 <_strtod_l+0x76>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	f04f 0a00 	mov.w	sl, #0
 800aba4:	9304      	str	r3, [sp, #16]
 800aba6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aba8:	930b      	str	r3, [sp, #44]	; 0x2c
 800abaa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800abae:	46d3      	mov	fp, sl
 800abb0:	220a      	movs	r2, #10
 800abb2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800abb4:	7806      	ldrb	r6, [r0, #0]
 800abb6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800abba:	b2d9      	uxtb	r1, r3
 800abbc:	2909      	cmp	r1, #9
 800abbe:	d926      	bls.n	800ac0e <_strtod_l+0x1ae>
 800abc0:	494c      	ldr	r1, [pc, #304]	; (800acf4 <_strtod_l+0x294>)
 800abc2:	2201      	movs	r2, #1
 800abc4:	f000 fe55 	bl	800b872 <strncmp>
 800abc8:	2800      	cmp	r0, #0
 800abca:	d030      	beq.n	800ac2e <_strtod_l+0x1ce>
 800abcc:	2000      	movs	r0, #0
 800abce:	4632      	mov	r2, r6
 800abd0:	9005      	str	r0, [sp, #20]
 800abd2:	465e      	mov	r6, fp
 800abd4:	4603      	mov	r3, r0
 800abd6:	2a65      	cmp	r2, #101	; 0x65
 800abd8:	d001      	beq.n	800abde <_strtod_l+0x17e>
 800abda:	2a45      	cmp	r2, #69	; 0x45
 800abdc:	d113      	bne.n	800ac06 <_strtod_l+0x1a6>
 800abde:	b91e      	cbnz	r6, 800abe8 <_strtod_l+0x188>
 800abe0:	9a04      	ldr	r2, [sp, #16]
 800abe2:	4302      	orrs	r2, r0
 800abe4:	d094      	beq.n	800ab10 <_strtod_l+0xb0>
 800abe6:	2600      	movs	r6, #0
 800abe8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800abea:	1c6a      	adds	r2, r5, #1
 800abec:	9215      	str	r2, [sp, #84]	; 0x54
 800abee:	786a      	ldrb	r2, [r5, #1]
 800abf0:	2a2b      	cmp	r2, #43	; 0x2b
 800abf2:	d074      	beq.n	800acde <_strtod_l+0x27e>
 800abf4:	2a2d      	cmp	r2, #45	; 0x2d
 800abf6:	d078      	beq.n	800acea <_strtod_l+0x28a>
 800abf8:	f04f 0c00 	mov.w	ip, #0
 800abfc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ac00:	2909      	cmp	r1, #9
 800ac02:	d97f      	bls.n	800ad04 <_strtod_l+0x2a4>
 800ac04:	9515      	str	r5, [sp, #84]	; 0x54
 800ac06:	2700      	movs	r7, #0
 800ac08:	e09e      	b.n	800ad48 <_strtod_l+0x2e8>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e7c8      	b.n	800aba0 <_strtod_l+0x140>
 800ac0e:	f1bb 0f08 	cmp.w	fp, #8
 800ac12:	bfd8      	it	le
 800ac14:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ac16:	f100 0001 	add.w	r0, r0, #1
 800ac1a:	bfda      	itte	le
 800ac1c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac20:	9309      	strle	r3, [sp, #36]	; 0x24
 800ac22:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ac26:	f10b 0b01 	add.w	fp, fp, #1
 800ac2a:	9015      	str	r0, [sp, #84]	; 0x54
 800ac2c:	e7c1      	b.n	800abb2 <_strtod_l+0x152>
 800ac2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	9215      	str	r2, [sp, #84]	; 0x54
 800ac34:	785a      	ldrb	r2, [r3, #1]
 800ac36:	f1bb 0f00 	cmp.w	fp, #0
 800ac3a:	d037      	beq.n	800acac <_strtod_l+0x24c>
 800ac3c:	9005      	str	r0, [sp, #20]
 800ac3e:	465e      	mov	r6, fp
 800ac40:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ac44:	2b09      	cmp	r3, #9
 800ac46:	d912      	bls.n	800ac6e <_strtod_l+0x20e>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e7c4      	b.n	800abd6 <_strtod_l+0x176>
 800ac4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	9215      	str	r2, [sp, #84]	; 0x54
 800ac52:	785a      	ldrb	r2, [r3, #1]
 800ac54:	3001      	adds	r0, #1
 800ac56:	2a30      	cmp	r2, #48	; 0x30
 800ac58:	d0f8      	beq.n	800ac4c <_strtod_l+0x1ec>
 800ac5a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ac5e:	2b08      	cmp	r3, #8
 800ac60:	f200 84c1 	bhi.w	800b5e6 <_strtod_l+0xb86>
 800ac64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac66:	9005      	str	r0, [sp, #20]
 800ac68:	2000      	movs	r0, #0
 800ac6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	3a30      	subs	r2, #48	; 0x30
 800ac70:	f100 0301 	add.w	r3, r0, #1
 800ac74:	d014      	beq.n	800aca0 <_strtod_l+0x240>
 800ac76:	9905      	ldr	r1, [sp, #20]
 800ac78:	4419      	add	r1, r3
 800ac7a:	9105      	str	r1, [sp, #20]
 800ac7c:	4633      	mov	r3, r6
 800ac7e:	eb00 0c06 	add.w	ip, r0, r6
 800ac82:	210a      	movs	r1, #10
 800ac84:	4563      	cmp	r3, ip
 800ac86:	d113      	bne.n	800acb0 <_strtod_l+0x250>
 800ac88:	1833      	adds	r3, r6, r0
 800ac8a:	2b08      	cmp	r3, #8
 800ac8c:	f106 0601 	add.w	r6, r6, #1
 800ac90:	4406      	add	r6, r0
 800ac92:	dc1a      	bgt.n	800acca <_strtod_l+0x26a>
 800ac94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac96:	230a      	movs	r3, #10
 800ac98:	fb03 2301 	mla	r3, r3, r1, r2
 800ac9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac9e:	2300      	movs	r3, #0
 800aca0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aca2:	1c51      	adds	r1, r2, #1
 800aca4:	9115      	str	r1, [sp, #84]	; 0x54
 800aca6:	7852      	ldrb	r2, [r2, #1]
 800aca8:	4618      	mov	r0, r3
 800acaa:	e7c9      	b.n	800ac40 <_strtod_l+0x1e0>
 800acac:	4658      	mov	r0, fp
 800acae:	e7d2      	b.n	800ac56 <_strtod_l+0x1f6>
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	f103 0301 	add.w	r3, r3, #1
 800acb6:	dc03      	bgt.n	800acc0 <_strtod_l+0x260>
 800acb8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800acba:	434f      	muls	r7, r1
 800acbc:	9709      	str	r7, [sp, #36]	; 0x24
 800acbe:	e7e1      	b.n	800ac84 <_strtod_l+0x224>
 800acc0:	2b10      	cmp	r3, #16
 800acc2:	bfd8      	it	le
 800acc4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800acc8:	e7dc      	b.n	800ac84 <_strtod_l+0x224>
 800acca:	2e10      	cmp	r6, #16
 800accc:	bfdc      	itt	le
 800acce:	230a      	movle	r3, #10
 800acd0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800acd4:	e7e3      	b.n	800ac9e <_strtod_l+0x23e>
 800acd6:	2300      	movs	r3, #0
 800acd8:	9305      	str	r3, [sp, #20]
 800acda:	2301      	movs	r3, #1
 800acdc:	e780      	b.n	800abe0 <_strtod_l+0x180>
 800acde:	f04f 0c00 	mov.w	ip, #0
 800ace2:	1caa      	adds	r2, r5, #2
 800ace4:	9215      	str	r2, [sp, #84]	; 0x54
 800ace6:	78aa      	ldrb	r2, [r5, #2]
 800ace8:	e788      	b.n	800abfc <_strtod_l+0x19c>
 800acea:	f04f 0c01 	mov.w	ip, #1
 800acee:	e7f8      	b.n	800ace2 <_strtod_l+0x282>
 800acf0:	0800e740 	.word	0x0800e740
 800acf4:	0800e730 	.word	0x0800e730
 800acf8:	7ff00000 	.word	0x7ff00000
 800acfc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800acfe:	1c51      	adds	r1, r2, #1
 800ad00:	9115      	str	r1, [sp, #84]	; 0x54
 800ad02:	7852      	ldrb	r2, [r2, #1]
 800ad04:	2a30      	cmp	r2, #48	; 0x30
 800ad06:	d0f9      	beq.n	800acfc <_strtod_l+0x29c>
 800ad08:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ad0c:	2908      	cmp	r1, #8
 800ad0e:	f63f af7a 	bhi.w	800ac06 <_strtod_l+0x1a6>
 800ad12:	3a30      	subs	r2, #48	; 0x30
 800ad14:	9208      	str	r2, [sp, #32]
 800ad16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad18:	920c      	str	r2, [sp, #48]	; 0x30
 800ad1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad1c:	1c57      	adds	r7, r2, #1
 800ad1e:	9715      	str	r7, [sp, #84]	; 0x54
 800ad20:	7852      	ldrb	r2, [r2, #1]
 800ad22:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ad26:	f1be 0f09 	cmp.w	lr, #9
 800ad2a:	d938      	bls.n	800ad9e <_strtod_l+0x33e>
 800ad2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad2e:	1a7f      	subs	r7, r7, r1
 800ad30:	2f08      	cmp	r7, #8
 800ad32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ad36:	dc03      	bgt.n	800ad40 <_strtod_l+0x2e0>
 800ad38:	9908      	ldr	r1, [sp, #32]
 800ad3a:	428f      	cmp	r7, r1
 800ad3c:	bfa8      	it	ge
 800ad3e:	460f      	movge	r7, r1
 800ad40:	f1bc 0f00 	cmp.w	ip, #0
 800ad44:	d000      	beq.n	800ad48 <_strtod_l+0x2e8>
 800ad46:	427f      	negs	r7, r7
 800ad48:	2e00      	cmp	r6, #0
 800ad4a:	d14f      	bne.n	800adec <_strtod_l+0x38c>
 800ad4c:	9904      	ldr	r1, [sp, #16]
 800ad4e:	4301      	orrs	r1, r0
 800ad50:	f47f aec1 	bne.w	800aad6 <_strtod_l+0x76>
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f47f aedb 	bne.w	800ab10 <_strtod_l+0xb0>
 800ad5a:	2a69      	cmp	r2, #105	; 0x69
 800ad5c:	d029      	beq.n	800adb2 <_strtod_l+0x352>
 800ad5e:	dc26      	bgt.n	800adae <_strtod_l+0x34e>
 800ad60:	2a49      	cmp	r2, #73	; 0x49
 800ad62:	d026      	beq.n	800adb2 <_strtod_l+0x352>
 800ad64:	2a4e      	cmp	r2, #78	; 0x4e
 800ad66:	f47f aed3 	bne.w	800ab10 <_strtod_l+0xb0>
 800ad6a:	499b      	ldr	r1, [pc, #620]	; (800afd8 <_strtod_l+0x578>)
 800ad6c:	a815      	add	r0, sp, #84	; 0x54
 800ad6e:	f001 f923 	bl	800bfb8 <__match>
 800ad72:	2800      	cmp	r0, #0
 800ad74:	f43f aecc 	beq.w	800ab10 <_strtod_l+0xb0>
 800ad78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	2b28      	cmp	r3, #40	; 0x28
 800ad7e:	d12f      	bne.n	800ade0 <_strtod_l+0x380>
 800ad80:	4996      	ldr	r1, [pc, #600]	; (800afdc <_strtod_l+0x57c>)
 800ad82:	aa18      	add	r2, sp, #96	; 0x60
 800ad84:	a815      	add	r0, sp, #84	; 0x54
 800ad86:	f001 f92b 	bl	800bfe0 <__hexnan>
 800ad8a:	2805      	cmp	r0, #5
 800ad8c:	d128      	bne.n	800ade0 <_strtod_l+0x380>
 800ad8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ad94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ad98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ad9c:	e69b      	b.n	800aad6 <_strtod_l+0x76>
 800ad9e:	9f08      	ldr	r7, [sp, #32]
 800ada0:	210a      	movs	r1, #10
 800ada2:	fb01 2107 	mla	r1, r1, r7, r2
 800ada6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800adaa:	9208      	str	r2, [sp, #32]
 800adac:	e7b5      	b.n	800ad1a <_strtod_l+0x2ba>
 800adae:	2a6e      	cmp	r2, #110	; 0x6e
 800adb0:	e7d9      	b.n	800ad66 <_strtod_l+0x306>
 800adb2:	498b      	ldr	r1, [pc, #556]	; (800afe0 <_strtod_l+0x580>)
 800adb4:	a815      	add	r0, sp, #84	; 0x54
 800adb6:	f001 f8ff 	bl	800bfb8 <__match>
 800adba:	2800      	cmp	r0, #0
 800adbc:	f43f aea8 	beq.w	800ab10 <_strtod_l+0xb0>
 800adc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adc2:	4988      	ldr	r1, [pc, #544]	; (800afe4 <_strtod_l+0x584>)
 800adc4:	3b01      	subs	r3, #1
 800adc6:	a815      	add	r0, sp, #84	; 0x54
 800adc8:	9315      	str	r3, [sp, #84]	; 0x54
 800adca:	f001 f8f5 	bl	800bfb8 <__match>
 800adce:	b910      	cbnz	r0, 800add6 <_strtod_l+0x376>
 800add0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800add2:	3301      	adds	r3, #1
 800add4:	9315      	str	r3, [sp, #84]	; 0x54
 800add6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800aff4 <_strtod_l+0x594>
 800adda:	f04f 0800 	mov.w	r8, #0
 800adde:	e67a      	b.n	800aad6 <_strtod_l+0x76>
 800ade0:	4881      	ldr	r0, [pc, #516]	; (800afe8 <_strtod_l+0x588>)
 800ade2:	f000 fded 	bl	800b9c0 <nan>
 800ade6:	ec59 8b10 	vmov	r8, r9, d0
 800adea:	e674      	b.n	800aad6 <_strtod_l+0x76>
 800adec:	9b05      	ldr	r3, [sp, #20]
 800adee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adf0:	1afb      	subs	r3, r7, r3
 800adf2:	f1bb 0f00 	cmp.w	fp, #0
 800adf6:	bf08      	it	eq
 800adf8:	46b3      	moveq	fp, r6
 800adfa:	2e10      	cmp	r6, #16
 800adfc:	9308      	str	r3, [sp, #32]
 800adfe:	4635      	mov	r5, r6
 800ae00:	bfa8      	it	ge
 800ae02:	2510      	movge	r5, #16
 800ae04:	f7f5 fb96 	bl	8000534 <__aeabi_ui2d>
 800ae08:	2e09      	cmp	r6, #9
 800ae0a:	4680      	mov	r8, r0
 800ae0c:	4689      	mov	r9, r1
 800ae0e:	dd13      	ble.n	800ae38 <_strtod_l+0x3d8>
 800ae10:	4b76      	ldr	r3, [pc, #472]	; (800afec <_strtod_l+0x58c>)
 800ae12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ae1a:	f7f5 fc05 	bl	8000628 <__aeabi_dmul>
 800ae1e:	4680      	mov	r8, r0
 800ae20:	4650      	mov	r0, sl
 800ae22:	4689      	mov	r9, r1
 800ae24:	f7f5 fb86 	bl	8000534 <__aeabi_ui2d>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	4649      	mov	r1, r9
 800ae30:	f7f5 fa44 	bl	80002bc <__adddf3>
 800ae34:	4680      	mov	r8, r0
 800ae36:	4689      	mov	r9, r1
 800ae38:	2e0f      	cmp	r6, #15
 800ae3a:	dc38      	bgt.n	800aeae <_strtod_l+0x44e>
 800ae3c:	9b08      	ldr	r3, [sp, #32]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f43f ae49 	beq.w	800aad6 <_strtod_l+0x76>
 800ae44:	dd24      	ble.n	800ae90 <_strtod_l+0x430>
 800ae46:	2b16      	cmp	r3, #22
 800ae48:	dc0b      	bgt.n	800ae62 <_strtod_l+0x402>
 800ae4a:	4968      	ldr	r1, [pc, #416]	; (800afec <_strtod_l+0x58c>)
 800ae4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae54:	4642      	mov	r2, r8
 800ae56:	464b      	mov	r3, r9
 800ae58:	f7f5 fbe6 	bl	8000628 <__aeabi_dmul>
 800ae5c:	4680      	mov	r8, r0
 800ae5e:	4689      	mov	r9, r1
 800ae60:	e639      	b.n	800aad6 <_strtod_l+0x76>
 800ae62:	9a08      	ldr	r2, [sp, #32]
 800ae64:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	db20      	blt.n	800aeae <_strtod_l+0x44e>
 800ae6c:	4c5f      	ldr	r4, [pc, #380]	; (800afec <_strtod_l+0x58c>)
 800ae6e:	f1c6 060f 	rsb	r6, r6, #15
 800ae72:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ae76:	4642      	mov	r2, r8
 800ae78:	464b      	mov	r3, r9
 800ae7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae7e:	f7f5 fbd3 	bl	8000628 <__aeabi_dmul>
 800ae82:	9b08      	ldr	r3, [sp, #32]
 800ae84:	1b9e      	subs	r6, r3, r6
 800ae86:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ae8a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae8e:	e7e3      	b.n	800ae58 <_strtod_l+0x3f8>
 800ae90:	9b08      	ldr	r3, [sp, #32]
 800ae92:	3316      	adds	r3, #22
 800ae94:	db0b      	blt.n	800aeae <_strtod_l+0x44e>
 800ae96:	9b05      	ldr	r3, [sp, #20]
 800ae98:	1bdf      	subs	r7, r3, r7
 800ae9a:	4b54      	ldr	r3, [pc, #336]	; (800afec <_strtod_l+0x58c>)
 800ae9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aea4:	4640      	mov	r0, r8
 800aea6:	4649      	mov	r1, r9
 800aea8:	f7f5 fce8 	bl	800087c <__aeabi_ddiv>
 800aeac:	e7d6      	b.n	800ae5c <_strtod_l+0x3fc>
 800aeae:	9b08      	ldr	r3, [sp, #32]
 800aeb0:	1b75      	subs	r5, r6, r5
 800aeb2:	441d      	add	r5, r3
 800aeb4:	2d00      	cmp	r5, #0
 800aeb6:	dd70      	ble.n	800af9a <_strtod_l+0x53a>
 800aeb8:	f015 030f 	ands.w	r3, r5, #15
 800aebc:	d00a      	beq.n	800aed4 <_strtod_l+0x474>
 800aebe:	494b      	ldr	r1, [pc, #300]	; (800afec <_strtod_l+0x58c>)
 800aec0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aec4:	4642      	mov	r2, r8
 800aec6:	464b      	mov	r3, r9
 800aec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aecc:	f7f5 fbac 	bl	8000628 <__aeabi_dmul>
 800aed0:	4680      	mov	r8, r0
 800aed2:	4689      	mov	r9, r1
 800aed4:	f035 050f 	bics.w	r5, r5, #15
 800aed8:	d04d      	beq.n	800af76 <_strtod_l+0x516>
 800aeda:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800aede:	dd22      	ble.n	800af26 <_strtod_l+0x4c6>
 800aee0:	2500      	movs	r5, #0
 800aee2:	46ab      	mov	fp, r5
 800aee4:	9509      	str	r5, [sp, #36]	; 0x24
 800aee6:	9505      	str	r5, [sp, #20]
 800aee8:	2322      	movs	r3, #34	; 0x22
 800aeea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800aff4 <_strtod_l+0x594>
 800aeee:	6023      	str	r3, [r4, #0]
 800aef0:	f04f 0800 	mov.w	r8, #0
 800aef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f43f aded 	beq.w	800aad6 <_strtod_l+0x76>
 800aefc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aefe:	4620      	mov	r0, r4
 800af00:	f001 f95c 	bl	800c1bc <_Bfree>
 800af04:	9905      	ldr	r1, [sp, #20]
 800af06:	4620      	mov	r0, r4
 800af08:	f001 f958 	bl	800c1bc <_Bfree>
 800af0c:	4659      	mov	r1, fp
 800af0e:	4620      	mov	r0, r4
 800af10:	f001 f954 	bl	800c1bc <_Bfree>
 800af14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af16:	4620      	mov	r0, r4
 800af18:	f001 f950 	bl	800c1bc <_Bfree>
 800af1c:	4629      	mov	r1, r5
 800af1e:	4620      	mov	r0, r4
 800af20:	f001 f94c 	bl	800c1bc <_Bfree>
 800af24:	e5d7      	b.n	800aad6 <_strtod_l+0x76>
 800af26:	4b32      	ldr	r3, [pc, #200]	; (800aff0 <_strtod_l+0x590>)
 800af28:	9304      	str	r3, [sp, #16]
 800af2a:	2300      	movs	r3, #0
 800af2c:	112d      	asrs	r5, r5, #4
 800af2e:	4640      	mov	r0, r8
 800af30:	4649      	mov	r1, r9
 800af32:	469a      	mov	sl, r3
 800af34:	2d01      	cmp	r5, #1
 800af36:	dc21      	bgt.n	800af7c <_strtod_l+0x51c>
 800af38:	b10b      	cbz	r3, 800af3e <_strtod_l+0x4de>
 800af3a:	4680      	mov	r8, r0
 800af3c:	4689      	mov	r9, r1
 800af3e:	492c      	ldr	r1, [pc, #176]	; (800aff0 <_strtod_l+0x590>)
 800af40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800af44:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800af48:	4642      	mov	r2, r8
 800af4a:	464b      	mov	r3, r9
 800af4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af50:	f7f5 fb6a 	bl	8000628 <__aeabi_dmul>
 800af54:	4b27      	ldr	r3, [pc, #156]	; (800aff4 <_strtod_l+0x594>)
 800af56:	460a      	mov	r2, r1
 800af58:	400b      	ands	r3, r1
 800af5a:	4927      	ldr	r1, [pc, #156]	; (800aff8 <_strtod_l+0x598>)
 800af5c:	428b      	cmp	r3, r1
 800af5e:	4680      	mov	r8, r0
 800af60:	d8be      	bhi.n	800aee0 <_strtod_l+0x480>
 800af62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800af66:	428b      	cmp	r3, r1
 800af68:	bf86      	itte	hi
 800af6a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800affc <_strtod_l+0x59c>
 800af6e:	f04f 38ff 	movhi.w	r8, #4294967295
 800af72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800af76:	2300      	movs	r3, #0
 800af78:	9304      	str	r3, [sp, #16]
 800af7a:	e07b      	b.n	800b074 <_strtod_l+0x614>
 800af7c:	07ea      	lsls	r2, r5, #31
 800af7e:	d505      	bpl.n	800af8c <_strtod_l+0x52c>
 800af80:	9b04      	ldr	r3, [sp, #16]
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	f7f5 fb4f 	bl	8000628 <__aeabi_dmul>
 800af8a:	2301      	movs	r3, #1
 800af8c:	9a04      	ldr	r2, [sp, #16]
 800af8e:	3208      	adds	r2, #8
 800af90:	f10a 0a01 	add.w	sl, sl, #1
 800af94:	106d      	asrs	r5, r5, #1
 800af96:	9204      	str	r2, [sp, #16]
 800af98:	e7cc      	b.n	800af34 <_strtod_l+0x4d4>
 800af9a:	d0ec      	beq.n	800af76 <_strtod_l+0x516>
 800af9c:	426d      	negs	r5, r5
 800af9e:	f015 020f 	ands.w	r2, r5, #15
 800afa2:	d00a      	beq.n	800afba <_strtod_l+0x55a>
 800afa4:	4b11      	ldr	r3, [pc, #68]	; (800afec <_strtod_l+0x58c>)
 800afa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afaa:	4640      	mov	r0, r8
 800afac:	4649      	mov	r1, r9
 800afae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb2:	f7f5 fc63 	bl	800087c <__aeabi_ddiv>
 800afb6:	4680      	mov	r8, r0
 800afb8:	4689      	mov	r9, r1
 800afba:	112d      	asrs	r5, r5, #4
 800afbc:	d0db      	beq.n	800af76 <_strtod_l+0x516>
 800afbe:	2d1f      	cmp	r5, #31
 800afc0:	dd1e      	ble.n	800b000 <_strtod_l+0x5a0>
 800afc2:	2500      	movs	r5, #0
 800afc4:	46ab      	mov	fp, r5
 800afc6:	9509      	str	r5, [sp, #36]	; 0x24
 800afc8:	9505      	str	r5, [sp, #20]
 800afca:	2322      	movs	r3, #34	; 0x22
 800afcc:	f04f 0800 	mov.w	r8, #0
 800afd0:	f04f 0900 	mov.w	r9, #0
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	e78d      	b.n	800aef4 <_strtod_l+0x494>
 800afd8:	0800e73b 	.word	0x0800e73b
 800afdc:	0800e754 	.word	0x0800e754
 800afe0:	0800e732 	.word	0x0800e732
 800afe4:	0800e735 	.word	0x0800e735
 800afe8:	0800eab8 	.word	0x0800eab8
 800afec:	0800e8a8 	.word	0x0800e8a8
 800aff0:	0800e880 	.word	0x0800e880
 800aff4:	7ff00000 	.word	0x7ff00000
 800aff8:	7ca00000 	.word	0x7ca00000
 800affc:	7fefffff 	.word	0x7fefffff
 800b000:	f015 0310 	ands.w	r3, r5, #16
 800b004:	bf18      	it	ne
 800b006:	236a      	movne	r3, #106	; 0x6a
 800b008:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b3ac <_strtod_l+0x94c>
 800b00c:	9304      	str	r3, [sp, #16]
 800b00e:	4640      	mov	r0, r8
 800b010:	4649      	mov	r1, r9
 800b012:	2300      	movs	r3, #0
 800b014:	07ea      	lsls	r2, r5, #31
 800b016:	d504      	bpl.n	800b022 <_strtod_l+0x5c2>
 800b018:	e9da 2300 	ldrd	r2, r3, [sl]
 800b01c:	f7f5 fb04 	bl	8000628 <__aeabi_dmul>
 800b020:	2301      	movs	r3, #1
 800b022:	106d      	asrs	r5, r5, #1
 800b024:	f10a 0a08 	add.w	sl, sl, #8
 800b028:	d1f4      	bne.n	800b014 <_strtod_l+0x5b4>
 800b02a:	b10b      	cbz	r3, 800b030 <_strtod_l+0x5d0>
 800b02c:	4680      	mov	r8, r0
 800b02e:	4689      	mov	r9, r1
 800b030:	9b04      	ldr	r3, [sp, #16]
 800b032:	b1bb      	cbz	r3, 800b064 <_strtod_l+0x604>
 800b034:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b038:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	4649      	mov	r1, r9
 800b040:	dd10      	ble.n	800b064 <_strtod_l+0x604>
 800b042:	2b1f      	cmp	r3, #31
 800b044:	f340 811e 	ble.w	800b284 <_strtod_l+0x824>
 800b048:	2b34      	cmp	r3, #52	; 0x34
 800b04a:	bfde      	ittt	le
 800b04c:	f04f 33ff 	movle.w	r3, #4294967295
 800b050:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b054:	4093      	lslle	r3, r2
 800b056:	f04f 0800 	mov.w	r8, #0
 800b05a:	bfcc      	ite	gt
 800b05c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b060:	ea03 0901 	andle.w	r9, r3, r1
 800b064:	2200      	movs	r2, #0
 800b066:	2300      	movs	r3, #0
 800b068:	4640      	mov	r0, r8
 800b06a:	4649      	mov	r1, r9
 800b06c:	f7f5 fd44 	bl	8000af8 <__aeabi_dcmpeq>
 800b070:	2800      	cmp	r0, #0
 800b072:	d1a6      	bne.n	800afc2 <_strtod_l+0x562>
 800b074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b07a:	4633      	mov	r3, r6
 800b07c:	465a      	mov	r2, fp
 800b07e:	4620      	mov	r0, r4
 800b080:	f001 f904 	bl	800c28c <__s2b>
 800b084:	9009      	str	r0, [sp, #36]	; 0x24
 800b086:	2800      	cmp	r0, #0
 800b088:	f43f af2a 	beq.w	800aee0 <_strtod_l+0x480>
 800b08c:	9a08      	ldr	r2, [sp, #32]
 800b08e:	9b05      	ldr	r3, [sp, #20]
 800b090:	2a00      	cmp	r2, #0
 800b092:	eba3 0307 	sub.w	r3, r3, r7
 800b096:	bfa8      	it	ge
 800b098:	2300      	movge	r3, #0
 800b09a:	930c      	str	r3, [sp, #48]	; 0x30
 800b09c:	2500      	movs	r5, #0
 800b09e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b0a2:	9312      	str	r3, [sp, #72]	; 0x48
 800b0a4:	46ab      	mov	fp, r5
 800b0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	6859      	ldr	r1, [r3, #4]
 800b0ac:	f001 f846 	bl	800c13c <_Balloc>
 800b0b0:	9005      	str	r0, [sp, #20]
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	f43f af18 	beq.w	800aee8 <_strtod_l+0x488>
 800b0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ba:	691a      	ldr	r2, [r3, #16]
 800b0bc:	3202      	adds	r2, #2
 800b0be:	f103 010c 	add.w	r1, r3, #12
 800b0c2:	0092      	lsls	r2, r2, #2
 800b0c4:	300c      	adds	r0, #12
 800b0c6:	f000 fc6a 	bl	800b99e <memcpy>
 800b0ca:	ec49 8b10 	vmov	d0, r8, r9
 800b0ce:	aa18      	add	r2, sp, #96	; 0x60
 800b0d0:	a917      	add	r1, sp, #92	; 0x5c
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f001 fc0e 	bl	800c8f4 <__d2b>
 800b0d8:	ec49 8b18 	vmov	d8, r8, r9
 800b0dc:	9016      	str	r0, [sp, #88]	; 0x58
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	f43f af02 	beq.w	800aee8 <_strtod_l+0x488>
 800b0e4:	2101      	movs	r1, #1
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f001 f968 	bl	800c3bc <__i2b>
 800b0ec:	4683      	mov	fp, r0
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f43f aefa 	beq.w	800aee8 <_strtod_l+0x488>
 800b0f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b0f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b0f8:	2e00      	cmp	r6, #0
 800b0fa:	bfab      	itete	ge
 800b0fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b0fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b100:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b102:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b106:	bfac      	ite	ge
 800b108:	eb06 0a03 	addge.w	sl, r6, r3
 800b10c:	1b9f      	sublt	r7, r3, r6
 800b10e:	9b04      	ldr	r3, [sp, #16]
 800b110:	1af6      	subs	r6, r6, r3
 800b112:	4416      	add	r6, r2
 800b114:	4ba0      	ldr	r3, [pc, #640]	; (800b398 <_strtod_l+0x938>)
 800b116:	3e01      	subs	r6, #1
 800b118:	429e      	cmp	r6, r3
 800b11a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b11e:	f280 80c4 	bge.w	800b2aa <_strtod_l+0x84a>
 800b122:	1b9b      	subs	r3, r3, r6
 800b124:	2b1f      	cmp	r3, #31
 800b126:	eba2 0203 	sub.w	r2, r2, r3
 800b12a:	f04f 0101 	mov.w	r1, #1
 800b12e:	f300 80b0 	bgt.w	800b292 <_strtod_l+0x832>
 800b132:	fa01 f303 	lsl.w	r3, r1, r3
 800b136:	930e      	str	r3, [sp, #56]	; 0x38
 800b138:	2300      	movs	r3, #0
 800b13a:	930d      	str	r3, [sp, #52]	; 0x34
 800b13c:	eb0a 0602 	add.w	r6, sl, r2
 800b140:	9b04      	ldr	r3, [sp, #16]
 800b142:	45b2      	cmp	sl, r6
 800b144:	4417      	add	r7, r2
 800b146:	441f      	add	r7, r3
 800b148:	4653      	mov	r3, sl
 800b14a:	bfa8      	it	ge
 800b14c:	4633      	movge	r3, r6
 800b14e:	42bb      	cmp	r3, r7
 800b150:	bfa8      	it	ge
 800b152:	463b      	movge	r3, r7
 800b154:	2b00      	cmp	r3, #0
 800b156:	bfc2      	ittt	gt
 800b158:	1af6      	subgt	r6, r6, r3
 800b15a:	1aff      	subgt	r7, r7, r3
 800b15c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b162:	2b00      	cmp	r3, #0
 800b164:	dd17      	ble.n	800b196 <_strtod_l+0x736>
 800b166:	4659      	mov	r1, fp
 800b168:	461a      	mov	r2, r3
 800b16a:	4620      	mov	r0, r4
 800b16c:	f001 f9e6 	bl	800c53c <__pow5mult>
 800b170:	4683      	mov	fp, r0
 800b172:	2800      	cmp	r0, #0
 800b174:	f43f aeb8 	beq.w	800aee8 <_strtod_l+0x488>
 800b178:	4601      	mov	r1, r0
 800b17a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b17c:	4620      	mov	r0, r4
 800b17e:	f001 f933 	bl	800c3e8 <__multiply>
 800b182:	900b      	str	r0, [sp, #44]	; 0x2c
 800b184:	2800      	cmp	r0, #0
 800b186:	f43f aeaf 	beq.w	800aee8 <_strtod_l+0x488>
 800b18a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b18c:	4620      	mov	r0, r4
 800b18e:	f001 f815 	bl	800c1bc <_Bfree>
 800b192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b194:	9316      	str	r3, [sp, #88]	; 0x58
 800b196:	2e00      	cmp	r6, #0
 800b198:	f300 808c 	bgt.w	800b2b4 <_strtod_l+0x854>
 800b19c:	9b08      	ldr	r3, [sp, #32]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	dd08      	ble.n	800b1b4 <_strtod_l+0x754>
 800b1a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1a4:	9905      	ldr	r1, [sp, #20]
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f001 f9c8 	bl	800c53c <__pow5mult>
 800b1ac:	9005      	str	r0, [sp, #20]
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	f43f ae9a 	beq.w	800aee8 <_strtod_l+0x488>
 800b1b4:	2f00      	cmp	r7, #0
 800b1b6:	dd08      	ble.n	800b1ca <_strtod_l+0x76a>
 800b1b8:	9905      	ldr	r1, [sp, #20]
 800b1ba:	463a      	mov	r2, r7
 800b1bc:	4620      	mov	r0, r4
 800b1be:	f001 fa17 	bl	800c5f0 <__lshift>
 800b1c2:	9005      	str	r0, [sp, #20]
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	f43f ae8f 	beq.w	800aee8 <_strtod_l+0x488>
 800b1ca:	f1ba 0f00 	cmp.w	sl, #0
 800b1ce:	dd08      	ble.n	800b1e2 <_strtod_l+0x782>
 800b1d0:	4659      	mov	r1, fp
 800b1d2:	4652      	mov	r2, sl
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f001 fa0b 	bl	800c5f0 <__lshift>
 800b1da:	4683      	mov	fp, r0
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	f43f ae83 	beq.w	800aee8 <_strtod_l+0x488>
 800b1e2:	9a05      	ldr	r2, [sp, #20]
 800b1e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f001 fa8a 	bl	800c700 <__mdiff>
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	f43f ae7a 	beq.w	800aee8 <_strtod_l+0x488>
 800b1f4:	68c3      	ldr	r3, [r0, #12]
 800b1f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	60c3      	str	r3, [r0, #12]
 800b1fc:	4659      	mov	r1, fp
 800b1fe:	f001 fa63 	bl	800c6c8 <__mcmp>
 800b202:	2800      	cmp	r0, #0
 800b204:	da60      	bge.n	800b2c8 <_strtod_l+0x868>
 800b206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b208:	ea53 0308 	orrs.w	r3, r3, r8
 800b20c:	f040 8084 	bne.w	800b318 <_strtod_l+0x8b8>
 800b210:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b214:	2b00      	cmp	r3, #0
 800b216:	d17f      	bne.n	800b318 <_strtod_l+0x8b8>
 800b218:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b21c:	0d1b      	lsrs	r3, r3, #20
 800b21e:	051b      	lsls	r3, r3, #20
 800b220:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b224:	d978      	bls.n	800b318 <_strtod_l+0x8b8>
 800b226:	696b      	ldr	r3, [r5, #20]
 800b228:	b913      	cbnz	r3, 800b230 <_strtod_l+0x7d0>
 800b22a:	692b      	ldr	r3, [r5, #16]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	dd73      	ble.n	800b318 <_strtod_l+0x8b8>
 800b230:	4629      	mov	r1, r5
 800b232:	2201      	movs	r2, #1
 800b234:	4620      	mov	r0, r4
 800b236:	f001 f9db 	bl	800c5f0 <__lshift>
 800b23a:	4659      	mov	r1, fp
 800b23c:	4605      	mov	r5, r0
 800b23e:	f001 fa43 	bl	800c6c8 <__mcmp>
 800b242:	2800      	cmp	r0, #0
 800b244:	dd68      	ble.n	800b318 <_strtod_l+0x8b8>
 800b246:	9904      	ldr	r1, [sp, #16]
 800b248:	4a54      	ldr	r2, [pc, #336]	; (800b39c <_strtod_l+0x93c>)
 800b24a:	464b      	mov	r3, r9
 800b24c:	2900      	cmp	r1, #0
 800b24e:	f000 8084 	beq.w	800b35a <_strtod_l+0x8fa>
 800b252:	ea02 0109 	and.w	r1, r2, r9
 800b256:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b25a:	dc7e      	bgt.n	800b35a <_strtod_l+0x8fa>
 800b25c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b260:	f77f aeb3 	ble.w	800afca <_strtod_l+0x56a>
 800b264:	4b4e      	ldr	r3, [pc, #312]	; (800b3a0 <_strtod_l+0x940>)
 800b266:	4640      	mov	r0, r8
 800b268:	4649      	mov	r1, r9
 800b26a:	2200      	movs	r2, #0
 800b26c:	f7f5 f9dc 	bl	8000628 <__aeabi_dmul>
 800b270:	4b4a      	ldr	r3, [pc, #296]	; (800b39c <_strtod_l+0x93c>)
 800b272:	400b      	ands	r3, r1
 800b274:	4680      	mov	r8, r0
 800b276:	4689      	mov	r9, r1
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f47f ae3f 	bne.w	800aefc <_strtod_l+0x49c>
 800b27e:	2322      	movs	r3, #34	; 0x22
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	e63b      	b.n	800aefc <_strtod_l+0x49c>
 800b284:	f04f 32ff 	mov.w	r2, #4294967295
 800b288:	fa02 f303 	lsl.w	r3, r2, r3
 800b28c:	ea03 0808 	and.w	r8, r3, r8
 800b290:	e6e8      	b.n	800b064 <_strtod_l+0x604>
 800b292:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b296:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b29a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b29e:	36e2      	adds	r6, #226	; 0xe2
 800b2a0:	fa01 f306 	lsl.w	r3, r1, r6
 800b2a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b2a8:	e748      	b.n	800b13c <_strtod_l+0x6dc>
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b2b2:	e743      	b.n	800b13c <_strtod_l+0x6dc>
 800b2b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b2b6:	4632      	mov	r2, r6
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f001 f999 	bl	800c5f0 <__lshift>
 800b2be:	9016      	str	r0, [sp, #88]	; 0x58
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	f47f af6b 	bne.w	800b19c <_strtod_l+0x73c>
 800b2c6:	e60f      	b.n	800aee8 <_strtod_l+0x488>
 800b2c8:	46ca      	mov	sl, r9
 800b2ca:	d171      	bne.n	800b3b0 <_strtod_l+0x950>
 800b2cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2d2:	b352      	cbz	r2, 800b32a <_strtod_l+0x8ca>
 800b2d4:	4a33      	ldr	r2, [pc, #204]	; (800b3a4 <_strtod_l+0x944>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d12a      	bne.n	800b330 <_strtod_l+0x8d0>
 800b2da:	9b04      	ldr	r3, [sp, #16]
 800b2dc:	4641      	mov	r1, r8
 800b2de:	b1fb      	cbz	r3, 800b320 <_strtod_l+0x8c0>
 800b2e0:	4b2e      	ldr	r3, [pc, #184]	; (800b39c <_strtod_l+0x93c>)
 800b2e2:	ea09 0303 	and.w	r3, r9, r3
 800b2e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ee:	d81a      	bhi.n	800b326 <_strtod_l+0x8c6>
 800b2f0:	0d1b      	lsrs	r3, r3, #20
 800b2f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fa:	4299      	cmp	r1, r3
 800b2fc:	d118      	bne.n	800b330 <_strtod_l+0x8d0>
 800b2fe:	4b2a      	ldr	r3, [pc, #168]	; (800b3a8 <_strtod_l+0x948>)
 800b300:	459a      	cmp	sl, r3
 800b302:	d102      	bne.n	800b30a <_strtod_l+0x8aa>
 800b304:	3101      	adds	r1, #1
 800b306:	f43f adef 	beq.w	800aee8 <_strtod_l+0x488>
 800b30a:	4b24      	ldr	r3, [pc, #144]	; (800b39c <_strtod_l+0x93c>)
 800b30c:	ea0a 0303 	and.w	r3, sl, r3
 800b310:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b314:	f04f 0800 	mov.w	r8, #0
 800b318:	9b04      	ldr	r3, [sp, #16]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1a2      	bne.n	800b264 <_strtod_l+0x804>
 800b31e:	e5ed      	b.n	800aefc <_strtod_l+0x49c>
 800b320:	f04f 33ff 	mov.w	r3, #4294967295
 800b324:	e7e9      	b.n	800b2fa <_strtod_l+0x89a>
 800b326:	4613      	mov	r3, r2
 800b328:	e7e7      	b.n	800b2fa <_strtod_l+0x89a>
 800b32a:	ea53 0308 	orrs.w	r3, r3, r8
 800b32e:	d08a      	beq.n	800b246 <_strtod_l+0x7e6>
 800b330:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b332:	b1e3      	cbz	r3, 800b36e <_strtod_l+0x90e>
 800b334:	ea13 0f0a 	tst.w	r3, sl
 800b338:	d0ee      	beq.n	800b318 <_strtod_l+0x8b8>
 800b33a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b33c:	9a04      	ldr	r2, [sp, #16]
 800b33e:	4640      	mov	r0, r8
 800b340:	4649      	mov	r1, r9
 800b342:	b1c3      	cbz	r3, 800b376 <_strtod_l+0x916>
 800b344:	f7ff fb6e 	bl	800aa24 <sulp>
 800b348:	4602      	mov	r2, r0
 800b34a:	460b      	mov	r3, r1
 800b34c:	ec51 0b18 	vmov	r0, r1, d8
 800b350:	f7f4 ffb4 	bl	80002bc <__adddf3>
 800b354:	4680      	mov	r8, r0
 800b356:	4689      	mov	r9, r1
 800b358:	e7de      	b.n	800b318 <_strtod_l+0x8b8>
 800b35a:	4013      	ands	r3, r2
 800b35c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b360:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b364:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b368:	f04f 38ff 	mov.w	r8, #4294967295
 800b36c:	e7d4      	b.n	800b318 <_strtod_l+0x8b8>
 800b36e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b370:	ea13 0f08 	tst.w	r3, r8
 800b374:	e7e0      	b.n	800b338 <_strtod_l+0x8d8>
 800b376:	f7ff fb55 	bl	800aa24 <sulp>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	ec51 0b18 	vmov	r0, r1, d8
 800b382:	f7f4 ff99 	bl	80002b8 <__aeabi_dsub>
 800b386:	2200      	movs	r2, #0
 800b388:	2300      	movs	r3, #0
 800b38a:	4680      	mov	r8, r0
 800b38c:	4689      	mov	r9, r1
 800b38e:	f7f5 fbb3 	bl	8000af8 <__aeabi_dcmpeq>
 800b392:	2800      	cmp	r0, #0
 800b394:	d0c0      	beq.n	800b318 <_strtod_l+0x8b8>
 800b396:	e618      	b.n	800afca <_strtod_l+0x56a>
 800b398:	fffffc02 	.word	0xfffffc02
 800b39c:	7ff00000 	.word	0x7ff00000
 800b3a0:	39500000 	.word	0x39500000
 800b3a4:	000fffff 	.word	0x000fffff
 800b3a8:	7fefffff 	.word	0x7fefffff
 800b3ac:	0800e768 	.word	0x0800e768
 800b3b0:	4659      	mov	r1, fp
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	f001 faf8 	bl	800c9a8 <__ratio>
 800b3b8:	ec57 6b10 	vmov	r6, r7, d0
 800b3bc:	ee10 0a10 	vmov	r0, s0
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3c6:	4639      	mov	r1, r7
 800b3c8:	f7f5 fbaa 	bl	8000b20 <__aeabi_dcmple>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d071      	beq.n	800b4b4 <_strtod_l+0xa54>
 800b3d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d17c      	bne.n	800b4d0 <_strtod_l+0xa70>
 800b3d6:	f1b8 0f00 	cmp.w	r8, #0
 800b3da:	d15a      	bne.n	800b492 <_strtod_l+0xa32>
 800b3dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d15d      	bne.n	800b4a0 <_strtod_l+0xa40>
 800b3e4:	4b90      	ldr	r3, [pc, #576]	; (800b628 <_strtod_l+0xbc8>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	f7f5 fb8e 	bl	8000b0c <__aeabi_dcmplt>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	d15c      	bne.n	800b4ae <_strtod_l+0xa4e>
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	4639      	mov	r1, r7
 800b3f8:	4b8c      	ldr	r3, [pc, #560]	; (800b62c <_strtod_l+0xbcc>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f7f5 f914 	bl	8000628 <__aeabi_dmul>
 800b400:	4606      	mov	r6, r0
 800b402:	460f      	mov	r7, r1
 800b404:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b408:	9606      	str	r6, [sp, #24]
 800b40a:	9307      	str	r3, [sp, #28]
 800b40c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b410:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b414:	4b86      	ldr	r3, [pc, #536]	; (800b630 <_strtod_l+0xbd0>)
 800b416:	ea0a 0303 	and.w	r3, sl, r3
 800b41a:	930d      	str	r3, [sp, #52]	; 0x34
 800b41c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b41e:	4b85      	ldr	r3, [pc, #532]	; (800b634 <_strtod_l+0xbd4>)
 800b420:	429a      	cmp	r2, r3
 800b422:	f040 8090 	bne.w	800b546 <_strtod_l+0xae6>
 800b426:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b42a:	ec49 8b10 	vmov	d0, r8, r9
 800b42e:	f001 f9f1 	bl	800c814 <__ulp>
 800b432:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b436:	ec51 0b10 	vmov	r0, r1, d0
 800b43a:	f7f5 f8f5 	bl	8000628 <__aeabi_dmul>
 800b43e:	4642      	mov	r2, r8
 800b440:	464b      	mov	r3, r9
 800b442:	f7f4 ff3b 	bl	80002bc <__adddf3>
 800b446:	460b      	mov	r3, r1
 800b448:	4979      	ldr	r1, [pc, #484]	; (800b630 <_strtod_l+0xbd0>)
 800b44a:	4a7b      	ldr	r2, [pc, #492]	; (800b638 <_strtod_l+0xbd8>)
 800b44c:	4019      	ands	r1, r3
 800b44e:	4291      	cmp	r1, r2
 800b450:	4680      	mov	r8, r0
 800b452:	d944      	bls.n	800b4de <_strtod_l+0xa7e>
 800b454:	ee18 2a90 	vmov	r2, s17
 800b458:	4b78      	ldr	r3, [pc, #480]	; (800b63c <_strtod_l+0xbdc>)
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d104      	bne.n	800b468 <_strtod_l+0xa08>
 800b45e:	ee18 3a10 	vmov	r3, s16
 800b462:	3301      	adds	r3, #1
 800b464:	f43f ad40 	beq.w	800aee8 <_strtod_l+0x488>
 800b468:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b63c <_strtod_l+0xbdc>
 800b46c:	f04f 38ff 	mov.w	r8, #4294967295
 800b470:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b472:	4620      	mov	r0, r4
 800b474:	f000 fea2 	bl	800c1bc <_Bfree>
 800b478:	9905      	ldr	r1, [sp, #20]
 800b47a:	4620      	mov	r0, r4
 800b47c:	f000 fe9e 	bl	800c1bc <_Bfree>
 800b480:	4659      	mov	r1, fp
 800b482:	4620      	mov	r0, r4
 800b484:	f000 fe9a 	bl	800c1bc <_Bfree>
 800b488:	4629      	mov	r1, r5
 800b48a:	4620      	mov	r0, r4
 800b48c:	f000 fe96 	bl	800c1bc <_Bfree>
 800b490:	e609      	b.n	800b0a6 <_strtod_l+0x646>
 800b492:	f1b8 0f01 	cmp.w	r8, #1
 800b496:	d103      	bne.n	800b4a0 <_strtod_l+0xa40>
 800b498:	f1b9 0f00 	cmp.w	r9, #0
 800b49c:	f43f ad95 	beq.w	800afca <_strtod_l+0x56a>
 800b4a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b5f8 <_strtod_l+0xb98>
 800b4a4:	4f60      	ldr	r7, [pc, #384]	; (800b628 <_strtod_l+0xbc8>)
 800b4a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4aa:	2600      	movs	r6, #0
 800b4ac:	e7ae      	b.n	800b40c <_strtod_l+0x9ac>
 800b4ae:	4f5f      	ldr	r7, [pc, #380]	; (800b62c <_strtod_l+0xbcc>)
 800b4b0:	2600      	movs	r6, #0
 800b4b2:	e7a7      	b.n	800b404 <_strtod_l+0x9a4>
 800b4b4:	4b5d      	ldr	r3, [pc, #372]	; (800b62c <_strtod_l+0xbcc>)
 800b4b6:	4630      	mov	r0, r6
 800b4b8:	4639      	mov	r1, r7
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f7f5 f8b4 	bl	8000628 <__aeabi_dmul>
 800b4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	460f      	mov	r7, r1
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d09c      	beq.n	800b404 <_strtod_l+0x9a4>
 800b4ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b4ce:	e79d      	b.n	800b40c <_strtod_l+0x9ac>
 800b4d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b600 <_strtod_l+0xba0>
 800b4d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4d8:	ec57 6b17 	vmov	r6, r7, d7
 800b4dc:	e796      	b.n	800b40c <_strtod_l+0x9ac>
 800b4de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b4e2:	9b04      	ldr	r3, [sp, #16]
 800b4e4:	46ca      	mov	sl, r9
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1c2      	bne.n	800b470 <_strtod_l+0xa10>
 800b4ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4f0:	0d1b      	lsrs	r3, r3, #20
 800b4f2:	051b      	lsls	r3, r3, #20
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d1bb      	bne.n	800b470 <_strtod_l+0xa10>
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	4639      	mov	r1, r7
 800b4fc:	f7f5 fc44 	bl	8000d88 <__aeabi_d2lz>
 800b500:	f7f5 f864 	bl	80005cc <__aeabi_l2d>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f4 fed4 	bl	80002b8 <__aeabi_dsub>
 800b510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b512:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b516:	ea43 0308 	orr.w	r3, r3, r8
 800b51a:	4313      	orrs	r3, r2
 800b51c:	4606      	mov	r6, r0
 800b51e:	460f      	mov	r7, r1
 800b520:	d054      	beq.n	800b5cc <_strtod_l+0xb6c>
 800b522:	a339      	add	r3, pc, #228	; (adr r3, 800b608 <_strtod_l+0xba8>)
 800b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b528:	f7f5 faf0 	bl	8000b0c <__aeabi_dcmplt>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	f47f ace5 	bne.w	800aefc <_strtod_l+0x49c>
 800b532:	a337      	add	r3, pc, #220	; (adr r3, 800b610 <_strtod_l+0xbb0>)
 800b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b538:	4630      	mov	r0, r6
 800b53a:	4639      	mov	r1, r7
 800b53c:	f7f5 fb04 	bl	8000b48 <__aeabi_dcmpgt>
 800b540:	2800      	cmp	r0, #0
 800b542:	d095      	beq.n	800b470 <_strtod_l+0xa10>
 800b544:	e4da      	b.n	800aefc <_strtod_l+0x49c>
 800b546:	9b04      	ldr	r3, [sp, #16]
 800b548:	b333      	cbz	r3, 800b598 <_strtod_l+0xb38>
 800b54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b54c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b550:	d822      	bhi.n	800b598 <_strtod_l+0xb38>
 800b552:	a331      	add	r3, pc, #196	; (adr r3, 800b618 <_strtod_l+0xbb8>)
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	4630      	mov	r0, r6
 800b55a:	4639      	mov	r1, r7
 800b55c:	f7f5 fae0 	bl	8000b20 <__aeabi_dcmple>
 800b560:	b1a0      	cbz	r0, 800b58c <_strtod_l+0xb2c>
 800b562:	4639      	mov	r1, r7
 800b564:	4630      	mov	r0, r6
 800b566:	f7f5 fb37 	bl	8000bd8 <__aeabi_d2uiz>
 800b56a:	2801      	cmp	r0, #1
 800b56c:	bf38      	it	cc
 800b56e:	2001      	movcc	r0, #1
 800b570:	f7f4 ffe0 	bl	8000534 <__aeabi_ui2d>
 800b574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b576:	4606      	mov	r6, r0
 800b578:	460f      	mov	r7, r1
 800b57a:	bb23      	cbnz	r3, 800b5c6 <_strtod_l+0xb66>
 800b57c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b580:	9010      	str	r0, [sp, #64]	; 0x40
 800b582:	9311      	str	r3, [sp, #68]	; 0x44
 800b584:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b588:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b58c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b58e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b590:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b594:	1a9b      	subs	r3, r3, r2
 800b596:	930f      	str	r3, [sp, #60]	; 0x3c
 800b598:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b59c:	eeb0 0a48 	vmov.f32	s0, s16
 800b5a0:	eef0 0a68 	vmov.f32	s1, s17
 800b5a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b5a8:	f001 f934 	bl	800c814 <__ulp>
 800b5ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b5b0:	ec53 2b10 	vmov	r2, r3, d0
 800b5b4:	f7f5 f838 	bl	8000628 <__aeabi_dmul>
 800b5b8:	ec53 2b18 	vmov	r2, r3, d8
 800b5bc:	f7f4 fe7e 	bl	80002bc <__adddf3>
 800b5c0:	4680      	mov	r8, r0
 800b5c2:	4689      	mov	r9, r1
 800b5c4:	e78d      	b.n	800b4e2 <_strtod_l+0xa82>
 800b5c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b5ca:	e7db      	b.n	800b584 <_strtod_l+0xb24>
 800b5cc:	a314      	add	r3, pc, #80	; (adr r3, 800b620 <_strtod_l+0xbc0>)
 800b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d2:	f7f5 fa9b 	bl	8000b0c <__aeabi_dcmplt>
 800b5d6:	e7b3      	b.n	800b540 <_strtod_l+0xae0>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	930a      	str	r3, [sp, #40]	; 0x28
 800b5dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b5de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5e0:	6013      	str	r3, [r2, #0]
 800b5e2:	f7ff ba7c 	b.w	800aade <_strtod_l+0x7e>
 800b5e6:	2a65      	cmp	r2, #101	; 0x65
 800b5e8:	f43f ab75 	beq.w	800acd6 <_strtod_l+0x276>
 800b5ec:	2a45      	cmp	r2, #69	; 0x45
 800b5ee:	f43f ab72 	beq.w	800acd6 <_strtod_l+0x276>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	f7ff bbaa 	b.w	800ad4c <_strtod_l+0x2ec>
 800b5f8:	00000000 	.word	0x00000000
 800b5fc:	bff00000 	.word	0xbff00000
 800b600:	00000000 	.word	0x00000000
 800b604:	3ff00000 	.word	0x3ff00000
 800b608:	94a03595 	.word	0x94a03595
 800b60c:	3fdfffff 	.word	0x3fdfffff
 800b610:	35afe535 	.word	0x35afe535
 800b614:	3fe00000 	.word	0x3fe00000
 800b618:	ffc00000 	.word	0xffc00000
 800b61c:	41dfffff 	.word	0x41dfffff
 800b620:	94a03595 	.word	0x94a03595
 800b624:	3fcfffff 	.word	0x3fcfffff
 800b628:	3ff00000 	.word	0x3ff00000
 800b62c:	3fe00000 	.word	0x3fe00000
 800b630:	7ff00000 	.word	0x7ff00000
 800b634:	7fe00000 	.word	0x7fe00000
 800b638:	7c9fffff 	.word	0x7c9fffff
 800b63c:	7fefffff 	.word	0x7fefffff

0800b640 <strtod>:
 800b640:	460a      	mov	r2, r1
 800b642:	4601      	mov	r1, r0
 800b644:	4802      	ldr	r0, [pc, #8]	; (800b650 <strtod+0x10>)
 800b646:	4b03      	ldr	r3, [pc, #12]	; (800b654 <strtod+0x14>)
 800b648:	6800      	ldr	r0, [r0, #0]
 800b64a:	f7ff ba09 	b.w	800aa60 <_strtod_l>
 800b64e:	bf00      	nop
 800b650:	20000228 	.word	0x20000228
 800b654:	20000070 	.word	0x20000070

0800b658 <std>:
 800b658:	2300      	movs	r3, #0
 800b65a:	b510      	push	{r4, lr}
 800b65c:	4604      	mov	r4, r0
 800b65e:	e9c0 3300 	strd	r3, r3, [r0]
 800b662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b666:	6083      	str	r3, [r0, #8]
 800b668:	8181      	strh	r1, [r0, #12]
 800b66a:	6643      	str	r3, [r0, #100]	; 0x64
 800b66c:	81c2      	strh	r2, [r0, #14]
 800b66e:	6183      	str	r3, [r0, #24]
 800b670:	4619      	mov	r1, r3
 800b672:	2208      	movs	r2, #8
 800b674:	305c      	adds	r0, #92	; 0x5c
 800b676:	f000 f8f4 	bl	800b862 <memset>
 800b67a:	4b0d      	ldr	r3, [pc, #52]	; (800b6b0 <std+0x58>)
 800b67c:	6263      	str	r3, [r4, #36]	; 0x24
 800b67e:	4b0d      	ldr	r3, [pc, #52]	; (800b6b4 <std+0x5c>)
 800b680:	62a3      	str	r3, [r4, #40]	; 0x28
 800b682:	4b0d      	ldr	r3, [pc, #52]	; (800b6b8 <std+0x60>)
 800b684:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b686:	4b0d      	ldr	r3, [pc, #52]	; (800b6bc <std+0x64>)
 800b688:	6323      	str	r3, [r4, #48]	; 0x30
 800b68a:	4b0d      	ldr	r3, [pc, #52]	; (800b6c0 <std+0x68>)
 800b68c:	6224      	str	r4, [r4, #32]
 800b68e:	429c      	cmp	r4, r3
 800b690:	d006      	beq.n	800b6a0 <std+0x48>
 800b692:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b696:	4294      	cmp	r4, r2
 800b698:	d002      	beq.n	800b6a0 <std+0x48>
 800b69a:	33d0      	adds	r3, #208	; 0xd0
 800b69c:	429c      	cmp	r4, r3
 800b69e:	d105      	bne.n	800b6ac <std+0x54>
 800b6a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6a8:	f000 b976 	b.w	800b998 <__retarget_lock_init_recursive>
 800b6ac:	bd10      	pop	{r4, pc}
 800b6ae:	bf00      	nop
 800b6b0:	0800b7dd 	.word	0x0800b7dd
 800b6b4:	0800b7ff 	.word	0x0800b7ff
 800b6b8:	0800b837 	.word	0x0800b837
 800b6bc:	0800b85b 	.word	0x0800b85b
 800b6c0:	200008d0 	.word	0x200008d0

0800b6c4 <stdio_exit_handler>:
 800b6c4:	4a02      	ldr	r2, [pc, #8]	; (800b6d0 <stdio_exit_handler+0xc>)
 800b6c6:	4903      	ldr	r1, [pc, #12]	; (800b6d4 <stdio_exit_handler+0x10>)
 800b6c8:	4803      	ldr	r0, [pc, #12]	; (800b6d8 <stdio_exit_handler+0x14>)
 800b6ca:	f000 b869 	b.w	800b7a0 <_fwalk_sglue>
 800b6ce:	bf00      	nop
 800b6d0:	20000064 	.word	0x20000064
 800b6d4:	0800cbbd 	.word	0x0800cbbd
 800b6d8:	200001dc 	.word	0x200001dc

0800b6dc <cleanup_stdio>:
 800b6dc:	6841      	ldr	r1, [r0, #4]
 800b6de:	4b0c      	ldr	r3, [pc, #48]	; (800b710 <cleanup_stdio+0x34>)
 800b6e0:	4299      	cmp	r1, r3
 800b6e2:	b510      	push	{r4, lr}
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	d001      	beq.n	800b6ec <cleanup_stdio+0x10>
 800b6e8:	f001 fa68 	bl	800cbbc <_fflush_r>
 800b6ec:	68a1      	ldr	r1, [r4, #8]
 800b6ee:	4b09      	ldr	r3, [pc, #36]	; (800b714 <cleanup_stdio+0x38>)
 800b6f0:	4299      	cmp	r1, r3
 800b6f2:	d002      	beq.n	800b6fa <cleanup_stdio+0x1e>
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f001 fa61 	bl	800cbbc <_fflush_r>
 800b6fa:	68e1      	ldr	r1, [r4, #12]
 800b6fc:	4b06      	ldr	r3, [pc, #24]	; (800b718 <cleanup_stdio+0x3c>)
 800b6fe:	4299      	cmp	r1, r3
 800b700:	d004      	beq.n	800b70c <cleanup_stdio+0x30>
 800b702:	4620      	mov	r0, r4
 800b704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b708:	f001 ba58 	b.w	800cbbc <_fflush_r>
 800b70c:	bd10      	pop	{r4, pc}
 800b70e:	bf00      	nop
 800b710:	200008d0 	.word	0x200008d0
 800b714:	20000938 	.word	0x20000938
 800b718:	200009a0 	.word	0x200009a0

0800b71c <global_stdio_init.part.0>:
 800b71c:	b510      	push	{r4, lr}
 800b71e:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <global_stdio_init.part.0+0x30>)
 800b720:	4c0b      	ldr	r4, [pc, #44]	; (800b750 <global_stdio_init.part.0+0x34>)
 800b722:	4a0c      	ldr	r2, [pc, #48]	; (800b754 <global_stdio_init.part.0+0x38>)
 800b724:	601a      	str	r2, [r3, #0]
 800b726:	4620      	mov	r0, r4
 800b728:	2200      	movs	r2, #0
 800b72a:	2104      	movs	r1, #4
 800b72c:	f7ff ff94 	bl	800b658 <std>
 800b730:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b734:	2201      	movs	r2, #1
 800b736:	2109      	movs	r1, #9
 800b738:	f7ff ff8e 	bl	800b658 <std>
 800b73c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b740:	2202      	movs	r2, #2
 800b742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b746:	2112      	movs	r1, #18
 800b748:	f7ff bf86 	b.w	800b658 <std>
 800b74c:	20000a08 	.word	0x20000a08
 800b750:	200008d0 	.word	0x200008d0
 800b754:	0800b6c5 	.word	0x0800b6c5

0800b758 <__sfp_lock_acquire>:
 800b758:	4801      	ldr	r0, [pc, #4]	; (800b760 <__sfp_lock_acquire+0x8>)
 800b75a:	f000 b91e 	b.w	800b99a <__retarget_lock_acquire_recursive>
 800b75e:	bf00      	nop
 800b760:	20000a11 	.word	0x20000a11

0800b764 <__sfp_lock_release>:
 800b764:	4801      	ldr	r0, [pc, #4]	; (800b76c <__sfp_lock_release+0x8>)
 800b766:	f000 b919 	b.w	800b99c <__retarget_lock_release_recursive>
 800b76a:	bf00      	nop
 800b76c:	20000a11 	.word	0x20000a11

0800b770 <__sinit>:
 800b770:	b510      	push	{r4, lr}
 800b772:	4604      	mov	r4, r0
 800b774:	f7ff fff0 	bl	800b758 <__sfp_lock_acquire>
 800b778:	6a23      	ldr	r3, [r4, #32]
 800b77a:	b11b      	cbz	r3, 800b784 <__sinit+0x14>
 800b77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b780:	f7ff bff0 	b.w	800b764 <__sfp_lock_release>
 800b784:	4b04      	ldr	r3, [pc, #16]	; (800b798 <__sinit+0x28>)
 800b786:	6223      	str	r3, [r4, #32]
 800b788:	4b04      	ldr	r3, [pc, #16]	; (800b79c <__sinit+0x2c>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1f5      	bne.n	800b77c <__sinit+0xc>
 800b790:	f7ff ffc4 	bl	800b71c <global_stdio_init.part.0>
 800b794:	e7f2      	b.n	800b77c <__sinit+0xc>
 800b796:	bf00      	nop
 800b798:	0800b6dd 	.word	0x0800b6dd
 800b79c:	20000a08 	.word	0x20000a08

0800b7a0 <_fwalk_sglue>:
 800b7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	4688      	mov	r8, r1
 800b7a8:	4614      	mov	r4, r2
 800b7aa:	2600      	movs	r6, #0
 800b7ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7b0:	f1b9 0901 	subs.w	r9, r9, #1
 800b7b4:	d505      	bpl.n	800b7c2 <_fwalk_sglue+0x22>
 800b7b6:	6824      	ldr	r4, [r4, #0]
 800b7b8:	2c00      	cmp	r4, #0
 800b7ba:	d1f7      	bne.n	800b7ac <_fwalk_sglue+0xc>
 800b7bc:	4630      	mov	r0, r6
 800b7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c2:	89ab      	ldrh	r3, [r5, #12]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d907      	bls.n	800b7d8 <_fwalk_sglue+0x38>
 800b7c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	d003      	beq.n	800b7d8 <_fwalk_sglue+0x38>
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	47c0      	blx	r8
 800b7d6:	4306      	orrs	r6, r0
 800b7d8:	3568      	adds	r5, #104	; 0x68
 800b7da:	e7e9      	b.n	800b7b0 <_fwalk_sglue+0x10>

0800b7dc <__sread>:
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	460c      	mov	r4, r1
 800b7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e4:	f000 f87a 	bl	800b8dc <_read_r>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	bfab      	itete	ge
 800b7ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7ee:	89a3      	ldrhlt	r3, [r4, #12]
 800b7f0:	181b      	addge	r3, r3, r0
 800b7f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7f6:	bfac      	ite	ge
 800b7f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7fa:	81a3      	strhlt	r3, [r4, #12]
 800b7fc:	bd10      	pop	{r4, pc}

0800b7fe <__swrite>:
 800b7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b802:	461f      	mov	r7, r3
 800b804:	898b      	ldrh	r3, [r1, #12]
 800b806:	05db      	lsls	r3, r3, #23
 800b808:	4605      	mov	r5, r0
 800b80a:	460c      	mov	r4, r1
 800b80c:	4616      	mov	r6, r2
 800b80e:	d505      	bpl.n	800b81c <__swrite+0x1e>
 800b810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b814:	2302      	movs	r3, #2
 800b816:	2200      	movs	r2, #0
 800b818:	f000 f84e 	bl	800b8b8 <_lseek_r>
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b826:	81a3      	strh	r3, [r4, #12]
 800b828:	4632      	mov	r2, r6
 800b82a:	463b      	mov	r3, r7
 800b82c:	4628      	mov	r0, r5
 800b82e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b832:	f000 b875 	b.w	800b920 <_write_r>

0800b836 <__sseek>:
 800b836:	b510      	push	{r4, lr}
 800b838:	460c      	mov	r4, r1
 800b83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b83e:	f000 f83b 	bl	800b8b8 <_lseek_r>
 800b842:	1c43      	adds	r3, r0, #1
 800b844:	89a3      	ldrh	r3, [r4, #12]
 800b846:	bf15      	itete	ne
 800b848:	6560      	strne	r0, [r4, #84]	; 0x54
 800b84a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b84e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b852:	81a3      	strheq	r3, [r4, #12]
 800b854:	bf18      	it	ne
 800b856:	81a3      	strhne	r3, [r4, #12]
 800b858:	bd10      	pop	{r4, pc}

0800b85a <__sclose>:
 800b85a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b85e:	f000 b81b 	b.w	800b898 <_close_r>

0800b862 <memset>:
 800b862:	4402      	add	r2, r0
 800b864:	4603      	mov	r3, r0
 800b866:	4293      	cmp	r3, r2
 800b868:	d100      	bne.n	800b86c <memset+0xa>
 800b86a:	4770      	bx	lr
 800b86c:	f803 1b01 	strb.w	r1, [r3], #1
 800b870:	e7f9      	b.n	800b866 <memset+0x4>

0800b872 <strncmp>:
 800b872:	b510      	push	{r4, lr}
 800b874:	b16a      	cbz	r2, 800b892 <strncmp+0x20>
 800b876:	3901      	subs	r1, #1
 800b878:	1884      	adds	r4, r0, r2
 800b87a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b87e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b882:	429a      	cmp	r2, r3
 800b884:	d103      	bne.n	800b88e <strncmp+0x1c>
 800b886:	42a0      	cmp	r0, r4
 800b888:	d001      	beq.n	800b88e <strncmp+0x1c>
 800b88a:	2a00      	cmp	r2, #0
 800b88c:	d1f5      	bne.n	800b87a <strncmp+0x8>
 800b88e:	1ad0      	subs	r0, r2, r3
 800b890:	bd10      	pop	{r4, pc}
 800b892:	4610      	mov	r0, r2
 800b894:	e7fc      	b.n	800b890 <strncmp+0x1e>
	...

0800b898 <_close_r>:
 800b898:	b538      	push	{r3, r4, r5, lr}
 800b89a:	4d06      	ldr	r5, [pc, #24]	; (800b8b4 <_close_r+0x1c>)
 800b89c:	2300      	movs	r3, #0
 800b89e:	4604      	mov	r4, r0
 800b8a0:	4608      	mov	r0, r1
 800b8a2:	602b      	str	r3, [r5, #0]
 800b8a4:	f7f9 fbc1 	bl	800502a <_close>
 800b8a8:	1c43      	adds	r3, r0, #1
 800b8aa:	d102      	bne.n	800b8b2 <_close_r+0x1a>
 800b8ac:	682b      	ldr	r3, [r5, #0]
 800b8ae:	b103      	cbz	r3, 800b8b2 <_close_r+0x1a>
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	bd38      	pop	{r3, r4, r5, pc}
 800b8b4:	20000a0c 	.word	0x20000a0c

0800b8b8 <_lseek_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d07      	ldr	r5, [pc, #28]	; (800b8d8 <_lseek_r+0x20>)
 800b8bc:	4604      	mov	r4, r0
 800b8be:	4608      	mov	r0, r1
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	602a      	str	r2, [r5, #0]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	f7f9 fbd6 	bl	8005078 <_lseek>
 800b8cc:	1c43      	adds	r3, r0, #1
 800b8ce:	d102      	bne.n	800b8d6 <_lseek_r+0x1e>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	b103      	cbz	r3, 800b8d6 <_lseek_r+0x1e>
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	20000a0c 	.word	0x20000a0c

0800b8dc <_read_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4d07      	ldr	r5, [pc, #28]	; (800b8fc <_read_r+0x20>)
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	4608      	mov	r0, r1
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	602a      	str	r2, [r5, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	f7f9 fb64 	bl	8004fb8 <_read>
 800b8f0:	1c43      	adds	r3, r0, #1
 800b8f2:	d102      	bne.n	800b8fa <_read_r+0x1e>
 800b8f4:	682b      	ldr	r3, [r5, #0]
 800b8f6:	b103      	cbz	r3, 800b8fa <_read_r+0x1e>
 800b8f8:	6023      	str	r3, [r4, #0]
 800b8fa:	bd38      	pop	{r3, r4, r5, pc}
 800b8fc:	20000a0c 	.word	0x20000a0c

0800b900 <_sbrk_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	4d06      	ldr	r5, [pc, #24]	; (800b91c <_sbrk_r+0x1c>)
 800b904:	2300      	movs	r3, #0
 800b906:	4604      	mov	r4, r0
 800b908:	4608      	mov	r0, r1
 800b90a:	602b      	str	r3, [r5, #0]
 800b90c:	f7f9 fbc2 	bl	8005094 <_sbrk>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	d102      	bne.n	800b91a <_sbrk_r+0x1a>
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	b103      	cbz	r3, 800b91a <_sbrk_r+0x1a>
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	bd38      	pop	{r3, r4, r5, pc}
 800b91c:	20000a0c 	.word	0x20000a0c

0800b920 <_write_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	4d07      	ldr	r5, [pc, #28]	; (800b940 <_write_r+0x20>)
 800b924:	4604      	mov	r4, r0
 800b926:	4608      	mov	r0, r1
 800b928:	4611      	mov	r1, r2
 800b92a:	2200      	movs	r2, #0
 800b92c:	602a      	str	r2, [r5, #0]
 800b92e:	461a      	mov	r2, r3
 800b930:	f7f9 fb5f 	bl	8004ff2 <_write>
 800b934:	1c43      	adds	r3, r0, #1
 800b936:	d102      	bne.n	800b93e <_write_r+0x1e>
 800b938:	682b      	ldr	r3, [r5, #0]
 800b93a:	b103      	cbz	r3, 800b93e <_write_r+0x1e>
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	20000a0c 	.word	0x20000a0c

0800b944 <__errno>:
 800b944:	4b01      	ldr	r3, [pc, #4]	; (800b94c <__errno+0x8>)
 800b946:	6818      	ldr	r0, [r3, #0]
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	20000228 	.word	0x20000228

0800b950 <__libc_init_array>:
 800b950:	b570      	push	{r4, r5, r6, lr}
 800b952:	4d0d      	ldr	r5, [pc, #52]	; (800b988 <__libc_init_array+0x38>)
 800b954:	4c0d      	ldr	r4, [pc, #52]	; (800b98c <__libc_init_array+0x3c>)
 800b956:	1b64      	subs	r4, r4, r5
 800b958:	10a4      	asrs	r4, r4, #2
 800b95a:	2600      	movs	r6, #0
 800b95c:	42a6      	cmp	r6, r4
 800b95e:	d109      	bne.n	800b974 <__libc_init_array+0x24>
 800b960:	4d0b      	ldr	r5, [pc, #44]	; (800b990 <__libc_init_array+0x40>)
 800b962:	4c0c      	ldr	r4, [pc, #48]	; (800b994 <__libc_init_array+0x44>)
 800b964:	f002 feaa 	bl	800e6bc <_init>
 800b968:	1b64      	subs	r4, r4, r5
 800b96a:	10a4      	asrs	r4, r4, #2
 800b96c:	2600      	movs	r6, #0
 800b96e:	42a6      	cmp	r6, r4
 800b970:	d105      	bne.n	800b97e <__libc_init_array+0x2e>
 800b972:	bd70      	pop	{r4, r5, r6, pc}
 800b974:	f855 3b04 	ldr.w	r3, [r5], #4
 800b978:	4798      	blx	r3
 800b97a:	3601      	adds	r6, #1
 800b97c:	e7ee      	b.n	800b95c <__libc_init_array+0xc>
 800b97e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b982:	4798      	blx	r3
 800b984:	3601      	adds	r6, #1
 800b986:	e7f2      	b.n	800b96e <__libc_init_array+0x1e>
 800b988:	0800eb60 	.word	0x0800eb60
 800b98c:	0800eb60 	.word	0x0800eb60
 800b990:	0800eb60 	.word	0x0800eb60
 800b994:	0800eb64 	.word	0x0800eb64

0800b998 <__retarget_lock_init_recursive>:
 800b998:	4770      	bx	lr

0800b99a <__retarget_lock_acquire_recursive>:
 800b99a:	4770      	bx	lr

0800b99c <__retarget_lock_release_recursive>:
 800b99c:	4770      	bx	lr

0800b99e <memcpy>:
 800b99e:	440a      	add	r2, r1
 800b9a0:	4291      	cmp	r1, r2
 800b9a2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9a6:	d100      	bne.n	800b9aa <memcpy+0xc>
 800b9a8:	4770      	bx	lr
 800b9aa:	b510      	push	{r4, lr}
 800b9ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9b4:	4291      	cmp	r1, r2
 800b9b6:	d1f9      	bne.n	800b9ac <memcpy+0xe>
 800b9b8:	bd10      	pop	{r4, pc}
 800b9ba:	0000      	movs	r0, r0
 800b9bc:	0000      	movs	r0, r0
	...

0800b9c0 <nan>:
 800b9c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b9c8 <nan+0x8>
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	00000000 	.word	0x00000000
 800b9cc:	7ff80000 	.word	0x7ff80000

0800b9d0 <_free_r>:
 800b9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9d2:	2900      	cmp	r1, #0
 800b9d4:	d044      	beq.n	800ba60 <_free_r+0x90>
 800b9d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9da:	9001      	str	r0, [sp, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f1a1 0404 	sub.w	r4, r1, #4
 800b9e2:	bfb8      	it	lt
 800b9e4:	18e4      	addlt	r4, r4, r3
 800b9e6:	f7ff f811 	bl	800aa0c <__malloc_lock>
 800b9ea:	4a1e      	ldr	r2, [pc, #120]	; (800ba64 <_free_r+0x94>)
 800b9ec:	9801      	ldr	r0, [sp, #4]
 800b9ee:	6813      	ldr	r3, [r2, #0]
 800b9f0:	b933      	cbnz	r3, 800ba00 <_free_r+0x30>
 800b9f2:	6063      	str	r3, [r4, #4]
 800b9f4:	6014      	str	r4, [r2, #0]
 800b9f6:	b003      	add	sp, #12
 800b9f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9fc:	f7ff b80c 	b.w	800aa18 <__malloc_unlock>
 800ba00:	42a3      	cmp	r3, r4
 800ba02:	d908      	bls.n	800ba16 <_free_r+0x46>
 800ba04:	6825      	ldr	r5, [r4, #0]
 800ba06:	1961      	adds	r1, r4, r5
 800ba08:	428b      	cmp	r3, r1
 800ba0a:	bf01      	itttt	eq
 800ba0c:	6819      	ldreq	r1, [r3, #0]
 800ba0e:	685b      	ldreq	r3, [r3, #4]
 800ba10:	1949      	addeq	r1, r1, r5
 800ba12:	6021      	streq	r1, [r4, #0]
 800ba14:	e7ed      	b.n	800b9f2 <_free_r+0x22>
 800ba16:	461a      	mov	r2, r3
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	b10b      	cbz	r3, 800ba20 <_free_r+0x50>
 800ba1c:	42a3      	cmp	r3, r4
 800ba1e:	d9fa      	bls.n	800ba16 <_free_r+0x46>
 800ba20:	6811      	ldr	r1, [r2, #0]
 800ba22:	1855      	adds	r5, r2, r1
 800ba24:	42a5      	cmp	r5, r4
 800ba26:	d10b      	bne.n	800ba40 <_free_r+0x70>
 800ba28:	6824      	ldr	r4, [r4, #0]
 800ba2a:	4421      	add	r1, r4
 800ba2c:	1854      	adds	r4, r2, r1
 800ba2e:	42a3      	cmp	r3, r4
 800ba30:	6011      	str	r1, [r2, #0]
 800ba32:	d1e0      	bne.n	800b9f6 <_free_r+0x26>
 800ba34:	681c      	ldr	r4, [r3, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	6053      	str	r3, [r2, #4]
 800ba3a:	440c      	add	r4, r1
 800ba3c:	6014      	str	r4, [r2, #0]
 800ba3e:	e7da      	b.n	800b9f6 <_free_r+0x26>
 800ba40:	d902      	bls.n	800ba48 <_free_r+0x78>
 800ba42:	230c      	movs	r3, #12
 800ba44:	6003      	str	r3, [r0, #0]
 800ba46:	e7d6      	b.n	800b9f6 <_free_r+0x26>
 800ba48:	6825      	ldr	r5, [r4, #0]
 800ba4a:	1961      	adds	r1, r4, r5
 800ba4c:	428b      	cmp	r3, r1
 800ba4e:	bf04      	itt	eq
 800ba50:	6819      	ldreq	r1, [r3, #0]
 800ba52:	685b      	ldreq	r3, [r3, #4]
 800ba54:	6063      	str	r3, [r4, #4]
 800ba56:	bf04      	itt	eq
 800ba58:	1949      	addeq	r1, r1, r5
 800ba5a:	6021      	streq	r1, [r4, #0]
 800ba5c:	6054      	str	r4, [r2, #4]
 800ba5e:	e7ca      	b.n	800b9f6 <_free_r+0x26>
 800ba60:	b003      	add	sp, #12
 800ba62:	bd30      	pop	{r4, r5, pc}
 800ba64:	200008c8 	.word	0x200008c8

0800ba68 <rshift>:
 800ba68:	6903      	ldr	r3, [r0, #16]
 800ba6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba72:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba76:	f100 0414 	add.w	r4, r0, #20
 800ba7a:	dd45      	ble.n	800bb08 <rshift+0xa0>
 800ba7c:	f011 011f 	ands.w	r1, r1, #31
 800ba80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba88:	d10c      	bne.n	800baa4 <rshift+0x3c>
 800ba8a:	f100 0710 	add.w	r7, r0, #16
 800ba8e:	4629      	mov	r1, r5
 800ba90:	42b1      	cmp	r1, r6
 800ba92:	d334      	bcc.n	800bafe <rshift+0x96>
 800ba94:	1a9b      	subs	r3, r3, r2
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	1eea      	subs	r2, r5, #3
 800ba9a:	4296      	cmp	r6, r2
 800ba9c:	bf38      	it	cc
 800ba9e:	2300      	movcc	r3, #0
 800baa0:	4423      	add	r3, r4
 800baa2:	e015      	b.n	800bad0 <rshift+0x68>
 800baa4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800baa8:	f1c1 0820 	rsb	r8, r1, #32
 800baac:	40cf      	lsrs	r7, r1
 800baae:	f105 0e04 	add.w	lr, r5, #4
 800bab2:	46a1      	mov	r9, r4
 800bab4:	4576      	cmp	r6, lr
 800bab6:	46f4      	mov	ip, lr
 800bab8:	d815      	bhi.n	800bae6 <rshift+0x7e>
 800baba:	1a9a      	subs	r2, r3, r2
 800babc:	0092      	lsls	r2, r2, #2
 800babe:	3a04      	subs	r2, #4
 800bac0:	3501      	adds	r5, #1
 800bac2:	42ae      	cmp	r6, r5
 800bac4:	bf38      	it	cc
 800bac6:	2200      	movcc	r2, #0
 800bac8:	18a3      	adds	r3, r4, r2
 800baca:	50a7      	str	r7, [r4, r2]
 800bacc:	b107      	cbz	r7, 800bad0 <rshift+0x68>
 800bace:	3304      	adds	r3, #4
 800bad0:	1b1a      	subs	r2, r3, r4
 800bad2:	42a3      	cmp	r3, r4
 800bad4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bad8:	bf08      	it	eq
 800bada:	2300      	moveq	r3, #0
 800badc:	6102      	str	r2, [r0, #16]
 800bade:	bf08      	it	eq
 800bae0:	6143      	streq	r3, [r0, #20]
 800bae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bae6:	f8dc c000 	ldr.w	ip, [ip]
 800baea:	fa0c fc08 	lsl.w	ip, ip, r8
 800baee:	ea4c 0707 	orr.w	r7, ip, r7
 800baf2:	f849 7b04 	str.w	r7, [r9], #4
 800baf6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bafa:	40cf      	lsrs	r7, r1
 800bafc:	e7da      	b.n	800bab4 <rshift+0x4c>
 800bafe:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb02:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb06:	e7c3      	b.n	800ba90 <rshift+0x28>
 800bb08:	4623      	mov	r3, r4
 800bb0a:	e7e1      	b.n	800bad0 <rshift+0x68>

0800bb0c <__hexdig_fun>:
 800bb0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bb10:	2b09      	cmp	r3, #9
 800bb12:	d802      	bhi.n	800bb1a <__hexdig_fun+0xe>
 800bb14:	3820      	subs	r0, #32
 800bb16:	b2c0      	uxtb	r0, r0
 800bb18:	4770      	bx	lr
 800bb1a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bb1e:	2b05      	cmp	r3, #5
 800bb20:	d801      	bhi.n	800bb26 <__hexdig_fun+0x1a>
 800bb22:	3847      	subs	r0, #71	; 0x47
 800bb24:	e7f7      	b.n	800bb16 <__hexdig_fun+0xa>
 800bb26:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bb2a:	2b05      	cmp	r3, #5
 800bb2c:	d801      	bhi.n	800bb32 <__hexdig_fun+0x26>
 800bb2e:	3827      	subs	r0, #39	; 0x27
 800bb30:	e7f1      	b.n	800bb16 <__hexdig_fun+0xa>
 800bb32:	2000      	movs	r0, #0
 800bb34:	4770      	bx	lr
	...

0800bb38 <__gethex>:
 800bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3c:	4617      	mov	r7, r2
 800bb3e:	680a      	ldr	r2, [r1, #0]
 800bb40:	b085      	sub	sp, #20
 800bb42:	f102 0b02 	add.w	fp, r2, #2
 800bb46:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb4a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb4e:	4681      	mov	r9, r0
 800bb50:	468a      	mov	sl, r1
 800bb52:	9302      	str	r3, [sp, #8]
 800bb54:	32fe      	adds	r2, #254	; 0xfe
 800bb56:	eb02 030b 	add.w	r3, r2, fp
 800bb5a:	46d8      	mov	r8, fp
 800bb5c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bb60:	9301      	str	r3, [sp, #4]
 800bb62:	2830      	cmp	r0, #48	; 0x30
 800bb64:	d0f7      	beq.n	800bb56 <__gethex+0x1e>
 800bb66:	f7ff ffd1 	bl	800bb0c <__hexdig_fun>
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d138      	bne.n	800bbe2 <__gethex+0xaa>
 800bb70:	49a7      	ldr	r1, [pc, #668]	; (800be10 <__gethex+0x2d8>)
 800bb72:	2201      	movs	r2, #1
 800bb74:	4640      	mov	r0, r8
 800bb76:	f7ff fe7c 	bl	800b872 <strncmp>
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d169      	bne.n	800bc54 <__gethex+0x11c>
 800bb80:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bb84:	465d      	mov	r5, fp
 800bb86:	f7ff ffc1 	bl	800bb0c <__hexdig_fun>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d064      	beq.n	800bc58 <__gethex+0x120>
 800bb8e:	465a      	mov	r2, fp
 800bb90:	7810      	ldrb	r0, [r2, #0]
 800bb92:	2830      	cmp	r0, #48	; 0x30
 800bb94:	4690      	mov	r8, r2
 800bb96:	f102 0201 	add.w	r2, r2, #1
 800bb9a:	d0f9      	beq.n	800bb90 <__gethex+0x58>
 800bb9c:	f7ff ffb6 	bl	800bb0c <__hexdig_fun>
 800bba0:	2301      	movs	r3, #1
 800bba2:	fab0 f480 	clz	r4, r0
 800bba6:	0964      	lsrs	r4, r4, #5
 800bba8:	465e      	mov	r6, fp
 800bbaa:	9301      	str	r3, [sp, #4]
 800bbac:	4642      	mov	r2, r8
 800bbae:	4615      	mov	r5, r2
 800bbb0:	3201      	adds	r2, #1
 800bbb2:	7828      	ldrb	r0, [r5, #0]
 800bbb4:	f7ff ffaa 	bl	800bb0c <__hexdig_fun>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d1f8      	bne.n	800bbae <__gethex+0x76>
 800bbbc:	4994      	ldr	r1, [pc, #592]	; (800be10 <__gethex+0x2d8>)
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	f7ff fe56 	bl	800b872 <strncmp>
 800bbc6:	b978      	cbnz	r0, 800bbe8 <__gethex+0xb0>
 800bbc8:	b946      	cbnz	r6, 800bbdc <__gethex+0xa4>
 800bbca:	1c6e      	adds	r6, r5, #1
 800bbcc:	4632      	mov	r2, r6
 800bbce:	4615      	mov	r5, r2
 800bbd0:	3201      	adds	r2, #1
 800bbd2:	7828      	ldrb	r0, [r5, #0]
 800bbd4:	f7ff ff9a 	bl	800bb0c <__hexdig_fun>
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d1f8      	bne.n	800bbce <__gethex+0x96>
 800bbdc:	1b73      	subs	r3, r6, r5
 800bbde:	009e      	lsls	r6, r3, #2
 800bbe0:	e004      	b.n	800bbec <__gethex+0xb4>
 800bbe2:	2400      	movs	r4, #0
 800bbe4:	4626      	mov	r6, r4
 800bbe6:	e7e1      	b.n	800bbac <__gethex+0x74>
 800bbe8:	2e00      	cmp	r6, #0
 800bbea:	d1f7      	bne.n	800bbdc <__gethex+0xa4>
 800bbec:	782b      	ldrb	r3, [r5, #0]
 800bbee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bbf2:	2b50      	cmp	r3, #80	; 0x50
 800bbf4:	d13d      	bne.n	800bc72 <__gethex+0x13a>
 800bbf6:	786b      	ldrb	r3, [r5, #1]
 800bbf8:	2b2b      	cmp	r3, #43	; 0x2b
 800bbfa:	d02f      	beq.n	800bc5c <__gethex+0x124>
 800bbfc:	2b2d      	cmp	r3, #45	; 0x2d
 800bbfe:	d031      	beq.n	800bc64 <__gethex+0x12c>
 800bc00:	1c69      	adds	r1, r5, #1
 800bc02:	f04f 0b00 	mov.w	fp, #0
 800bc06:	7808      	ldrb	r0, [r1, #0]
 800bc08:	f7ff ff80 	bl	800bb0c <__hexdig_fun>
 800bc0c:	1e42      	subs	r2, r0, #1
 800bc0e:	b2d2      	uxtb	r2, r2
 800bc10:	2a18      	cmp	r2, #24
 800bc12:	d82e      	bhi.n	800bc72 <__gethex+0x13a>
 800bc14:	f1a0 0210 	sub.w	r2, r0, #16
 800bc18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc1c:	f7ff ff76 	bl	800bb0c <__hexdig_fun>
 800bc20:	f100 3cff 	add.w	ip, r0, #4294967295
 800bc24:	fa5f fc8c 	uxtb.w	ip, ip
 800bc28:	f1bc 0f18 	cmp.w	ip, #24
 800bc2c:	d91d      	bls.n	800bc6a <__gethex+0x132>
 800bc2e:	f1bb 0f00 	cmp.w	fp, #0
 800bc32:	d000      	beq.n	800bc36 <__gethex+0xfe>
 800bc34:	4252      	negs	r2, r2
 800bc36:	4416      	add	r6, r2
 800bc38:	f8ca 1000 	str.w	r1, [sl]
 800bc3c:	b1dc      	cbz	r4, 800bc76 <__gethex+0x13e>
 800bc3e:	9b01      	ldr	r3, [sp, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	bf14      	ite	ne
 800bc44:	f04f 0800 	movne.w	r8, #0
 800bc48:	f04f 0806 	moveq.w	r8, #6
 800bc4c:	4640      	mov	r0, r8
 800bc4e:	b005      	add	sp, #20
 800bc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc54:	4645      	mov	r5, r8
 800bc56:	4626      	mov	r6, r4
 800bc58:	2401      	movs	r4, #1
 800bc5a:	e7c7      	b.n	800bbec <__gethex+0xb4>
 800bc5c:	f04f 0b00 	mov.w	fp, #0
 800bc60:	1ca9      	adds	r1, r5, #2
 800bc62:	e7d0      	b.n	800bc06 <__gethex+0xce>
 800bc64:	f04f 0b01 	mov.w	fp, #1
 800bc68:	e7fa      	b.n	800bc60 <__gethex+0x128>
 800bc6a:	230a      	movs	r3, #10
 800bc6c:	fb03 0002 	mla	r0, r3, r2, r0
 800bc70:	e7d0      	b.n	800bc14 <__gethex+0xdc>
 800bc72:	4629      	mov	r1, r5
 800bc74:	e7e0      	b.n	800bc38 <__gethex+0x100>
 800bc76:	eba5 0308 	sub.w	r3, r5, r8
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	2b07      	cmp	r3, #7
 800bc80:	dc0a      	bgt.n	800bc98 <__gethex+0x160>
 800bc82:	4648      	mov	r0, r9
 800bc84:	f000 fa5a 	bl	800c13c <_Balloc>
 800bc88:	4604      	mov	r4, r0
 800bc8a:	b940      	cbnz	r0, 800bc9e <__gethex+0x166>
 800bc8c:	4b61      	ldr	r3, [pc, #388]	; (800be14 <__gethex+0x2dc>)
 800bc8e:	4602      	mov	r2, r0
 800bc90:	21e4      	movs	r1, #228	; 0xe4
 800bc92:	4861      	ldr	r0, [pc, #388]	; (800be18 <__gethex+0x2e0>)
 800bc94:	f000 ffba 	bl	800cc0c <__assert_func>
 800bc98:	3101      	adds	r1, #1
 800bc9a:	105b      	asrs	r3, r3, #1
 800bc9c:	e7ef      	b.n	800bc7e <__gethex+0x146>
 800bc9e:	f100 0a14 	add.w	sl, r0, #20
 800bca2:	2300      	movs	r3, #0
 800bca4:	495a      	ldr	r1, [pc, #360]	; (800be10 <__gethex+0x2d8>)
 800bca6:	f8cd a004 	str.w	sl, [sp, #4]
 800bcaa:	469b      	mov	fp, r3
 800bcac:	45a8      	cmp	r8, r5
 800bcae:	d342      	bcc.n	800bd36 <__gethex+0x1fe>
 800bcb0:	9801      	ldr	r0, [sp, #4]
 800bcb2:	f840 bb04 	str.w	fp, [r0], #4
 800bcb6:	eba0 000a 	sub.w	r0, r0, sl
 800bcba:	1080      	asrs	r0, r0, #2
 800bcbc:	6120      	str	r0, [r4, #16]
 800bcbe:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bcc2:	4658      	mov	r0, fp
 800bcc4:	f000 fb2c 	bl	800c320 <__hi0bits>
 800bcc8:	683d      	ldr	r5, [r7, #0]
 800bcca:	eba8 0000 	sub.w	r0, r8, r0
 800bcce:	42a8      	cmp	r0, r5
 800bcd0:	dd59      	ble.n	800bd86 <__gethex+0x24e>
 800bcd2:	eba0 0805 	sub.w	r8, r0, r5
 800bcd6:	4641      	mov	r1, r8
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f000 febb 	bl	800ca54 <__any_on>
 800bcde:	4683      	mov	fp, r0
 800bce0:	b1b8      	cbz	r0, 800bd12 <__gethex+0x1da>
 800bce2:	f108 33ff 	add.w	r3, r8, #4294967295
 800bce6:	1159      	asrs	r1, r3, #5
 800bce8:	f003 021f 	and.w	r2, r3, #31
 800bcec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bcf0:	f04f 0b01 	mov.w	fp, #1
 800bcf4:	fa0b f202 	lsl.w	r2, fp, r2
 800bcf8:	420a      	tst	r2, r1
 800bcfa:	d00a      	beq.n	800bd12 <__gethex+0x1da>
 800bcfc:	455b      	cmp	r3, fp
 800bcfe:	dd06      	ble.n	800bd0e <__gethex+0x1d6>
 800bd00:	f1a8 0102 	sub.w	r1, r8, #2
 800bd04:	4620      	mov	r0, r4
 800bd06:	f000 fea5 	bl	800ca54 <__any_on>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d138      	bne.n	800bd80 <__gethex+0x248>
 800bd0e:	f04f 0b02 	mov.w	fp, #2
 800bd12:	4641      	mov	r1, r8
 800bd14:	4620      	mov	r0, r4
 800bd16:	f7ff fea7 	bl	800ba68 <rshift>
 800bd1a:	4446      	add	r6, r8
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	42b3      	cmp	r3, r6
 800bd20:	da41      	bge.n	800bda6 <__gethex+0x26e>
 800bd22:	4621      	mov	r1, r4
 800bd24:	4648      	mov	r0, r9
 800bd26:	f000 fa49 	bl	800c1bc <_Bfree>
 800bd2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bd34:	e78a      	b.n	800bc4c <__gethex+0x114>
 800bd36:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bd3a:	2a2e      	cmp	r2, #46	; 0x2e
 800bd3c:	d014      	beq.n	800bd68 <__gethex+0x230>
 800bd3e:	2b20      	cmp	r3, #32
 800bd40:	d106      	bne.n	800bd50 <__gethex+0x218>
 800bd42:	9b01      	ldr	r3, [sp, #4]
 800bd44:	f843 bb04 	str.w	fp, [r3], #4
 800bd48:	f04f 0b00 	mov.w	fp, #0
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	465b      	mov	r3, fp
 800bd50:	7828      	ldrb	r0, [r5, #0]
 800bd52:	9303      	str	r3, [sp, #12]
 800bd54:	f7ff feda 	bl	800bb0c <__hexdig_fun>
 800bd58:	9b03      	ldr	r3, [sp, #12]
 800bd5a:	f000 000f 	and.w	r0, r0, #15
 800bd5e:	4098      	lsls	r0, r3
 800bd60:	ea4b 0b00 	orr.w	fp, fp, r0
 800bd64:	3304      	adds	r3, #4
 800bd66:	e7a1      	b.n	800bcac <__gethex+0x174>
 800bd68:	45a8      	cmp	r8, r5
 800bd6a:	d8e8      	bhi.n	800bd3e <__gethex+0x206>
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	4628      	mov	r0, r5
 800bd70:	9303      	str	r3, [sp, #12]
 800bd72:	f7ff fd7e 	bl	800b872 <strncmp>
 800bd76:	4926      	ldr	r1, [pc, #152]	; (800be10 <__gethex+0x2d8>)
 800bd78:	9b03      	ldr	r3, [sp, #12]
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d1df      	bne.n	800bd3e <__gethex+0x206>
 800bd7e:	e795      	b.n	800bcac <__gethex+0x174>
 800bd80:	f04f 0b03 	mov.w	fp, #3
 800bd84:	e7c5      	b.n	800bd12 <__gethex+0x1da>
 800bd86:	da0b      	bge.n	800bda0 <__gethex+0x268>
 800bd88:	eba5 0800 	sub.w	r8, r5, r0
 800bd8c:	4621      	mov	r1, r4
 800bd8e:	4642      	mov	r2, r8
 800bd90:	4648      	mov	r0, r9
 800bd92:	f000 fc2d 	bl	800c5f0 <__lshift>
 800bd96:	eba6 0608 	sub.w	r6, r6, r8
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	f100 0a14 	add.w	sl, r0, #20
 800bda0:	f04f 0b00 	mov.w	fp, #0
 800bda4:	e7ba      	b.n	800bd1c <__gethex+0x1e4>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	42b3      	cmp	r3, r6
 800bdaa:	dd73      	ble.n	800be94 <__gethex+0x35c>
 800bdac:	1b9e      	subs	r6, r3, r6
 800bdae:	42b5      	cmp	r5, r6
 800bdb0:	dc34      	bgt.n	800be1c <__gethex+0x2e4>
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	d023      	beq.n	800be00 <__gethex+0x2c8>
 800bdb8:	2b03      	cmp	r3, #3
 800bdba:	d025      	beq.n	800be08 <__gethex+0x2d0>
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d115      	bne.n	800bdec <__gethex+0x2b4>
 800bdc0:	42b5      	cmp	r5, r6
 800bdc2:	d113      	bne.n	800bdec <__gethex+0x2b4>
 800bdc4:	2d01      	cmp	r5, #1
 800bdc6:	d10b      	bne.n	800bde0 <__gethex+0x2a8>
 800bdc8:	9a02      	ldr	r2, [sp, #8]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6013      	str	r3, [r2, #0]
 800bdce:	2301      	movs	r3, #1
 800bdd0:	6123      	str	r3, [r4, #16]
 800bdd2:	f8ca 3000 	str.w	r3, [sl]
 800bdd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdd8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bddc:	601c      	str	r4, [r3, #0]
 800bdde:	e735      	b.n	800bc4c <__gethex+0x114>
 800bde0:	1e69      	subs	r1, r5, #1
 800bde2:	4620      	mov	r0, r4
 800bde4:	f000 fe36 	bl	800ca54 <__any_on>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	d1ed      	bne.n	800bdc8 <__gethex+0x290>
 800bdec:	4621      	mov	r1, r4
 800bdee:	4648      	mov	r0, r9
 800bdf0:	f000 f9e4 	bl	800c1bc <_Bfree>
 800bdf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	6013      	str	r3, [r2, #0]
 800bdfa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bdfe:	e725      	b.n	800bc4c <__gethex+0x114>
 800be00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1f2      	bne.n	800bdec <__gethex+0x2b4>
 800be06:	e7df      	b.n	800bdc8 <__gethex+0x290>
 800be08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1dc      	bne.n	800bdc8 <__gethex+0x290>
 800be0e:	e7ed      	b.n	800bdec <__gethex+0x2b4>
 800be10:	0800e730 	.word	0x0800e730
 800be14:	0800e798 	.word	0x0800e798
 800be18:	0800e7a9 	.word	0x0800e7a9
 800be1c:	f106 38ff 	add.w	r8, r6, #4294967295
 800be20:	f1bb 0f00 	cmp.w	fp, #0
 800be24:	d133      	bne.n	800be8e <__gethex+0x356>
 800be26:	f1b8 0f00 	cmp.w	r8, #0
 800be2a:	d004      	beq.n	800be36 <__gethex+0x2fe>
 800be2c:	4641      	mov	r1, r8
 800be2e:	4620      	mov	r0, r4
 800be30:	f000 fe10 	bl	800ca54 <__any_on>
 800be34:	4683      	mov	fp, r0
 800be36:	ea4f 1268 	mov.w	r2, r8, asr #5
 800be3a:	2301      	movs	r3, #1
 800be3c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800be40:	f008 081f 	and.w	r8, r8, #31
 800be44:	fa03 f308 	lsl.w	r3, r3, r8
 800be48:	4213      	tst	r3, r2
 800be4a:	4631      	mov	r1, r6
 800be4c:	4620      	mov	r0, r4
 800be4e:	bf18      	it	ne
 800be50:	f04b 0b02 	orrne.w	fp, fp, #2
 800be54:	1bad      	subs	r5, r5, r6
 800be56:	f7ff fe07 	bl	800ba68 <rshift>
 800be5a:	687e      	ldr	r6, [r7, #4]
 800be5c:	f04f 0802 	mov.w	r8, #2
 800be60:	f1bb 0f00 	cmp.w	fp, #0
 800be64:	d04a      	beq.n	800befc <__gethex+0x3c4>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d016      	beq.n	800be9a <__gethex+0x362>
 800be6c:	2b03      	cmp	r3, #3
 800be6e:	d018      	beq.n	800bea2 <__gethex+0x36a>
 800be70:	2b01      	cmp	r3, #1
 800be72:	d109      	bne.n	800be88 <__gethex+0x350>
 800be74:	f01b 0f02 	tst.w	fp, #2
 800be78:	d006      	beq.n	800be88 <__gethex+0x350>
 800be7a:	f8da 3000 	ldr.w	r3, [sl]
 800be7e:	ea4b 0b03 	orr.w	fp, fp, r3
 800be82:	f01b 0f01 	tst.w	fp, #1
 800be86:	d10f      	bne.n	800bea8 <__gethex+0x370>
 800be88:	f048 0810 	orr.w	r8, r8, #16
 800be8c:	e036      	b.n	800befc <__gethex+0x3c4>
 800be8e:	f04f 0b01 	mov.w	fp, #1
 800be92:	e7d0      	b.n	800be36 <__gethex+0x2fe>
 800be94:	f04f 0801 	mov.w	r8, #1
 800be98:	e7e2      	b.n	800be60 <__gethex+0x328>
 800be9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be9c:	f1c3 0301 	rsb	r3, r3, #1
 800bea0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d0ef      	beq.n	800be88 <__gethex+0x350>
 800bea8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800beac:	f104 0214 	add.w	r2, r4, #20
 800beb0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800beb4:	9301      	str	r3, [sp, #4]
 800beb6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800beba:	2300      	movs	r3, #0
 800bebc:	4694      	mov	ip, r2
 800bebe:	f852 1b04 	ldr.w	r1, [r2], #4
 800bec2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800bec6:	d01e      	beq.n	800bf06 <__gethex+0x3ce>
 800bec8:	3101      	adds	r1, #1
 800beca:	f8cc 1000 	str.w	r1, [ip]
 800bece:	f1b8 0f02 	cmp.w	r8, #2
 800bed2:	f104 0214 	add.w	r2, r4, #20
 800bed6:	d13d      	bne.n	800bf54 <__gethex+0x41c>
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	3b01      	subs	r3, #1
 800bedc:	42ab      	cmp	r3, r5
 800bede:	d10b      	bne.n	800bef8 <__gethex+0x3c0>
 800bee0:	1169      	asrs	r1, r5, #5
 800bee2:	2301      	movs	r3, #1
 800bee4:	f005 051f 	and.w	r5, r5, #31
 800bee8:	fa03 f505 	lsl.w	r5, r3, r5
 800beec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bef0:	421d      	tst	r5, r3
 800bef2:	bf18      	it	ne
 800bef4:	f04f 0801 	movne.w	r8, #1
 800bef8:	f048 0820 	orr.w	r8, r8, #32
 800befc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800befe:	601c      	str	r4, [r3, #0]
 800bf00:	9b02      	ldr	r3, [sp, #8]
 800bf02:	601e      	str	r6, [r3, #0]
 800bf04:	e6a2      	b.n	800bc4c <__gethex+0x114>
 800bf06:	4290      	cmp	r0, r2
 800bf08:	f842 3c04 	str.w	r3, [r2, #-4]
 800bf0c:	d8d6      	bhi.n	800bebc <__gethex+0x384>
 800bf0e:	68a2      	ldr	r2, [r4, #8]
 800bf10:	4593      	cmp	fp, r2
 800bf12:	db17      	blt.n	800bf44 <__gethex+0x40c>
 800bf14:	6861      	ldr	r1, [r4, #4]
 800bf16:	4648      	mov	r0, r9
 800bf18:	3101      	adds	r1, #1
 800bf1a:	f000 f90f 	bl	800c13c <_Balloc>
 800bf1e:	4682      	mov	sl, r0
 800bf20:	b918      	cbnz	r0, 800bf2a <__gethex+0x3f2>
 800bf22:	4b1b      	ldr	r3, [pc, #108]	; (800bf90 <__gethex+0x458>)
 800bf24:	4602      	mov	r2, r0
 800bf26:	2184      	movs	r1, #132	; 0x84
 800bf28:	e6b3      	b.n	800bc92 <__gethex+0x15a>
 800bf2a:	6922      	ldr	r2, [r4, #16]
 800bf2c:	3202      	adds	r2, #2
 800bf2e:	f104 010c 	add.w	r1, r4, #12
 800bf32:	0092      	lsls	r2, r2, #2
 800bf34:	300c      	adds	r0, #12
 800bf36:	f7ff fd32 	bl	800b99e <memcpy>
 800bf3a:	4621      	mov	r1, r4
 800bf3c:	4648      	mov	r0, r9
 800bf3e:	f000 f93d 	bl	800c1bc <_Bfree>
 800bf42:	4654      	mov	r4, sl
 800bf44:	6922      	ldr	r2, [r4, #16]
 800bf46:	1c51      	adds	r1, r2, #1
 800bf48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bf4c:	6121      	str	r1, [r4, #16]
 800bf4e:	2101      	movs	r1, #1
 800bf50:	6151      	str	r1, [r2, #20]
 800bf52:	e7bc      	b.n	800bece <__gethex+0x396>
 800bf54:	6921      	ldr	r1, [r4, #16]
 800bf56:	4559      	cmp	r1, fp
 800bf58:	dd0b      	ble.n	800bf72 <__gethex+0x43a>
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	f7ff fd83 	bl	800ba68 <rshift>
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	3601      	adds	r6, #1
 800bf66:	42b3      	cmp	r3, r6
 800bf68:	f6ff aedb 	blt.w	800bd22 <__gethex+0x1ea>
 800bf6c:	f04f 0801 	mov.w	r8, #1
 800bf70:	e7c2      	b.n	800bef8 <__gethex+0x3c0>
 800bf72:	f015 051f 	ands.w	r5, r5, #31
 800bf76:	d0f9      	beq.n	800bf6c <__gethex+0x434>
 800bf78:	9b01      	ldr	r3, [sp, #4]
 800bf7a:	441a      	add	r2, r3
 800bf7c:	f1c5 0520 	rsb	r5, r5, #32
 800bf80:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bf84:	f000 f9cc 	bl	800c320 <__hi0bits>
 800bf88:	42a8      	cmp	r0, r5
 800bf8a:	dbe6      	blt.n	800bf5a <__gethex+0x422>
 800bf8c:	e7ee      	b.n	800bf6c <__gethex+0x434>
 800bf8e:	bf00      	nop
 800bf90:	0800e798 	.word	0x0800e798

0800bf94 <L_shift>:
 800bf94:	f1c2 0208 	rsb	r2, r2, #8
 800bf98:	0092      	lsls	r2, r2, #2
 800bf9a:	b570      	push	{r4, r5, r6, lr}
 800bf9c:	f1c2 0620 	rsb	r6, r2, #32
 800bfa0:	6843      	ldr	r3, [r0, #4]
 800bfa2:	6804      	ldr	r4, [r0, #0]
 800bfa4:	fa03 f506 	lsl.w	r5, r3, r6
 800bfa8:	432c      	orrs	r4, r5
 800bfaa:	40d3      	lsrs	r3, r2
 800bfac:	6004      	str	r4, [r0, #0]
 800bfae:	f840 3f04 	str.w	r3, [r0, #4]!
 800bfb2:	4288      	cmp	r0, r1
 800bfb4:	d3f4      	bcc.n	800bfa0 <L_shift+0xc>
 800bfb6:	bd70      	pop	{r4, r5, r6, pc}

0800bfb8 <__match>:
 800bfb8:	b530      	push	{r4, r5, lr}
 800bfba:	6803      	ldr	r3, [r0, #0]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfc2:	b914      	cbnz	r4, 800bfca <__match+0x12>
 800bfc4:	6003      	str	r3, [r0, #0]
 800bfc6:	2001      	movs	r0, #1
 800bfc8:	bd30      	pop	{r4, r5, pc}
 800bfca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bfd2:	2d19      	cmp	r5, #25
 800bfd4:	bf98      	it	ls
 800bfd6:	3220      	addls	r2, #32
 800bfd8:	42a2      	cmp	r2, r4
 800bfda:	d0f0      	beq.n	800bfbe <__match+0x6>
 800bfdc:	2000      	movs	r0, #0
 800bfde:	e7f3      	b.n	800bfc8 <__match+0x10>

0800bfe0 <__hexnan>:
 800bfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe4:	680b      	ldr	r3, [r1, #0]
 800bfe6:	6801      	ldr	r1, [r0, #0]
 800bfe8:	115e      	asrs	r6, r3, #5
 800bfea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bfee:	f013 031f 	ands.w	r3, r3, #31
 800bff2:	b087      	sub	sp, #28
 800bff4:	bf18      	it	ne
 800bff6:	3604      	addne	r6, #4
 800bff8:	2500      	movs	r5, #0
 800bffa:	1f37      	subs	r7, r6, #4
 800bffc:	4682      	mov	sl, r0
 800bffe:	4690      	mov	r8, r2
 800c000:	9301      	str	r3, [sp, #4]
 800c002:	f846 5c04 	str.w	r5, [r6, #-4]
 800c006:	46b9      	mov	r9, r7
 800c008:	463c      	mov	r4, r7
 800c00a:	9502      	str	r5, [sp, #8]
 800c00c:	46ab      	mov	fp, r5
 800c00e:	784a      	ldrb	r2, [r1, #1]
 800c010:	1c4b      	adds	r3, r1, #1
 800c012:	9303      	str	r3, [sp, #12]
 800c014:	b342      	cbz	r2, 800c068 <__hexnan+0x88>
 800c016:	4610      	mov	r0, r2
 800c018:	9105      	str	r1, [sp, #20]
 800c01a:	9204      	str	r2, [sp, #16]
 800c01c:	f7ff fd76 	bl	800bb0c <__hexdig_fun>
 800c020:	2800      	cmp	r0, #0
 800c022:	d14f      	bne.n	800c0c4 <__hexnan+0xe4>
 800c024:	9a04      	ldr	r2, [sp, #16]
 800c026:	9905      	ldr	r1, [sp, #20]
 800c028:	2a20      	cmp	r2, #32
 800c02a:	d818      	bhi.n	800c05e <__hexnan+0x7e>
 800c02c:	9b02      	ldr	r3, [sp, #8]
 800c02e:	459b      	cmp	fp, r3
 800c030:	dd13      	ble.n	800c05a <__hexnan+0x7a>
 800c032:	454c      	cmp	r4, r9
 800c034:	d206      	bcs.n	800c044 <__hexnan+0x64>
 800c036:	2d07      	cmp	r5, #7
 800c038:	dc04      	bgt.n	800c044 <__hexnan+0x64>
 800c03a:	462a      	mov	r2, r5
 800c03c:	4649      	mov	r1, r9
 800c03e:	4620      	mov	r0, r4
 800c040:	f7ff ffa8 	bl	800bf94 <L_shift>
 800c044:	4544      	cmp	r4, r8
 800c046:	d950      	bls.n	800c0ea <__hexnan+0x10a>
 800c048:	2300      	movs	r3, #0
 800c04a:	f1a4 0904 	sub.w	r9, r4, #4
 800c04e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c052:	f8cd b008 	str.w	fp, [sp, #8]
 800c056:	464c      	mov	r4, r9
 800c058:	461d      	mov	r5, r3
 800c05a:	9903      	ldr	r1, [sp, #12]
 800c05c:	e7d7      	b.n	800c00e <__hexnan+0x2e>
 800c05e:	2a29      	cmp	r2, #41	; 0x29
 800c060:	d155      	bne.n	800c10e <__hexnan+0x12e>
 800c062:	3102      	adds	r1, #2
 800c064:	f8ca 1000 	str.w	r1, [sl]
 800c068:	f1bb 0f00 	cmp.w	fp, #0
 800c06c:	d04f      	beq.n	800c10e <__hexnan+0x12e>
 800c06e:	454c      	cmp	r4, r9
 800c070:	d206      	bcs.n	800c080 <__hexnan+0xa0>
 800c072:	2d07      	cmp	r5, #7
 800c074:	dc04      	bgt.n	800c080 <__hexnan+0xa0>
 800c076:	462a      	mov	r2, r5
 800c078:	4649      	mov	r1, r9
 800c07a:	4620      	mov	r0, r4
 800c07c:	f7ff ff8a 	bl	800bf94 <L_shift>
 800c080:	4544      	cmp	r4, r8
 800c082:	d934      	bls.n	800c0ee <__hexnan+0x10e>
 800c084:	f1a8 0204 	sub.w	r2, r8, #4
 800c088:	4623      	mov	r3, r4
 800c08a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c08e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c092:	429f      	cmp	r7, r3
 800c094:	d2f9      	bcs.n	800c08a <__hexnan+0xaa>
 800c096:	1b3b      	subs	r3, r7, r4
 800c098:	f023 0303 	bic.w	r3, r3, #3
 800c09c:	3304      	adds	r3, #4
 800c09e:	3e03      	subs	r6, #3
 800c0a0:	3401      	adds	r4, #1
 800c0a2:	42a6      	cmp	r6, r4
 800c0a4:	bf38      	it	cc
 800c0a6:	2304      	movcc	r3, #4
 800c0a8:	4443      	add	r3, r8
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f843 2b04 	str.w	r2, [r3], #4
 800c0b0:	429f      	cmp	r7, r3
 800c0b2:	d2fb      	bcs.n	800c0ac <__hexnan+0xcc>
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	b91b      	cbnz	r3, 800c0c0 <__hexnan+0xe0>
 800c0b8:	4547      	cmp	r7, r8
 800c0ba:	d126      	bne.n	800c10a <__hexnan+0x12a>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	603b      	str	r3, [r7, #0]
 800c0c0:	2005      	movs	r0, #5
 800c0c2:	e025      	b.n	800c110 <__hexnan+0x130>
 800c0c4:	3501      	adds	r5, #1
 800c0c6:	2d08      	cmp	r5, #8
 800c0c8:	f10b 0b01 	add.w	fp, fp, #1
 800c0cc:	dd06      	ble.n	800c0dc <__hexnan+0xfc>
 800c0ce:	4544      	cmp	r4, r8
 800c0d0:	d9c3      	bls.n	800c05a <__hexnan+0x7a>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	f844 3c04 	str.w	r3, [r4, #-4]
 800c0d8:	2501      	movs	r5, #1
 800c0da:	3c04      	subs	r4, #4
 800c0dc:	6822      	ldr	r2, [r4, #0]
 800c0de:	f000 000f 	and.w	r0, r0, #15
 800c0e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c0e6:	6020      	str	r0, [r4, #0]
 800c0e8:	e7b7      	b.n	800c05a <__hexnan+0x7a>
 800c0ea:	2508      	movs	r5, #8
 800c0ec:	e7b5      	b.n	800c05a <__hexnan+0x7a>
 800c0ee:	9b01      	ldr	r3, [sp, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d0df      	beq.n	800c0b4 <__hexnan+0xd4>
 800c0f4:	f1c3 0320 	rsb	r3, r3, #32
 800c0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0fc:	40da      	lsrs	r2, r3
 800c0fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c102:	4013      	ands	r3, r2
 800c104:	f846 3c04 	str.w	r3, [r6, #-4]
 800c108:	e7d4      	b.n	800c0b4 <__hexnan+0xd4>
 800c10a:	3f04      	subs	r7, #4
 800c10c:	e7d2      	b.n	800c0b4 <__hexnan+0xd4>
 800c10e:	2004      	movs	r0, #4
 800c110:	b007      	add	sp, #28
 800c112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c116 <__ascii_mbtowc>:
 800c116:	b082      	sub	sp, #8
 800c118:	b901      	cbnz	r1, 800c11c <__ascii_mbtowc+0x6>
 800c11a:	a901      	add	r1, sp, #4
 800c11c:	b142      	cbz	r2, 800c130 <__ascii_mbtowc+0x1a>
 800c11e:	b14b      	cbz	r3, 800c134 <__ascii_mbtowc+0x1e>
 800c120:	7813      	ldrb	r3, [r2, #0]
 800c122:	600b      	str	r3, [r1, #0]
 800c124:	7812      	ldrb	r2, [r2, #0]
 800c126:	1e10      	subs	r0, r2, #0
 800c128:	bf18      	it	ne
 800c12a:	2001      	movne	r0, #1
 800c12c:	b002      	add	sp, #8
 800c12e:	4770      	bx	lr
 800c130:	4610      	mov	r0, r2
 800c132:	e7fb      	b.n	800c12c <__ascii_mbtowc+0x16>
 800c134:	f06f 0001 	mvn.w	r0, #1
 800c138:	e7f8      	b.n	800c12c <__ascii_mbtowc+0x16>
	...

0800c13c <_Balloc>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	69c6      	ldr	r6, [r0, #28]
 800c140:	4604      	mov	r4, r0
 800c142:	460d      	mov	r5, r1
 800c144:	b976      	cbnz	r6, 800c164 <_Balloc+0x28>
 800c146:	2010      	movs	r0, #16
 800c148:	f7fe fbb0 	bl	800a8ac <malloc>
 800c14c:	4602      	mov	r2, r0
 800c14e:	61e0      	str	r0, [r4, #28]
 800c150:	b920      	cbnz	r0, 800c15c <_Balloc+0x20>
 800c152:	4b18      	ldr	r3, [pc, #96]	; (800c1b4 <_Balloc+0x78>)
 800c154:	4818      	ldr	r0, [pc, #96]	; (800c1b8 <_Balloc+0x7c>)
 800c156:	216b      	movs	r1, #107	; 0x6b
 800c158:	f000 fd58 	bl	800cc0c <__assert_func>
 800c15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c160:	6006      	str	r6, [r0, #0]
 800c162:	60c6      	str	r6, [r0, #12]
 800c164:	69e6      	ldr	r6, [r4, #28]
 800c166:	68f3      	ldr	r3, [r6, #12]
 800c168:	b183      	cbz	r3, 800c18c <_Balloc+0x50>
 800c16a:	69e3      	ldr	r3, [r4, #28]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c172:	b9b8      	cbnz	r0, 800c1a4 <_Balloc+0x68>
 800c174:	2101      	movs	r1, #1
 800c176:	fa01 f605 	lsl.w	r6, r1, r5
 800c17a:	1d72      	adds	r2, r6, #5
 800c17c:	0092      	lsls	r2, r2, #2
 800c17e:	4620      	mov	r0, r4
 800c180:	f000 fd62 	bl	800cc48 <_calloc_r>
 800c184:	b160      	cbz	r0, 800c1a0 <_Balloc+0x64>
 800c186:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c18a:	e00e      	b.n	800c1aa <_Balloc+0x6e>
 800c18c:	2221      	movs	r2, #33	; 0x21
 800c18e:	2104      	movs	r1, #4
 800c190:	4620      	mov	r0, r4
 800c192:	f000 fd59 	bl	800cc48 <_calloc_r>
 800c196:	69e3      	ldr	r3, [r4, #28]
 800c198:	60f0      	str	r0, [r6, #12]
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1e4      	bne.n	800c16a <_Balloc+0x2e>
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	bd70      	pop	{r4, r5, r6, pc}
 800c1a4:	6802      	ldr	r2, [r0, #0]
 800c1a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c1b0:	e7f7      	b.n	800c1a2 <_Balloc+0x66>
 800c1b2:	bf00      	nop
 800c1b4:	0800e809 	.word	0x0800e809
 800c1b8:	0800e820 	.word	0x0800e820

0800c1bc <_Bfree>:
 800c1bc:	b570      	push	{r4, r5, r6, lr}
 800c1be:	69c6      	ldr	r6, [r0, #28]
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	460c      	mov	r4, r1
 800c1c4:	b976      	cbnz	r6, 800c1e4 <_Bfree+0x28>
 800c1c6:	2010      	movs	r0, #16
 800c1c8:	f7fe fb70 	bl	800a8ac <malloc>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	61e8      	str	r0, [r5, #28]
 800c1d0:	b920      	cbnz	r0, 800c1dc <_Bfree+0x20>
 800c1d2:	4b09      	ldr	r3, [pc, #36]	; (800c1f8 <_Bfree+0x3c>)
 800c1d4:	4809      	ldr	r0, [pc, #36]	; (800c1fc <_Bfree+0x40>)
 800c1d6:	218f      	movs	r1, #143	; 0x8f
 800c1d8:	f000 fd18 	bl	800cc0c <__assert_func>
 800c1dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1e0:	6006      	str	r6, [r0, #0]
 800c1e2:	60c6      	str	r6, [r0, #12]
 800c1e4:	b13c      	cbz	r4, 800c1f6 <_Bfree+0x3a>
 800c1e6:	69eb      	ldr	r3, [r5, #28]
 800c1e8:	6862      	ldr	r2, [r4, #4]
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1f0:	6021      	str	r1, [r4, #0]
 800c1f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1f6:	bd70      	pop	{r4, r5, r6, pc}
 800c1f8:	0800e809 	.word	0x0800e809
 800c1fc:	0800e820 	.word	0x0800e820

0800c200 <__multadd>:
 800c200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c204:	690d      	ldr	r5, [r1, #16]
 800c206:	4607      	mov	r7, r0
 800c208:	460c      	mov	r4, r1
 800c20a:	461e      	mov	r6, r3
 800c20c:	f101 0c14 	add.w	ip, r1, #20
 800c210:	2000      	movs	r0, #0
 800c212:	f8dc 3000 	ldr.w	r3, [ip]
 800c216:	b299      	uxth	r1, r3
 800c218:	fb02 6101 	mla	r1, r2, r1, r6
 800c21c:	0c1e      	lsrs	r6, r3, #16
 800c21e:	0c0b      	lsrs	r3, r1, #16
 800c220:	fb02 3306 	mla	r3, r2, r6, r3
 800c224:	b289      	uxth	r1, r1
 800c226:	3001      	adds	r0, #1
 800c228:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c22c:	4285      	cmp	r5, r0
 800c22e:	f84c 1b04 	str.w	r1, [ip], #4
 800c232:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c236:	dcec      	bgt.n	800c212 <__multadd+0x12>
 800c238:	b30e      	cbz	r6, 800c27e <__multadd+0x7e>
 800c23a:	68a3      	ldr	r3, [r4, #8]
 800c23c:	42ab      	cmp	r3, r5
 800c23e:	dc19      	bgt.n	800c274 <__multadd+0x74>
 800c240:	6861      	ldr	r1, [r4, #4]
 800c242:	4638      	mov	r0, r7
 800c244:	3101      	adds	r1, #1
 800c246:	f7ff ff79 	bl	800c13c <_Balloc>
 800c24a:	4680      	mov	r8, r0
 800c24c:	b928      	cbnz	r0, 800c25a <__multadd+0x5a>
 800c24e:	4602      	mov	r2, r0
 800c250:	4b0c      	ldr	r3, [pc, #48]	; (800c284 <__multadd+0x84>)
 800c252:	480d      	ldr	r0, [pc, #52]	; (800c288 <__multadd+0x88>)
 800c254:	21ba      	movs	r1, #186	; 0xba
 800c256:	f000 fcd9 	bl	800cc0c <__assert_func>
 800c25a:	6922      	ldr	r2, [r4, #16]
 800c25c:	3202      	adds	r2, #2
 800c25e:	f104 010c 	add.w	r1, r4, #12
 800c262:	0092      	lsls	r2, r2, #2
 800c264:	300c      	adds	r0, #12
 800c266:	f7ff fb9a 	bl	800b99e <memcpy>
 800c26a:	4621      	mov	r1, r4
 800c26c:	4638      	mov	r0, r7
 800c26e:	f7ff ffa5 	bl	800c1bc <_Bfree>
 800c272:	4644      	mov	r4, r8
 800c274:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c278:	3501      	adds	r5, #1
 800c27a:	615e      	str	r6, [r3, #20]
 800c27c:	6125      	str	r5, [r4, #16]
 800c27e:	4620      	mov	r0, r4
 800c280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c284:	0800e798 	.word	0x0800e798
 800c288:	0800e820 	.word	0x0800e820

0800c28c <__s2b>:
 800c28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c290:	460c      	mov	r4, r1
 800c292:	4615      	mov	r5, r2
 800c294:	461f      	mov	r7, r3
 800c296:	2209      	movs	r2, #9
 800c298:	3308      	adds	r3, #8
 800c29a:	4606      	mov	r6, r0
 800c29c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	db09      	blt.n	800c2bc <__s2b+0x30>
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f7ff ff47 	bl	800c13c <_Balloc>
 800c2ae:	b940      	cbnz	r0, 800c2c2 <__s2b+0x36>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	4b19      	ldr	r3, [pc, #100]	; (800c318 <__s2b+0x8c>)
 800c2b4:	4819      	ldr	r0, [pc, #100]	; (800c31c <__s2b+0x90>)
 800c2b6:	21d3      	movs	r1, #211	; 0xd3
 800c2b8:	f000 fca8 	bl	800cc0c <__assert_func>
 800c2bc:	0052      	lsls	r2, r2, #1
 800c2be:	3101      	adds	r1, #1
 800c2c0:	e7f0      	b.n	800c2a4 <__s2b+0x18>
 800c2c2:	9b08      	ldr	r3, [sp, #32]
 800c2c4:	6143      	str	r3, [r0, #20]
 800c2c6:	2d09      	cmp	r5, #9
 800c2c8:	f04f 0301 	mov.w	r3, #1
 800c2cc:	6103      	str	r3, [r0, #16]
 800c2ce:	dd16      	ble.n	800c2fe <__s2b+0x72>
 800c2d0:	f104 0909 	add.w	r9, r4, #9
 800c2d4:	46c8      	mov	r8, r9
 800c2d6:	442c      	add	r4, r5
 800c2d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c2dc:	4601      	mov	r1, r0
 800c2de:	3b30      	subs	r3, #48	; 0x30
 800c2e0:	220a      	movs	r2, #10
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	f7ff ff8c 	bl	800c200 <__multadd>
 800c2e8:	45a0      	cmp	r8, r4
 800c2ea:	d1f5      	bne.n	800c2d8 <__s2b+0x4c>
 800c2ec:	f1a5 0408 	sub.w	r4, r5, #8
 800c2f0:	444c      	add	r4, r9
 800c2f2:	1b2d      	subs	r5, r5, r4
 800c2f4:	1963      	adds	r3, r4, r5
 800c2f6:	42bb      	cmp	r3, r7
 800c2f8:	db04      	blt.n	800c304 <__s2b+0x78>
 800c2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2fe:	340a      	adds	r4, #10
 800c300:	2509      	movs	r5, #9
 800c302:	e7f6      	b.n	800c2f2 <__s2b+0x66>
 800c304:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c308:	4601      	mov	r1, r0
 800c30a:	3b30      	subs	r3, #48	; 0x30
 800c30c:	220a      	movs	r2, #10
 800c30e:	4630      	mov	r0, r6
 800c310:	f7ff ff76 	bl	800c200 <__multadd>
 800c314:	e7ee      	b.n	800c2f4 <__s2b+0x68>
 800c316:	bf00      	nop
 800c318:	0800e798 	.word	0x0800e798
 800c31c:	0800e820 	.word	0x0800e820

0800c320 <__hi0bits>:
 800c320:	0c03      	lsrs	r3, r0, #16
 800c322:	041b      	lsls	r3, r3, #16
 800c324:	b9d3      	cbnz	r3, 800c35c <__hi0bits+0x3c>
 800c326:	0400      	lsls	r0, r0, #16
 800c328:	2310      	movs	r3, #16
 800c32a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c32e:	bf04      	itt	eq
 800c330:	0200      	lsleq	r0, r0, #8
 800c332:	3308      	addeq	r3, #8
 800c334:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c338:	bf04      	itt	eq
 800c33a:	0100      	lsleq	r0, r0, #4
 800c33c:	3304      	addeq	r3, #4
 800c33e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c342:	bf04      	itt	eq
 800c344:	0080      	lsleq	r0, r0, #2
 800c346:	3302      	addeq	r3, #2
 800c348:	2800      	cmp	r0, #0
 800c34a:	db05      	blt.n	800c358 <__hi0bits+0x38>
 800c34c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c350:	f103 0301 	add.w	r3, r3, #1
 800c354:	bf08      	it	eq
 800c356:	2320      	moveq	r3, #32
 800c358:	4618      	mov	r0, r3
 800c35a:	4770      	bx	lr
 800c35c:	2300      	movs	r3, #0
 800c35e:	e7e4      	b.n	800c32a <__hi0bits+0xa>

0800c360 <__lo0bits>:
 800c360:	6803      	ldr	r3, [r0, #0]
 800c362:	f013 0207 	ands.w	r2, r3, #7
 800c366:	d00c      	beq.n	800c382 <__lo0bits+0x22>
 800c368:	07d9      	lsls	r1, r3, #31
 800c36a:	d422      	bmi.n	800c3b2 <__lo0bits+0x52>
 800c36c:	079a      	lsls	r2, r3, #30
 800c36e:	bf49      	itett	mi
 800c370:	085b      	lsrmi	r3, r3, #1
 800c372:	089b      	lsrpl	r3, r3, #2
 800c374:	6003      	strmi	r3, [r0, #0]
 800c376:	2201      	movmi	r2, #1
 800c378:	bf5c      	itt	pl
 800c37a:	6003      	strpl	r3, [r0, #0]
 800c37c:	2202      	movpl	r2, #2
 800c37e:	4610      	mov	r0, r2
 800c380:	4770      	bx	lr
 800c382:	b299      	uxth	r1, r3
 800c384:	b909      	cbnz	r1, 800c38a <__lo0bits+0x2a>
 800c386:	0c1b      	lsrs	r3, r3, #16
 800c388:	2210      	movs	r2, #16
 800c38a:	b2d9      	uxtb	r1, r3
 800c38c:	b909      	cbnz	r1, 800c392 <__lo0bits+0x32>
 800c38e:	3208      	adds	r2, #8
 800c390:	0a1b      	lsrs	r3, r3, #8
 800c392:	0719      	lsls	r1, r3, #28
 800c394:	bf04      	itt	eq
 800c396:	091b      	lsreq	r3, r3, #4
 800c398:	3204      	addeq	r2, #4
 800c39a:	0799      	lsls	r1, r3, #30
 800c39c:	bf04      	itt	eq
 800c39e:	089b      	lsreq	r3, r3, #2
 800c3a0:	3202      	addeq	r2, #2
 800c3a2:	07d9      	lsls	r1, r3, #31
 800c3a4:	d403      	bmi.n	800c3ae <__lo0bits+0x4e>
 800c3a6:	085b      	lsrs	r3, r3, #1
 800c3a8:	f102 0201 	add.w	r2, r2, #1
 800c3ac:	d003      	beq.n	800c3b6 <__lo0bits+0x56>
 800c3ae:	6003      	str	r3, [r0, #0]
 800c3b0:	e7e5      	b.n	800c37e <__lo0bits+0x1e>
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	e7e3      	b.n	800c37e <__lo0bits+0x1e>
 800c3b6:	2220      	movs	r2, #32
 800c3b8:	e7e1      	b.n	800c37e <__lo0bits+0x1e>
	...

0800c3bc <__i2b>:
 800c3bc:	b510      	push	{r4, lr}
 800c3be:	460c      	mov	r4, r1
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	f7ff febb 	bl	800c13c <_Balloc>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	b928      	cbnz	r0, 800c3d6 <__i2b+0x1a>
 800c3ca:	4b05      	ldr	r3, [pc, #20]	; (800c3e0 <__i2b+0x24>)
 800c3cc:	4805      	ldr	r0, [pc, #20]	; (800c3e4 <__i2b+0x28>)
 800c3ce:	f240 1145 	movw	r1, #325	; 0x145
 800c3d2:	f000 fc1b 	bl	800cc0c <__assert_func>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	6144      	str	r4, [r0, #20]
 800c3da:	6103      	str	r3, [r0, #16]
 800c3dc:	bd10      	pop	{r4, pc}
 800c3de:	bf00      	nop
 800c3e0:	0800e798 	.word	0x0800e798
 800c3e4:	0800e820 	.word	0x0800e820

0800c3e8 <__multiply>:
 800c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	4691      	mov	r9, r2
 800c3ee:	690a      	ldr	r2, [r1, #16]
 800c3f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	bfb8      	it	lt
 800c3f8:	460b      	movlt	r3, r1
 800c3fa:	460c      	mov	r4, r1
 800c3fc:	bfbc      	itt	lt
 800c3fe:	464c      	movlt	r4, r9
 800c400:	4699      	movlt	r9, r3
 800c402:	6927      	ldr	r7, [r4, #16]
 800c404:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c408:	68a3      	ldr	r3, [r4, #8]
 800c40a:	6861      	ldr	r1, [r4, #4]
 800c40c:	eb07 060a 	add.w	r6, r7, sl
 800c410:	42b3      	cmp	r3, r6
 800c412:	b085      	sub	sp, #20
 800c414:	bfb8      	it	lt
 800c416:	3101      	addlt	r1, #1
 800c418:	f7ff fe90 	bl	800c13c <_Balloc>
 800c41c:	b930      	cbnz	r0, 800c42c <__multiply+0x44>
 800c41e:	4602      	mov	r2, r0
 800c420:	4b44      	ldr	r3, [pc, #272]	; (800c534 <__multiply+0x14c>)
 800c422:	4845      	ldr	r0, [pc, #276]	; (800c538 <__multiply+0x150>)
 800c424:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c428:	f000 fbf0 	bl	800cc0c <__assert_func>
 800c42c:	f100 0514 	add.w	r5, r0, #20
 800c430:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c434:	462b      	mov	r3, r5
 800c436:	2200      	movs	r2, #0
 800c438:	4543      	cmp	r3, r8
 800c43a:	d321      	bcc.n	800c480 <__multiply+0x98>
 800c43c:	f104 0314 	add.w	r3, r4, #20
 800c440:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c444:	f109 0314 	add.w	r3, r9, #20
 800c448:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c44c:	9202      	str	r2, [sp, #8]
 800c44e:	1b3a      	subs	r2, r7, r4
 800c450:	3a15      	subs	r2, #21
 800c452:	f022 0203 	bic.w	r2, r2, #3
 800c456:	3204      	adds	r2, #4
 800c458:	f104 0115 	add.w	r1, r4, #21
 800c45c:	428f      	cmp	r7, r1
 800c45e:	bf38      	it	cc
 800c460:	2204      	movcc	r2, #4
 800c462:	9201      	str	r2, [sp, #4]
 800c464:	9a02      	ldr	r2, [sp, #8]
 800c466:	9303      	str	r3, [sp, #12]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d80c      	bhi.n	800c486 <__multiply+0x9e>
 800c46c:	2e00      	cmp	r6, #0
 800c46e:	dd03      	ble.n	800c478 <__multiply+0x90>
 800c470:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c474:	2b00      	cmp	r3, #0
 800c476:	d05b      	beq.n	800c530 <__multiply+0x148>
 800c478:	6106      	str	r6, [r0, #16]
 800c47a:	b005      	add	sp, #20
 800c47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c480:	f843 2b04 	str.w	r2, [r3], #4
 800c484:	e7d8      	b.n	800c438 <__multiply+0x50>
 800c486:	f8b3 a000 	ldrh.w	sl, [r3]
 800c48a:	f1ba 0f00 	cmp.w	sl, #0
 800c48e:	d024      	beq.n	800c4da <__multiply+0xf2>
 800c490:	f104 0e14 	add.w	lr, r4, #20
 800c494:	46a9      	mov	r9, r5
 800c496:	f04f 0c00 	mov.w	ip, #0
 800c49a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c49e:	f8d9 1000 	ldr.w	r1, [r9]
 800c4a2:	fa1f fb82 	uxth.w	fp, r2
 800c4a6:	b289      	uxth	r1, r1
 800c4a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c4ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c4b0:	f8d9 2000 	ldr.w	r2, [r9]
 800c4b4:	4461      	add	r1, ip
 800c4b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800c4be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c4c2:	b289      	uxth	r1, r1
 800c4c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c4c8:	4577      	cmp	r7, lr
 800c4ca:	f849 1b04 	str.w	r1, [r9], #4
 800c4ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4d2:	d8e2      	bhi.n	800c49a <__multiply+0xb2>
 800c4d4:	9a01      	ldr	r2, [sp, #4]
 800c4d6:	f845 c002 	str.w	ip, [r5, r2]
 800c4da:	9a03      	ldr	r2, [sp, #12]
 800c4dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	f1b9 0f00 	cmp.w	r9, #0
 800c4e6:	d021      	beq.n	800c52c <__multiply+0x144>
 800c4e8:	6829      	ldr	r1, [r5, #0]
 800c4ea:	f104 0c14 	add.w	ip, r4, #20
 800c4ee:	46ae      	mov	lr, r5
 800c4f0:	f04f 0a00 	mov.w	sl, #0
 800c4f4:	f8bc b000 	ldrh.w	fp, [ip]
 800c4f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c4fc:	fb09 220b 	mla	r2, r9, fp, r2
 800c500:	4452      	add	r2, sl
 800c502:	b289      	uxth	r1, r1
 800c504:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c508:	f84e 1b04 	str.w	r1, [lr], #4
 800c50c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c510:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c514:	f8be 1000 	ldrh.w	r1, [lr]
 800c518:	fb09 110a 	mla	r1, r9, sl, r1
 800c51c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c520:	4567      	cmp	r7, ip
 800c522:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c526:	d8e5      	bhi.n	800c4f4 <__multiply+0x10c>
 800c528:	9a01      	ldr	r2, [sp, #4]
 800c52a:	50a9      	str	r1, [r5, r2]
 800c52c:	3504      	adds	r5, #4
 800c52e:	e799      	b.n	800c464 <__multiply+0x7c>
 800c530:	3e01      	subs	r6, #1
 800c532:	e79b      	b.n	800c46c <__multiply+0x84>
 800c534:	0800e798 	.word	0x0800e798
 800c538:	0800e820 	.word	0x0800e820

0800c53c <__pow5mult>:
 800c53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c540:	4615      	mov	r5, r2
 800c542:	f012 0203 	ands.w	r2, r2, #3
 800c546:	4606      	mov	r6, r0
 800c548:	460f      	mov	r7, r1
 800c54a:	d007      	beq.n	800c55c <__pow5mult+0x20>
 800c54c:	4c25      	ldr	r4, [pc, #148]	; (800c5e4 <__pow5mult+0xa8>)
 800c54e:	3a01      	subs	r2, #1
 800c550:	2300      	movs	r3, #0
 800c552:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c556:	f7ff fe53 	bl	800c200 <__multadd>
 800c55a:	4607      	mov	r7, r0
 800c55c:	10ad      	asrs	r5, r5, #2
 800c55e:	d03d      	beq.n	800c5dc <__pow5mult+0xa0>
 800c560:	69f4      	ldr	r4, [r6, #28]
 800c562:	b97c      	cbnz	r4, 800c584 <__pow5mult+0x48>
 800c564:	2010      	movs	r0, #16
 800c566:	f7fe f9a1 	bl	800a8ac <malloc>
 800c56a:	4602      	mov	r2, r0
 800c56c:	61f0      	str	r0, [r6, #28]
 800c56e:	b928      	cbnz	r0, 800c57c <__pow5mult+0x40>
 800c570:	4b1d      	ldr	r3, [pc, #116]	; (800c5e8 <__pow5mult+0xac>)
 800c572:	481e      	ldr	r0, [pc, #120]	; (800c5ec <__pow5mult+0xb0>)
 800c574:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c578:	f000 fb48 	bl	800cc0c <__assert_func>
 800c57c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c580:	6004      	str	r4, [r0, #0]
 800c582:	60c4      	str	r4, [r0, #12]
 800c584:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c588:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c58c:	b94c      	cbnz	r4, 800c5a2 <__pow5mult+0x66>
 800c58e:	f240 2171 	movw	r1, #625	; 0x271
 800c592:	4630      	mov	r0, r6
 800c594:	f7ff ff12 	bl	800c3bc <__i2b>
 800c598:	2300      	movs	r3, #0
 800c59a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c59e:	4604      	mov	r4, r0
 800c5a0:	6003      	str	r3, [r0, #0]
 800c5a2:	f04f 0900 	mov.w	r9, #0
 800c5a6:	07eb      	lsls	r3, r5, #31
 800c5a8:	d50a      	bpl.n	800c5c0 <__pow5mult+0x84>
 800c5aa:	4639      	mov	r1, r7
 800c5ac:	4622      	mov	r2, r4
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	f7ff ff1a 	bl	800c3e8 <__multiply>
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	4680      	mov	r8, r0
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f7ff fdff 	bl	800c1bc <_Bfree>
 800c5be:	4647      	mov	r7, r8
 800c5c0:	106d      	asrs	r5, r5, #1
 800c5c2:	d00b      	beq.n	800c5dc <__pow5mult+0xa0>
 800c5c4:	6820      	ldr	r0, [r4, #0]
 800c5c6:	b938      	cbnz	r0, 800c5d8 <__pow5mult+0x9c>
 800c5c8:	4622      	mov	r2, r4
 800c5ca:	4621      	mov	r1, r4
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	f7ff ff0b 	bl	800c3e8 <__multiply>
 800c5d2:	6020      	str	r0, [r4, #0]
 800c5d4:	f8c0 9000 	str.w	r9, [r0]
 800c5d8:	4604      	mov	r4, r0
 800c5da:	e7e4      	b.n	800c5a6 <__pow5mult+0x6a>
 800c5dc:	4638      	mov	r0, r7
 800c5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5e2:	bf00      	nop
 800c5e4:	0800e970 	.word	0x0800e970
 800c5e8:	0800e809 	.word	0x0800e809
 800c5ec:	0800e820 	.word	0x0800e820

0800c5f0 <__lshift>:
 800c5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f4:	460c      	mov	r4, r1
 800c5f6:	6849      	ldr	r1, [r1, #4]
 800c5f8:	6923      	ldr	r3, [r4, #16]
 800c5fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5fe:	68a3      	ldr	r3, [r4, #8]
 800c600:	4607      	mov	r7, r0
 800c602:	4691      	mov	r9, r2
 800c604:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c608:	f108 0601 	add.w	r6, r8, #1
 800c60c:	42b3      	cmp	r3, r6
 800c60e:	db0b      	blt.n	800c628 <__lshift+0x38>
 800c610:	4638      	mov	r0, r7
 800c612:	f7ff fd93 	bl	800c13c <_Balloc>
 800c616:	4605      	mov	r5, r0
 800c618:	b948      	cbnz	r0, 800c62e <__lshift+0x3e>
 800c61a:	4602      	mov	r2, r0
 800c61c:	4b28      	ldr	r3, [pc, #160]	; (800c6c0 <__lshift+0xd0>)
 800c61e:	4829      	ldr	r0, [pc, #164]	; (800c6c4 <__lshift+0xd4>)
 800c620:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c624:	f000 faf2 	bl	800cc0c <__assert_func>
 800c628:	3101      	adds	r1, #1
 800c62a:	005b      	lsls	r3, r3, #1
 800c62c:	e7ee      	b.n	800c60c <__lshift+0x1c>
 800c62e:	2300      	movs	r3, #0
 800c630:	f100 0114 	add.w	r1, r0, #20
 800c634:	f100 0210 	add.w	r2, r0, #16
 800c638:	4618      	mov	r0, r3
 800c63a:	4553      	cmp	r3, sl
 800c63c:	db33      	blt.n	800c6a6 <__lshift+0xb6>
 800c63e:	6920      	ldr	r0, [r4, #16]
 800c640:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c644:	f104 0314 	add.w	r3, r4, #20
 800c648:	f019 091f 	ands.w	r9, r9, #31
 800c64c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c650:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c654:	d02b      	beq.n	800c6ae <__lshift+0xbe>
 800c656:	f1c9 0e20 	rsb	lr, r9, #32
 800c65a:	468a      	mov	sl, r1
 800c65c:	2200      	movs	r2, #0
 800c65e:	6818      	ldr	r0, [r3, #0]
 800c660:	fa00 f009 	lsl.w	r0, r0, r9
 800c664:	4310      	orrs	r0, r2
 800c666:	f84a 0b04 	str.w	r0, [sl], #4
 800c66a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c66e:	459c      	cmp	ip, r3
 800c670:	fa22 f20e 	lsr.w	r2, r2, lr
 800c674:	d8f3      	bhi.n	800c65e <__lshift+0x6e>
 800c676:	ebac 0304 	sub.w	r3, ip, r4
 800c67a:	3b15      	subs	r3, #21
 800c67c:	f023 0303 	bic.w	r3, r3, #3
 800c680:	3304      	adds	r3, #4
 800c682:	f104 0015 	add.w	r0, r4, #21
 800c686:	4584      	cmp	ip, r0
 800c688:	bf38      	it	cc
 800c68a:	2304      	movcc	r3, #4
 800c68c:	50ca      	str	r2, [r1, r3]
 800c68e:	b10a      	cbz	r2, 800c694 <__lshift+0xa4>
 800c690:	f108 0602 	add.w	r6, r8, #2
 800c694:	3e01      	subs	r6, #1
 800c696:	4638      	mov	r0, r7
 800c698:	612e      	str	r6, [r5, #16]
 800c69a:	4621      	mov	r1, r4
 800c69c:	f7ff fd8e 	bl	800c1bc <_Bfree>
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	e7c5      	b.n	800c63a <__lshift+0x4a>
 800c6ae:	3904      	subs	r1, #4
 800c6b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6b8:	459c      	cmp	ip, r3
 800c6ba:	d8f9      	bhi.n	800c6b0 <__lshift+0xc0>
 800c6bc:	e7ea      	b.n	800c694 <__lshift+0xa4>
 800c6be:	bf00      	nop
 800c6c0:	0800e798 	.word	0x0800e798
 800c6c4:	0800e820 	.word	0x0800e820

0800c6c8 <__mcmp>:
 800c6c8:	b530      	push	{r4, r5, lr}
 800c6ca:	6902      	ldr	r2, [r0, #16]
 800c6cc:	690c      	ldr	r4, [r1, #16]
 800c6ce:	1b12      	subs	r2, r2, r4
 800c6d0:	d10e      	bne.n	800c6f0 <__mcmp+0x28>
 800c6d2:	f100 0314 	add.w	r3, r0, #20
 800c6d6:	3114      	adds	r1, #20
 800c6d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c6dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c6e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c6e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c6e8:	42a5      	cmp	r5, r4
 800c6ea:	d003      	beq.n	800c6f4 <__mcmp+0x2c>
 800c6ec:	d305      	bcc.n	800c6fa <__mcmp+0x32>
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	bd30      	pop	{r4, r5, pc}
 800c6f4:	4283      	cmp	r3, r0
 800c6f6:	d3f3      	bcc.n	800c6e0 <__mcmp+0x18>
 800c6f8:	e7fa      	b.n	800c6f0 <__mcmp+0x28>
 800c6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c6fe:	e7f7      	b.n	800c6f0 <__mcmp+0x28>

0800c700 <__mdiff>:
 800c700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c704:	460c      	mov	r4, r1
 800c706:	4606      	mov	r6, r0
 800c708:	4611      	mov	r1, r2
 800c70a:	4620      	mov	r0, r4
 800c70c:	4690      	mov	r8, r2
 800c70e:	f7ff ffdb 	bl	800c6c8 <__mcmp>
 800c712:	1e05      	subs	r5, r0, #0
 800c714:	d110      	bne.n	800c738 <__mdiff+0x38>
 800c716:	4629      	mov	r1, r5
 800c718:	4630      	mov	r0, r6
 800c71a:	f7ff fd0f 	bl	800c13c <_Balloc>
 800c71e:	b930      	cbnz	r0, 800c72e <__mdiff+0x2e>
 800c720:	4b3a      	ldr	r3, [pc, #232]	; (800c80c <__mdiff+0x10c>)
 800c722:	4602      	mov	r2, r0
 800c724:	f240 2137 	movw	r1, #567	; 0x237
 800c728:	4839      	ldr	r0, [pc, #228]	; (800c810 <__mdiff+0x110>)
 800c72a:	f000 fa6f 	bl	800cc0c <__assert_func>
 800c72e:	2301      	movs	r3, #1
 800c730:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c738:	bfa4      	itt	ge
 800c73a:	4643      	movge	r3, r8
 800c73c:	46a0      	movge	r8, r4
 800c73e:	4630      	mov	r0, r6
 800c740:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c744:	bfa6      	itte	ge
 800c746:	461c      	movge	r4, r3
 800c748:	2500      	movge	r5, #0
 800c74a:	2501      	movlt	r5, #1
 800c74c:	f7ff fcf6 	bl	800c13c <_Balloc>
 800c750:	b920      	cbnz	r0, 800c75c <__mdiff+0x5c>
 800c752:	4b2e      	ldr	r3, [pc, #184]	; (800c80c <__mdiff+0x10c>)
 800c754:	4602      	mov	r2, r0
 800c756:	f240 2145 	movw	r1, #581	; 0x245
 800c75a:	e7e5      	b.n	800c728 <__mdiff+0x28>
 800c75c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c760:	6926      	ldr	r6, [r4, #16]
 800c762:	60c5      	str	r5, [r0, #12]
 800c764:	f104 0914 	add.w	r9, r4, #20
 800c768:	f108 0514 	add.w	r5, r8, #20
 800c76c:	f100 0e14 	add.w	lr, r0, #20
 800c770:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c774:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c778:	f108 0210 	add.w	r2, r8, #16
 800c77c:	46f2      	mov	sl, lr
 800c77e:	2100      	movs	r1, #0
 800c780:	f859 3b04 	ldr.w	r3, [r9], #4
 800c784:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c788:	fa11 f88b 	uxtah	r8, r1, fp
 800c78c:	b299      	uxth	r1, r3
 800c78e:	0c1b      	lsrs	r3, r3, #16
 800c790:	eba8 0801 	sub.w	r8, r8, r1
 800c794:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c798:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c79c:	fa1f f888 	uxth.w	r8, r8
 800c7a0:	1419      	asrs	r1, r3, #16
 800c7a2:	454e      	cmp	r6, r9
 800c7a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c7a8:	f84a 3b04 	str.w	r3, [sl], #4
 800c7ac:	d8e8      	bhi.n	800c780 <__mdiff+0x80>
 800c7ae:	1b33      	subs	r3, r6, r4
 800c7b0:	3b15      	subs	r3, #21
 800c7b2:	f023 0303 	bic.w	r3, r3, #3
 800c7b6:	3304      	adds	r3, #4
 800c7b8:	3415      	adds	r4, #21
 800c7ba:	42a6      	cmp	r6, r4
 800c7bc:	bf38      	it	cc
 800c7be:	2304      	movcc	r3, #4
 800c7c0:	441d      	add	r5, r3
 800c7c2:	4473      	add	r3, lr
 800c7c4:	469e      	mov	lr, r3
 800c7c6:	462e      	mov	r6, r5
 800c7c8:	4566      	cmp	r6, ip
 800c7ca:	d30e      	bcc.n	800c7ea <__mdiff+0xea>
 800c7cc:	f10c 0203 	add.w	r2, ip, #3
 800c7d0:	1b52      	subs	r2, r2, r5
 800c7d2:	f022 0203 	bic.w	r2, r2, #3
 800c7d6:	3d03      	subs	r5, #3
 800c7d8:	45ac      	cmp	ip, r5
 800c7da:	bf38      	it	cc
 800c7dc:	2200      	movcc	r2, #0
 800c7de:	4413      	add	r3, r2
 800c7e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c7e4:	b17a      	cbz	r2, 800c806 <__mdiff+0x106>
 800c7e6:	6107      	str	r7, [r0, #16]
 800c7e8:	e7a4      	b.n	800c734 <__mdiff+0x34>
 800c7ea:	f856 8b04 	ldr.w	r8, [r6], #4
 800c7ee:	fa11 f288 	uxtah	r2, r1, r8
 800c7f2:	1414      	asrs	r4, r2, #16
 800c7f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c7f8:	b292      	uxth	r2, r2
 800c7fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c7fe:	f84e 2b04 	str.w	r2, [lr], #4
 800c802:	1421      	asrs	r1, r4, #16
 800c804:	e7e0      	b.n	800c7c8 <__mdiff+0xc8>
 800c806:	3f01      	subs	r7, #1
 800c808:	e7ea      	b.n	800c7e0 <__mdiff+0xe0>
 800c80a:	bf00      	nop
 800c80c:	0800e798 	.word	0x0800e798
 800c810:	0800e820 	.word	0x0800e820

0800c814 <__ulp>:
 800c814:	b082      	sub	sp, #8
 800c816:	ed8d 0b00 	vstr	d0, [sp]
 800c81a:	9a01      	ldr	r2, [sp, #4]
 800c81c:	4b0f      	ldr	r3, [pc, #60]	; (800c85c <__ulp+0x48>)
 800c81e:	4013      	ands	r3, r2
 800c820:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c824:	2b00      	cmp	r3, #0
 800c826:	dc08      	bgt.n	800c83a <__ulp+0x26>
 800c828:	425b      	negs	r3, r3
 800c82a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c82e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c832:	da04      	bge.n	800c83e <__ulp+0x2a>
 800c834:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c838:	4113      	asrs	r3, r2
 800c83a:	2200      	movs	r2, #0
 800c83c:	e008      	b.n	800c850 <__ulp+0x3c>
 800c83e:	f1a2 0314 	sub.w	r3, r2, #20
 800c842:	2b1e      	cmp	r3, #30
 800c844:	bfda      	itte	le
 800c846:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c84a:	40da      	lsrle	r2, r3
 800c84c:	2201      	movgt	r2, #1
 800c84e:	2300      	movs	r3, #0
 800c850:	4619      	mov	r1, r3
 800c852:	4610      	mov	r0, r2
 800c854:	ec41 0b10 	vmov	d0, r0, r1
 800c858:	b002      	add	sp, #8
 800c85a:	4770      	bx	lr
 800c85c:	7ff00000 	.word	0x7ff00000

0800c860 <__b2d>:
 800c860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c864:	6906      	ldr	r6, [r0, #16]
 800c866:	f100 0814 	add.w	r8, r0, #20
 800c86a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c86e:	1f37      	subs	r7, r6, #4
 800c870:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c874:	4610      	mov	r0, r2
 800c876:	f7ff fd53 	bl	800c320 <__hi0bits>
 800c87a:	f1c0 0320 	rsb	r3, r0, #32
 800c87e:	280a      	cmp	r0, #10
 800c880:	600b      	str	r3, [r1, #0]
 800c882:	491b      	ldr	r1, [pc, #108]	; (800c8f0 <__b2d+0x90>)
 800c884:	dc15      	bgt.n	800c8b2 <__b2d+0x52>
 800c886:	f1c0 0c0b 	rsb	ip, r0, #11
 800c88a:	fa22 f30c 	lsr.w	r3, r2, ip
 800c88e:	45b8      	cmp	r8, r7
 800c890:	ea43 0501 	orr.w	r5, r3, r1
 800c894:	bf34      	ite	cc
 800c896:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c89a:	2300      	movcs	r3, #0
 800c89c:	3015      	adds	r0, #21
 800c89e:	fa02 f000 	lsl.w	r0, r2, r0
 800c8a2:	fa23 f30c 	lsr.w	r3, r3, ip
 800c8a6:	4303      	orrs	r3, r0
 800c8a8:	461c      	mov	r4, r3
 800c8aa:	ec45 4b10 	vmov	d0, r4, r5
 800c8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8b2:	45b8      	cmp	r8, r7
 800c8b4:	bf3a      	itte	cc
 800c8b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c8ba:	f1a6 0708 	subcc.w	r7, r6, #8
 800c8be:	2300      	movcs	r3, #0
 800c8c0:	380b      	subs	r0, #11
 800c8c2:	d012      	beq.n	800c8ea <__b2d+0x8a>
 800c8c4:	f1c0 0120 	rsb	r1, r0, #32
 800c8c8:	fa23 f401 	lsr.w	r4, r3, r1
 800c8cc:	4082      	lsls	r2, r0
 800c8ce:	4322      	orrs	r2, r4
 800c8d0:	4547      	cmp	r7, r8
 800c8d2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c8d6:	bf8c      	ite	hi
 800c8d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c8dc:	2200      	movls	r2, #0
 800c8de:	4083      	lsls	r3, r0
 800c8e0:	40ca      	lsrs	r2, r1
 800c8e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	e7de      	b.n	800c8a8 <__b2d+0x48>
 800c8ea:	ea42 0501 	orr.w	r5, r2, r1
 800c8ee:	e7db      	b.n	800c8a8 <__b2d+0x48>
 800c8f0:	3ff00000 	.word	0x3ff00000

0800c8f4 <__d2b>:
 800c8f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8f8:	460f      	mov	r7, r1
 800c8fa:	2101      	movs	r1, #1
 800c8fc:	ec59 8b10 	vmov	r8, r9, d0
 800c900:	4616      	mov	r6, r2
 800c902:	f7ff fc1b 	bl	800c13c <_Balloc>
 800c906:	4604      	mov	r4, r0
 800c908:	b930      	cbnz	r0, 800c918 <__d2b+0x24>
 800c90a:	4602      	mov	r2, r0
 800c90c:	4b24      	ldr	r3, [pc, #144]	; (800c9a0 <__d2b+0xac>)
 800c90e:	4825      	ldr	r0, [pc, #148]	; (800c9a4 <__d2b+0xb0>)
 800c910:	f240 310f 	movw	r1, #783	; 0x30f
 800c914:	f000 f97a 	bl	800cc0c <__assert_func>
 800c918:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c91c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c920:	bb2d      	cbnz	r5, 800c96e <__d2b+0x7a>
 800c922:	9301      	str	r3, [sp, #4]
 800c924:	f1b8 0300 	subs.w	r3, r8, #0
 800c928:	d026      	beq.n	800c978 <__d2b+0x84>
 800c92a:	4668      	mov	r0, sp
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	f7ff fd17 	bl	800c360 <__lo0bits>
 800c932:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c936:	b1e8      	cbz	r0, 800c974 <__d2b+0x80>
 800c938:	f1c0 0320 	rsb	r3, r0, #32
 800c93c:	fa02 f303 	lsl.w	r3, r2, r3
 800c940:	430b      	orrs	r3, r1
 800c942:	40c2      	lsrs	r2, r0
 800c944:	6163      	str	r3, [r4, #20]
 800c946:	9201      	str	r2, [sp, #4]
 800c948:	9b01      	ldr	r3, [sp, #4]
 800c94a:	61a3      	str	r3, [r4, #24]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	bf14      	ite	ne
 800c950:	2202      	movne	r2, #2
 800c952:	2201      	moveq	r2, #1
 800c954:	6122      	str	r2, [r4, #16]
 800c956:	b1bd      	cbz	r5, 800c988 <__d2b+0x94>
 800c958:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c95c:	4405      	add	r5, r0
 800c95e:	603d      	str	r5, [r7, #0]
 800c960:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c964:	6030      	str	r0, [r6, #0]
 800c966:	4620      	mov	r0, r4
 800c968:	b003      	add	sp, #12
 800c96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c96e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c972:	e7d6      	b.n	800c922 <__d2b+0x2e>
 800c974:	6161      	str	r1, [r4, #20]
 800c976:	e7e7      	b.n	800c948 <__d2b+0x54>
 800c978:	a801      	add	r0, sp, #4
 800c97a:	f7ff fcf1 	bl	800c360 <__lo0bits>
 800c97e:	9b01      	ldr	r3, [sp, #4]
 800c980:	6163      	str	r3, [r4, #20]
 800c982:	3020      	adds	r0, #32
 800c984:	2201      	movs	r2, #1
 800c986:	e7e5      	b.n	800c954 <__d2b+0x60>
 800c988:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c98c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c990:	6038      	str	r0, [r7, #0]
 800c992:	6918      	ldr	r0, [r3, #16]
 800c994:	f7ff fcc4 	bl	800c320 <__hi0bits>
 800c998:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c99c:	e7e2      	b.n	800c964 <__d2b+0x70>
 800c99e:	bf00      	nop
 800c9a0:	0800e798 	.word	0x0800e798
 800c9a4:	0800e820 	.word	0x0800e820

0800c9a8 <__ratio>:
 800c9a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ac:	4688      	mov	r8, r1
 800c9ae:	4669      	mov	r1, sp
 800c9b0:	4681      	mov	r9, r0
 800c9b2:	f7ff ff55 	bl	800c860 <__b2d>
 800c9b6:	a901      	add	r1, sp, #4
 800c9b8:	4640      	mov	r0, r8
 800c9ba:	ec55 4b10 	vmov	r4, r5, d0
 800c9be:	f7ff ff4f 	bl	800c860 <__b2d>
 800c9c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c9ca:	eba3 0c02 	sub.w	ip, r3, r2
 800c9ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c9d2:	1a9b      	subs	r3, r3, r2
 800c9d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c9d8:	ec51 0b10 	vmov	r0, r1, d0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	bfd6      	itet	le
 800c9e0:	460a      	movle	r2, r1
 800c9e2:	462a      	movgt	r2, r5
 800c9e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c9e8:	468b      	mov	fp, r1
 800c9ea:	462f      	mov	r7, r5
 800c9ec:	bfd4      	ite	le
 800c9ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c9f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	ee10 2a10 	vmov	r2, s0
 800c9fc:	465b      	mov	r3, fp
 800c9fe:	4639      	mov	r1, r7
 800ca00:	f7f3 ff3c 	bl	800087c <__aeabi_ddiv>
 800ca04:	ec41 0b10 	vmov	d0, r0, r1
 800ca08:	b003      	add	sp, #12
 800ca0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca0e <__copybits>:
 800ca0e:	3901      	subs	r1, #1
 800ca10:	b570      	push	{r4, r5, r6, lr}
 800ca12:	1149      	asrs	r1, r1, #5
 800ca14:	6914      	ldr	r4, [r2, #16]
 800ca16:	3101      	adds	r1, #1
 800ca18:	f102 0314 	add.w	r3, r2, #20
 800ca1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ca24:	1f05      	subs	r5, r0, #4
 800ca26:	42a3      	cmp	r3, r4
 800ca28:	d30c      	bcc.n	800ca44 <__copybits+0x36>
 800ca2a:	1aa3      	subs	r3, r4, r2
 800ca2c:	3b11      	subs	r3, #17
 800ca2e:	f023 0303 	bic.w	r3, r3, #3
 800ca32:	3211      	adds	r2, #17
 800ca34:	42a2      	cmp	r2, r4
 800ca36:	bf88      	it	hi
 800ca38:	2300      	movhi	r3, #0
 800ca3a:	4418      	add	r0, r3
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	4288      	cmp	r0, r1
 800ca40:	d305      	bcc.n	800ca4e <__copybits+0x40>
 800ca42:	bd70      	pop	{r4, r5, r6, pc}
 800ca44:	f853 6b04 	ldr.w	r6, [r3], #4
 800ca48:	f845 6f04 	str.w	r6, [r5, #4]!
 800ca4c:	e7eb      	b.n	800ca26 <__copybits+0x18>
 800ca4e:	f840 3b04 	str.w	r3, [r0], #4
 800ca52:	e7f4      	b.n	800ca3e <__copybits+0x30>

0800ca54 <__any_on>:
 800ca54:	f100 0214 	add.w	r2, r0, #20
 800ca58:	6900      	ldr	r0, [r0, #16]
 800ca5a:	114b      	asrs	r3, r1, #5
 800ca5c:	4298      	cmp	r0, r3
 800ca5e:	b510      	push	{r4, lr}
 800ca60:	db11      	blt.n	800ca86 <__any_on+0x32>
 800ca62:	dd0a      	ble.n	800ca7a <__any_on+0x26>
 800ca64:	f011 011f 	ands.w	r1, r1, #31
 800ca68:	d007      	beq.n	800ca7a <__any_on+0x26>
 800ca6a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca6e:	fa24 f001 	lsr.w	r0, r4, r1
 800ca72:	fa00 f101 	lsl.w	r1, r0, r1
 800ca76:	428c      	cmp	r4, r1
 800ca78:	d10b      	bne.n	800ca92 <__any_on+0x3e>
 800ca7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d803      	bhi.n	800ca8a <__any_on+0x36>
 800ca82:	2000      	movs	r0, #0
 800ca84:	bd10      	pop	{r4, pc}
 800ca86:	4603      	mov	r3, r0
 800ca88:	e7f7      	b.n	800ca7a <__any_on+0x26>
 800ca8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca8e:	2900      	cmp	r1, #0
 800ca90:	d0f5      	beq.n	800ca7e <__any_on+0x2a>
 800ca92:	2001      	movs	r0, #1
 800ca94:	e7f6      	b.n	800ca84 <__any_on+0x30>

0800ca96 <__ascii_wctomb>:
 800ca96:	b149      	cbz	r1, 800caac <__ascii_wctomb+0x16>
 800ca98:	2aff      	cmp	r2, #255	; 0xff
 800ca9a:	bf85      	ittet	hi
 800ca9c:	238a      	movhi	r3, #138	; 0x8a
 800ca9e:	6003      	strhi	r3, [r0, #0]
 800caa0:	700a      	strbls	r2, [r1, #0]
 800caa2:	f04f 30ff 	movhi.w	r0, #4294967295
 800caa6:	bf98      	it	ls
 800caa8:	2001      	movls	r0, #1
 800caaa:	4770      	bx	lr
 800caac:	4608      	mov	r0, r1
 800caae:	4770      	bx	lr

0800cab0 <__sflush_r>:
 800cab0:	898a      	ldrh	r2, [r1, #12]
 800cab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab6:	4605      	mov	r5, r0
 800cab8:	0710      	lsls	r0, r2, #28
 800caba:	460c      	mov	r4, r1
 800cabc:	d458      	bmi.n	800cb70 <__sflush_r+0xc0>
 800cabe:	684b      	ldr	r3, [r1, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	dc05      	bgt.n	800cad0 <__sflush_r+0x20>
 800cac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	dc02      	bgt.n	800cad0 <__sflush_r+0x20>
 800caca:	2000      	movs	r0, #0
 800cacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cad2:	2e00      	cmp	r6, #0
 800cad4:	d0f9      	beq.n	800caca <__sflush_r+0x1a>
 800cad6:	2300      	movs	r3, #0
 800cad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cadc:	682f      	ldr	r7, [r5, #0]
 800cade:	6a21      	ldr	r1, [r4, #32]
 800cae0:	602b      	str	r3, [r5, #0]
 800cae2:	d032      	beq.n	800cb4a <__sflush_r+0x9a>
 800cae4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cae6:	89a3      	ldrh	r3, [r4, #12]
 800cae8:	075a      	lsls	r2, r3, #29
 800caea:	d505      	bpl.n	800caf8 <__sflush_r+0x48>
 800caec:	6863      	ldr	r3, [r4, #4]
 800caee:	1ac0      	subs	r0, r0, r3
 800caf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800caf2:	b10b      	cbz	r3, 800caf8 <__sflush_r+0x48>
 800caf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800caf6:	1ac0      	subs	r0, r0, r3
 800caf8:	2300      	movs	r3, #0
 800cafa:	4602      	mov	r2, r0
 800cafc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cafe:	6a21      	ldr	r1, [r4, #32]
 800cb00:	4628      	mov	r0, r5
 800cb02:	47b0      	blx	r6
 800cb04:	1c43      	adds	r3, r0, #1
 800cb06:	89a3      	ldrh	r3, [r4, #12]
 800cb08:	d106      	bne.n	800cb18 <__sflush_r+0x68>
 800cb0a:	6829      	ldr	r1, [r5, #0]
 800cb0c:	291d      	cmp	r1, #29
 800cb0e:	d82b      	bhi.n	800cb68 <__sflush_r+0xb8>
 800cb10:	4a29      	ldr	r2, [pc, #164]	; (800cbb8 <__sflush_r+0x108>)
 800cb12:	410a      	asrs	r2, r1
 800cb14:	07d6      	lsls	r6, r2, #31
 800cb16:	d427      	bmi.n	800cb68 <__sflush_r+0xb8>
 800cb18:	2200      	movs	r2, #0
 800cb1a:	6062      	str	r2, [r4, #4]
 800cb1c:	04d9      	lsls	r1, r3, #19
 800cb1e:	6922      	ldr	r2, [r4, #16]
 800cb20:	6022      	str	r2, [r4, #0]
 800cb22:	d504      	bpl.n	800cb2e <__sflush_r+0x7e>
 800cb24:	1c42      	adds	r2, r0, #1
 800cb26:	d101      	bne.n	800cb2c <__sflush_r+0x7c>
 800cb28:	682b      	ldr	r3, [r5, #0]
 800cb2a:	b903      	cbnz	r3, 800cb2e <__sflush_r+0x7e>
 800cb2c:	6560      	str	r0, [r4, #84]	; 0x54
 800cb2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb30:	602f      	str	r7, [r5, #0]
 800cb32:	2900      	cmp	r1, #0
 800cb34:	d0c9      	beq.n	800caca <__sflush_r+0x1a>
 800cb36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb3a:	4299      	cmp	r1, r3
 800cb3c:	d002      	beq.n	800cb44 <__sflush_r+0x94>
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f7fe ff46 	bl	800b9d0 <_free_r>
 800cb44:	2000      	movs	r0, #0
 800cb46:	6360      	str	r0, [r4, #52]	; 0x34
 800cb48:	e7c0      	b.n	800cacc <__sflush_r+0x1c>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	47b0      	blx	r6
 800cb50:	1c41      	adds	r1, r0, #1
 800cb52:	d1c8      	bne.n	800cae6 <__sflush_r+0x36>
 800cb54:	682b      	ldr	r3, [r5, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d0c5      	beq.n	800cae6 <__sflush_r+0x36>
 800cb5a:	2b1d      	cmp	r3, #29
 800cb5c:	d001      	beq.n	800cb62 <__sflush_r+0xb2>
 800cb5e:	2b16      	cmp	r3, #22
 800cb60:	d101      	bne.n	800cb66 <__sflush_r+0xb6>
 800cb62:	602f      	str	r7, [r5, #0]
 800cb64:	e7b1      	b.n	800caca <__sflush_r+0x1a>
 800cb66:	89a3      	ldrh	r3, [r4, #12]
 800cb68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb6c:	81a3      	strh	r3, [r4, #12]
 800cb6e:	e7ad      	b.n	800cacc <__sflush_r+0x1c>
 800cb70:	690f      	ldr	r7, [r1, #16]
 800cb72:	2f00      	cmp	r7, #0
 800cb74:	d0a9      	beq.n	800caca <__sflush_r+0x1a>
 800cb76:	0793      	lsls	r3, r2, #30
 800cb78:	680e      	ldr	r6, [r1, #0]
 800cb7a:	bf08      	it	eq
 800cb7c:	694b      	ldreq	r3, [r1, #20]
 800cb7e:	600f      	str	r7, [r1, #0]
 800cb80:	bf18      	it	ne
 800cb82:	2300      	movne	r3, #0
 800cb84:	eba6 0807 	sub.w	r8, r6, r7
 800cb88:	608b      	str	r3, [r1, #8]
 800cb8a:	f1b8 0f00 	cmp.w	r8, #0
 800cb8e:	dd9c      	ble.n	800caca <__sflush_r+0x1a>
 800cb90:	6a21      	ldr	r1, [r4, #32]
 800cb92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb94:	4643      	mov	r3, r8
 800cb96:	463a      	mov	r2, r7
 800cb98:	4628      	mov	r0, r5
 800cb9a:	47b0      	blx	r6
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	dc06      	bgt.n	800cbae <__sflush_r+0xfe>
 800cba0:	89a3      	ldrh	r3, [r4, #12]
 800cba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cba6:	81a3      	strh	r3, [r4, #12]
 800cba8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbac:	e78e      	b.n	800cacc <__sflush_r+0x1c>
 800cbae:	4407      	add	r7, r0
 800cbb0:	eba8 0800 	sub.w	r8, r8, r0
 800cbb4:	e7e9      	b.n	800cb8a <__sflush_r+0xda>
 800cbb6:	bf00      	nop
 800cbb8:	dfbffffe 	.word	0xdfbffffe

0800cbbc <_fflush_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	690b      	ldr	r3, [r1, #16]
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	b913      	cbnz	r3, 800cbcc <_fflush_r+0x10>
 800cbc6:	2500      	movs	r5, #0
 800cbc8:	4628      	mov	r0, r5
 800cbca:	bd38      	pop	{r3, r4, r5, pc}
 800cbcc:	b118      	cbz	r0, 800cbd6 <_fflush_r+0x1a>
 800cbce:	6a03      	ldr	r3, [r0, #32]
 800cbd0:	b90b      	cbnz	r3, 800cbd6 <_fflush_r+0x1a>
 800cbd2:	f7fe fdcd 	bl	800b770 <__sinit>
 800cbd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d0f3      	beq.n	800cbc6 <_fflush_r+0xa>
 800cbde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbe0:	07d0      	lsls	r0, r2, #31
 800cbe2:	d404      	bmi.n	800cbee <_fflush_r+0x32>
 800cbe4:	0599      	lsls	r1, r3, #22
 800cbe6:	d402      	bmi.n	800cbee <_fflush_r+0x32>
 800cbe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbea:	f7fe fed6 	bl	800b99a <__retarget_lock_acquire_recursive>
 800cbee:	4628      	mov	r0, r5
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	f7ff ff5d 	bl	800cab0 <__sflush_r>
 800cbf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbf8:	07da      	lsls	r2, r3, #31
 800cbfa:	4605      	mov	r5, r0
 800cbfc:	d4e4      	bmi.n	800cbc8 <_fflush_r+0xc>
 800cbfe:	89a3      	ldrh	r3, [r4, #12]
 800cc00:	059b      	lsls	r3, r3, #22
 800cc02:	d4e1      	bmi.n	800cbc8 <_fflush_r+0xc>
 800cc04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc06:	f7fe fec9 	bl	800b99c <__retarget_lock_release_recursive>
 800cc0a:	e7dd      	b.n	800cbc8 <_fflush_r+0xc>

0800cc0c <__assert_func>:
 800cc0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc0e:	4614      	mov	r4, r2
 800cc10:	461a      	mov	r2, r3
 800cc12:	4b09      	ldr	r3, [pc, #36]	; (800cc38 <__assert_func+0x2c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4605      	mov	r5, r0
 800cc18:	68d8      	ldr	r0, [r3, #12]
 800cc1a:	b14c      	cbz	r4, 800cc30 <__assert_func+0x24>
 800cc1c:	4b07      	ldr	r3, [pc, #28]	; (800cc3c <__assert_func+0x30>)
 800cc1e:	9100      	str	r1, [sp, #0]
 800cc20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc24:	4906      	ldr	r1, [pc, #24]	; (800cc40 <__assert_func+0x34>)
 800cc26:	462b      	mov	r3, r5
 800cc28:	f000 f824 	bl	800cc74 <fiprintf>
 800cc2c:	f000 f834 	bl	800cc98 <abort>
 800cc30:	4b04      	ldr	r3, [pc, #16]	; (800cc44 <__assert_func+0x38>)
 800cc32:	461c      	mov	r4, r3
 800cc34:	e7f3      	b.n	800cc1e <__assert_func+0x12>
 800cc36:	bf00      	nop
 800cc38:	20000228 	.word	0x20000228
 800cc3c:	0800ea7d 	.word	0x0800ea7d
 800cc40:	0800ea8a 	.word	0x0800ea8a
 800cc44:	0800eab8 	.word	0x0800eab8

0800cc48 <_calloc_r>:
 800cc48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc4a:	fba1 2402 	umull	r2, r4, r1, r2
 800cc4e:	b94c      	cbnz	r4, 800cc64 <_calloc_r+0x1c>
 800cc50:	4611      	mov	r1, r2
 800cc52:	9201      	str	r2, [sp, #4]
 800cc54:	f7fd fe5a 	bl	800a90c <_malloc_r>
 800cc58:	9a01      	ldr	r2, [sp, #4]
 800cc5a:	4605      	mov	r5, r0
 800cc5c:	b930      	cbnz	r0, 800cc6c <_calloc_r+0x24>
 800cc5e:	4628      	mov	r0, r5
 800cc60:	b003      	add	sp, #12
 800cc62:	bd30      	pop	{r4, r5, pc}
 800cc64:	220c      	movs	r2, #12
 800cc66:	6002      	str	r2, [r0, #0]
 800cc68:	2500      	movs	r5, #0
 800cc6a:	e7f8      	b.n	800cc5e <_calloc_r+0x16>
 800cc6c:	4621      	mov	r1, r4
 800cc6e:	f7fe fdf8 	bl	800b862 <memset>
 800cc72:	e7f4      	b.n	800cc5e <_calloc_r+0x16>

0800cc74 <fiprintf>:
 800cc74:	b40e      	push	{r1, r2, r3}
 800cc76:	b503      	push	{r0, r1, lr}
 800cc78:	4601      	mov	r1, r0
 800cc7a:	ab03      	add	r3, sp, #12
 800cc7c:	4805      	ldr	r0, [pc, #20]	; (800cc94 <fiprintf+0x20>)
 800cc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc82:	6800      	ldr	r0, [r0, #0]
 800cc84:	9301      	str	r3, [sp, #4]
 800cc86:	f000 f837 	bl	800ccf8 <_vfiprintf_r>
 800cc8a:	b002      	add	sp, #8
 800cc8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc90:	b003      	add	sp, #12
 800cc92:	4770      	bx	lr
 800cc94:	20000228 	.word	0x20000228

0800cc98 <abort>:
 800cc98:	b508      	push	{r3, lr}
 800cc9a:	2006      	movs	r0, #6
 800cc9c:	f000 fb94 	bl	800d3c8 <raise>
 800cca0:	2001      	movs	r0, #1
 800cca2:	f7f8 f97f 	bl	8004fa4 <_exit>

0800cca6 <__sfputc_r>:
 800cca6:	6893      	ldr	r3, [r2, #8]
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	b410      	push	{r4}
 800ccae:	6093      	str	r3, [r2, #8]
 800ccb0:	da08      	bge.n	800ccc4 <__sfputc_r+0x1e>
 800ccb2:	6994      	ldr	r4, [r2, #24]
 800ccb4:	42a3      	cmp	r3, r4
 800ccb6:	db01      	blt.n	800ccbc <__sfputc_r+0x16>
 800ccb8:	290a      	cmp	r1, #10
 800ccba:	d103      	bne.n	800ccc4 <__sfputc_r+0x1e>
 800ccbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccc0:	f000 bac4 	b.w	800d24c <__swbuf_r>
 800ccc4:	6813      	ldr	r3, [r2, #0]
 800ccc6:	1c58      	adds	r0, r3, #1
 800ccc8:	6010      	str	r0, [r2, #0]
 800ccca:	7019      	strb	r1, [r3, #0]
 800cccc:	4608      	mov	r0, r1
 800ccce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <__sfputs_r>:
 800ccd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	460f      	mov	r7, r1
 800ccda:	4614      	mov	r4, r2
 800ccdc:	18d5      	adds	r5, r2, r3
 800ccde:	42ac      	cmp	r4, r5
 800cce0:	d101      	bne.n	800cce6 <__sfputs_r+0x12>
 800cce2:	2000      	movs	r0, #0
 800cce4:	e007      	b.n	800ccf6 <__sfputs_r+0x22>
 800cce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccea:	463a      	mov	r2, r7
 800ccec:	4630      	mov	r0, r6
 800ccee:	f7ff ffda 	bl	800cca6 <__sfputc_r>
 800ccf2:	1c43      	adds	r3, r0, #1
 800ccf4:	d1f3      	bne.n	800ccde <__sfputs_r+0xa>
 800ccf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ccf8 <_vfiprintf_r>:
 800ccf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfc:	460d      	mov	r5, r1
 800ccfe:	b09d      	sub	sp, #116	; 0x74
 800cd00:	4614      	mov	r4, r2
 800cd02:	4698      	mov	r8, r3
 800cd04:	4606      	mov	r6, r0
 800cd06:	b118      	cbz	r0, 800cd10 <_vfiprintf_r+0x18>
 800cd08:	6a03      	ldr	r3, [r0, #32]
 800cd0a:	b90b      	cbnz	r3, 800cd10 <_vfiprintf_r+0x18>
 800cd0c:	f7fe fd30 	bl	800b770 <__sinit>
 800cd10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd12:	07d9      	lsls	r1, r3, #31
 800cd14:	d405      	bmi.n	800cd22 <_vfiprintf_r+0x2a>
 800cd16:	89ab      	ldrh	r3, [r5, #12]
 800cd18:	059a      	lsls	r2, r3, #22
 800cd1a:	d402      	bmi.n	800cd22 <_vfiprintf_r+0x2a>
 800cd1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd1e:	f7fe fe3c 	bl	800b99a <__retarget_lock_acquire_recursive>
 800cd22:	89ab      	ldrh	r3, [r5, #12]
 800cd24:	071b      	lsls	r3, r3, #28
 800cd26:	d501      	bpl.n	800cd2c <_vfiprintf_r+0x34>
 800cd28:	692b      	ldr	r3, [r5, #16]
 800cd2a:	b99b      	cbnz	r3, 800cd54 <_vfiprintf_r+0x5c>
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f000 faca 	bl	800d2c8 <__swsetup_r>
 800cd34:	b170      	cbz	r0, 800cd54 <_vfiprintf_r+0x5c>
 800cd36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd38:	07dc      	lsls	r4, r3, #31
 800cd3a:	d504      	bpl.n	800cd46 <_vfiprintf_r+0x4e>
 800cd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd40:	b01d      	add	sp, #116	; 0x74
 800cd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd46:	89ab      	ldrh	r3, [r5, #12]
 800cd48:	0598      	lsls	r0, r3, #22
 800cd4a:	d4f7      	bmi.n	800cd3c <_vfiprintf_r+0x44>
 800cd4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd4e:	f7fe fe25 	bl	800b99c <__retarget_lock_release_recursive>
 800cd52:	e7f3      	b.n	800cd3c <_vfiprintf_r+0x44>
 800cd54:	2300      	movs	r3, #0
 800cd56:	9309      	str	r3, [sp, #36]	; 0x24
 800cd58:	2320      	movs	r3, #32
 800cd5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd62:	2330      	movs	r3, #48	; 0x30
 800cd64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cf18 <_vfiprintf_r+0x220>
 800cd68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd6c:	f04f 0901 	mov.w	r9, #1
 800cd70:	4623      	mov	r3, r4
 800cd72:	469a      	mov	sl, r3
 800cd74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd78:	b10a      	cbz	r2, 800cd7e <_vfiprintf_r+0x86>
 800cd7a:	2a25      	cmp	r2, #37	; 0x25
 800cd7c:	d1f9      	bne.n	800cd72 <_vfiprintf_r+0x7a>
 800cd7e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd82:	d00b      	beq.n	800cd9c <_vfiprintf_r+0xa4>
 800cd84:	465b      	mov	r3, fp
 800cd86:	4622      	mov	r2, r4
 800cd88:	4629      	mov	r1, r5
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	f7ff ffa2 	bl	800ccd4 <__sfputs_r>
 800cd90:	3001      	adds	r0, #1
 800cd92:	f000 80a9 	beq.w	800cee8 <_vfiprintf_r+0x1f0>
 800cd96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd98:	445a      	add	r2, fp
 800cd9a:	9209      	str	r2, [sp, #36]	; 0x24
 800cd9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f000 80a1 	beq.w	800cee8 <_vfiprintf_r+0x1f0>
 800cda6:	2300      	movs	r3, #0
 800cda8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdb0:	f10a 0a01 	add.w	sl, sl, #1
 800cdb4:	9304      	str	r3, [sp, #16]
 800cdb6:	9307      	str	r3, [sp, #28]
 800cdb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdbc:	931a      	str	r3, [sp, #104]	; 0x68
 800cdbe:	4654      	mov	r4, sl
 800cdc0:	2205      	movs	r2, #5
 800cdc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc6:	4854      	ldr	r0, [pc, #336]	; (800cf18 <_vfiprintf_r+0x220>)
 800cdc8:	f7f3 fa22 	bl	8000210 <memchr>
 800cdcc:	9a04      	ldr	r2, [sp, #16]
 800cdce:	b9d8      	cbnz	r0, 800ce08 <_vfiprintf_r+0x110>
 800cdd0:	06d1      	lsls	r1, r2, #27
 800cdd2:	bf44      	itt	mi
 800cdd4:	2320      	movmi	r3, #32
 800cdd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdda:	0713      	lsls	r3, r2, #28
 800cddc:	bf44      	itt	mi
 800cdde:	232b      	movmi	r3, #43	; 0x2b
 800cde0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cde4:	f89a 3000 	ldrb.w	r3, [sl]
 800cde8:	2b2a      	cmp	r3, #42	; 0x2a
 800cdea:	d015      	beq.n	800ce18 <_vfiprintf_r+0x120>
 800cdec:	9a07      	ldr	r2, [sp, #28]
 800cdee:	4654      	mov	r4, sl
 800cdf0:	2000      	movs	r0, #0
 800cdf2:	f04f 0c0a 	mov.w	ip, #10
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdfc:	3b30      	subs	r3, #48	; 0x30
 800cdfe:	2b09      	cmp	r3, #9
 800ce00:	d94d      	bls.n	800ce9e <_vfiprintf_r+0x1a6>
 800ce02:	b1b0      	cbz	r0, 800ce32 <_vfiprintf_r+0x13a>
 800ce04:	9207      	str	r2, [sp, #28]
 800ce06:	e014      	b.n	800ce32 <_vfiprintf_r+0x13a>
 800ce08:	eba0 0308 	sub.w	r3, r0, r8
 800ce0c:	fa09 f303 	lsl.w	r3, r9, r3
 800ce10:	4313      	orrs	r3, r2
 800ce12:	9304      	str	r3, [sp, #16]
 800ce14:	46a2      	mov	sl, r4
 800ce16:	e7d2      	b.n	800cdbe <_vfiprintf_r+0xc6>
 800ce18:	9b03      	ldr	r3, [sp, #12]
 800ce1a:	1d19      	adds	r1, r3, #4
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	9103      	str	r1, [sp, #12]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	bfbb      	ittet	lt
 800ce24:	425b      	neglt	r3, r3
 800ce26:	f042 0202 	orrlt.w	r2, r2, #2
 800ce2a:	9307      	strge	r3, [sp, #28]
 800ce2c:	9307      	strlt	r3, [sp, #28]
 800ce2e:	bfb8      	it	lt
 800ce30:	9204      	strlt	r2, [sp, #16]
 800ce32:	7823      	ldrb	r3, [r4, #0]
 800ce34:	2b2e      	cmp	r3, #46	; 0x2e
 800ce36:	d10c      	bne.n	800ce52 <_vfiprintf_r+0x15a>
 800ce38:	7863      	ldrb	r3, [r4, #1]
 800ce3a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce3c:	d134      	bne.n	800cea8 <_vfiprintf_r+0x1b0>
 800ce3e:	9b03      	ldr	r3, [sp, #12]
 800ce40:	1d1a      	adds	r2, r3, #4
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	9203      	str	r2, [sp, #12]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	bfb8      	it	lt
 800ce4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce4e:	3402      	adds	r4, #2
 800ce50:	9305      	str	r3, [sp, #20]
 800ce52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cf28 <_vfiprintf_r+0x230>
 800ce56:	7821      	ldrb	r1, [r4, #0]
 800ce58:	2203      	movs	r2, #3
 800ce5a:	4650      	mov	r0, sl
 800ce5c:	f7f3 f9d8 	bl	8000210 <memchr>
 800ce60:	b138      	cbz	r0, 800ce72 <_vfiprintf_r+0x17a>
 800ce62:	9b04      	ldr	r3, [sp, #16]
 800ce64:	eba0 000a 	sub.w	r0, r0, sl
 800ce68:	2240      	movs	r2, #64	; 0x40
 800ce6a:	4082      	lsls	r2, r0
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	3401      	adds	r4, #1
 800ce70:	9304      	str	r3, [sp, #16]
 800ce72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce76:	4829      	ldr	r0, [pc, #164]	; (800cf1c <_vfiprintf_r+0x224>)
 800ce78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce7c:	2206      	movs	r2, #6
 800ce7e:	f7f3 f9c7 	bl	8000210 <memchr>
 800ce82:	2800      	cmp	r0, #0
 800ce84:	d03f      	beq.n	800cf06 <_vfiprintf_r+0x20e>
 800ce86:	4b26      	ldr	r3, [pc, #152]	; (800cf20 <_vfiprintf_r+0x228>)
 800ce88:	bb1b      	cbnz	r3, 800ced2 <_vfiprintf_r+0x1da>
 800ce8a:	9b03      	ldr	r3, [sp, #12]
 800ce8c:	3307      	adds	r3, #7
 800ce8e:	f023 0307 	bic.w	r3, r3, #7
 800ce92:	3308      	adds	r3, #8
 800ce94:	9303      	str	r3, [sp, #12]
 800ce96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce98:	443b      	add	r3, r7
 800ce9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce9c:	e768      	b.n	800cd70 <_vfiprintf_r+0x78>
 800ce9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cea2:	460c      	mov	r4, r1
 800cea4:	2001      	movs	r0, #1
 800cea6:	e7a6      	b.n	800cdf6 <_vfiprintf_r+0xfe>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	3401      	adds	r4, #1
 800ceac:	9305      	str	r3, [sp, #20]
 800ceae:	4619      	mov	r1, r3
 800ceb0:	f04f 0c0a 	mov.w	ip, #10
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceba:	3a30      	subs	r2, #48	; 0x30
 800cebc:	2a09      	cmp	r2, #9
 800cebe:	d903      	bls.n	800cec8 <_vfiprintf_r+0x1d0>
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d0c6      	beq.n	800ce52 <_vfiprintf_r+0x15a>
 800cec4:	9105      	str	r1, [sp, #20]
 800cec6:	e7c4      	b.n	800ce52 <_vfiprintf_r+0x15a>
 800cec8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cecc:	4604      	mov	r4, r0
 800cece:	2301      	movs	r3, #1
 800ced0:	e7f0      	b.n	800ceb4 <_vfiprintf_r+0x1bc>
 800ced2:	ab03      	add	r3, sp, #12
 800ced4:	9300      	str	r3, [sp, #0]
 800ced6:	462a      	mov	r2, r5
 800ced8:	4b12      	ldr	r3, [pc, #72]	; (800cf24 <_vfiprintf_r+0x22c>)
 800ceda:	a904      	add	r1, sp, #16
 800cedc:	4630      	mov	r0, r6
 800cede:	f3af 8000 	nop.w
 800cee2:	4607      	mov	r7, r0
 800cee4:	1c78      	adds	r0, r7, #1
 800cee6:	d1d6      	bne.n	800ce96 <_vfiprintf_r+0x19e>
 800cee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ceea:	07d9      	lsls	r1, r3, #31
 800ceec:	d405      	bmi.n	800cefa <_vfiprintf_r+0x202>
 800ceee:	89ab      	ldrh	r3, [r5, #12]
 800cef0:	059a      	lsls	r2, r3, #22
 800cef2:	d402      	bmi.n	800cefa <_vfiprintf_r+0x202>
 800cef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cef6:	f7fe fd51 	bl	800b99c <__retarget_lock_release_recursive>
 800cefa:	89ab      	ldrh	r3, [r5, #12]
 800cefc:	065b      	lsls	r3, r3, #25
 800cefe:	f53f af1d 	bmi.w	800cd3c <_vfiprintf_r+0x44>
 800cf02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf04:	e71c      	b.n	800cd40 <_vfiprintf_r+0x48>
 800cf06:	ab03      	add	r3, sp, #12
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	462a      	mov	r2, r5
 800cf0c:	4b05      	ldr	r3, [pc, #20]	; (800cf24 <_vfiprintf_r+0x22c>)
 800cf0e:	a904      	add	r1, sp, #16
 800cf10:	4630      	mov	r0, r6
 800cf12:	f000 f879 	bl	800d008 <_printf_i>
 800cf16:	e7e4      	b.n	800cee2 <_vfiprintf_r+0x1ea>
 800cf18:	0800eab9 	.word	0x0800eab9
 800cf1c:	0800eac3 	.word	0x0800eac3
 800cf20:	00000000 	.word	0x00000000
 800cf24:	0800ccd5 	.word	0x0800ccd5
 800cf28:	0800eabf 	.word	0x0800eabf

0800cf2c <_printf_common>:
 800cf2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf30:	4616      	mov	r6, r2
 800cf32:	4699      	mov	r9, r3
 800cf34:	688a      	ldr	r2, [r1, #8]
 800cf36:	690b      	ldr	r3, [r1, #16]
 800cf38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	bfb8      	it	lt
 800cf40:	4613      	movlt	r3, r2
 800cf42:	6033      	str	r3, [r6, #0]
 800cf44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf48:	4607      	mov	r7, r0
 800cf4a:	460c      	mov	r4, r1
 800cf4c:	b10a      	cbz	r2, 800cf52 <_printf_common+0x26>
 800cf4e:	3301      	adds	r3, #1
 800cf50:	6033      	str	r3, [r6, #0]
 800cf52:	6823      	ldr	r3, [r4, #0]
 800cf54:	0699      	lsls	r1, r3, #26
 800cf56:	bf42      	ittt	mi
 800cf58:	6833      	ldrmi	r3, [r6, #0]
 800cf5a:	3302      	addmi	r3, #2
 800cf5c:	6033      	strmi	r3, [r6, #0]
 800cf5e:	6825      	ldr	r5, [r4, #0]
 800cf60:	f015 0506 	ands.w	r5, r5, #6
 800cf64:	d106      	bne.n	800cf74 <_printf_common+0x48>
 800cf66:	f104 0a19 	add.w	sl, r4, #25
 800cf6a:	68e3      	ldr	r3, [r4, #12]
 800cf6c:	6832      	ldr	r2, [r6, #0]
 800cf6e:	1a9b      	subs	r3, r3, r2
 800cf70:	42ab      	cmp	r3, r5
 800cf72:	dc26      	bgt.n	800cfc2 <_printf_common+0x96>
 800cf74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf78:	1e13      	subs	r3, r2, #0
 800cf7a:	6822      	ldr	r2, [r4, #0]
 800cf7c:	bf18      	it	ne
 800cf7e:	2301      	movne	r3, #1
 800cf80:	0692      	lsls	r2, r2, #26
 800cf82:	d42b      	bmi.n	800cfdc <_printf_common+0xb0>
 800cf84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf88:	4649      	mov	r1, r9
 800cf8a:	4638      	mov	r0, r7
 800cf8c:	47c0      	blx	r8
 800cf8e:	3001      	adds	r0, #1
 800cf90:	d01e      	beq.n	800cfd0 <_printf_common+0xa4>
 800cf92:	6823      	ldr	r3, [r4, #0]
 800cf94:	6922      	ldr	r2, [r4, #16]
 800cf96:	f003 0306 	and.w	r3, r3, #6
 800cf9a:	2b04      	cmp	r3, #4
 800cf9c:	bf02      	ittt	eq
 800cf9e:	68e5      	ldreq	r5, [r4, #12]
 800cfa0:	6833      	ldreq	r3, [r6, #0]
 800cfa2:	1aed      	subeq	r5, r5, r3
 800cfa4:	68a3      	ldr	r3, [r4, #8]
 800cfa6:	bf0c      	ite	eq
 800cfa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfac:	2500      	movne	r5, #0
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	bfc4      	itt	gt
 800cfb2:	1a9b      	subgt	r3, r3, r2
 800cfb4:	18ed      	addgt	r5, r5, r3
 800cfb6:	2600      	movs	r6, #0
 800cfb8:	341a      	adds	r4, #26
 800cfba:	42b5      	cmp	r5, r6
 800cfbc:	d11a      	bne.n	800cff4 <_printf_common+0xc8>
 800cfbe:	2000      	movs	r0, #0
 800cfc0:	e008      	b.n	800cfd4 <_printf_common+0xa8>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	4652      	mov	r2, sl
 800cfc6:	4649      	mov	r1, r9
 800cfc8:	4638      	mov	r0, r7
 800cfca:	47c0      	blx	r8
 800cfcc:	3001      	adds	r0, #1
 800cfce:	d103      	bne.n	800cfd8 <_printf_common+0xac>
 800cfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd8:	3501      	adds	r5, #1
 800cfda:	e7c6      	b.n	800cf6a <_printf_common+0x3e>
 800cfdc:	18e1      	adds	r1, r4, r3
 800cfde:	1c5a      	adds	r2, r3, #1
 800cfe0:	2030      	movs	r0, #48	; 0x30
 800cfe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfe6:	4422      	add	r2, r4
 800cfe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cff0:	3302      	adds	r3, #2
 800cff2:	e7c7      	b.n	800cf84 <_printf_common+0x58>
 800cff4:	2301      	movs	r3, #1
 800cff6:	4622      	mov	r2, r4
 800cff8:	4649      	mov	r1, r9
 800cffa:	4638      	mov	r0, r7
 800cffc:	47c0      	blx	r8
 800cffe:	3001      	adds	r0, #1
 800d000:	d0e6      	beq.n	800cfd0 <_printf_common+0xa4>
 800d002:	3601      	adds	r6, #1
 800d004:	e7d9      	b.n	800cfba <_printf_common+0x8e>
	...

0800d008 <_printf_i>:
 800d008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d00c:	7e0f      	ldrb	r7, [r1, #24]
 800d00e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d010:	2f78      	cmp	r7, #120	; 0x78
 800d012:	4691      	mov	r9, r2
 800d014:	4680      	mov	r8, r0
 800d016:	460c      	mov	r4, r1
 800d018:	469a      	mov	sl, r3
 800d01a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d01e:	d807      	bhi.n	800d030 <_printf_i+0x28>
 800d020:	2f62      	cmp	r7, #98	; 0x62
 800d022:	d80a      	bhi.n	800d03a <_printf_i+0x32>
 800d024:	2f00      	cmp	r7, #0
 800d026:	f000 80d4 	beq.w	800d1d2 <_printf_i+0x1ca>
 800d02a:	2f58      	cmp	r7, #88	; 0x58
 800d02c:	f000 80c0 	beq.w	800d1b0 <_printf_i+0x1a8>
 800d030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d038:	e03a      	b.n	800d0b0 <_printf_i+0xa8>
 800d03a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d03e:	2b15      	cmp	r3, #21
 800d040:	d8f6      	bhi.n	800d030 <_printf_i+0x28>
 800d042:	a101      	add	r1, pc, #4	; (adr r1, 800d048 <_printf_i+0x40>)
 800d044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d048:	0800d0a1 	.word	0x0800d0a1
 800d04c:	0800d0b5 	.word	0x0800d0b5
 800d050:	0800d031 	.word	0x0800d031
 800d054:	0800d031 	.word	0x0800d031
 800d058:	0800d031 	.word	0x0800d031
 800d05c:	0800d031 	.word	0x0800d031
 800d060:	0800d0b5 	.word	0x0800d0b5
 800d064:	0800d031 	.word	0x0800d031
 800d068:	0800d031 	.word	0x0800d031
 800d06c:	0800d031 	.word	0x0800d031
 800d070:	0800d031 	.word	0x0800d031
 800d074:	0800d1b9 	.word	0x0800d1b9
 800d078:	0800d0e1 	.word	0x0800d0e1
 800d07c:	0800d173 	.word	0x0800d173
 800d080:	0800d031 	.word	0x0800d031
 800d084:	0800d031 	.word	0x0800d031
 800d088:	0800d1db 	.word	0x0800d1db
 800d08c:	0800d031 	.word	0x0800d031
 800d090:	0800d0e1 	.word	0x0800d0e1
 800d094:	0800d031 	.word	0x0800d031
 800d098:	0800d031 	.word	0x0800d031
 800d09c:	0800d17b 	.word	0x0800d17b
 800d0a0:	682b      	ldr	r3, [r5, #0]
 800d0a2:	1d1a      	adds	r2, r3, #4
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	602a      	str	r2, [r5, #0]
 800d0a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e09f      	b.n	800d1f4 <_printf_i+0x1ec>
 800d0b4:	6820      	ldr	r0, [r4, #0]
 800d0b6:	682b      	ldr	r3, [r5, #0]
 800d0b8:	0607      	lsls	r7, r0, #24
 800d0ba:	f103 0104 	add.w	r1, r3, #4
 800d0be:	6029      	str	r1, [r5, #0]
 800d0c0:	d501      	bpl.n	800d0c6 <_printf_i+0xbe>
 800d0c2:	681e      	ldr	r6, [r3, #0]
 800d0c4:	e003      	b.n	800d0ce <_printf_i+0xc6>
 800d0c6:	0646      	lsls	r6, r0, #25
 800d0c8:	d5fb      	bpl.n	800d0c2 <_printf_i+0xba>
 800d0ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d0ce:	2e00      	cmp	r6, #0
 800d0d0:	da03      	bge.n	800d0da <_printf_i+0xd2>
 800d0d2:	232d      	movs	r3, #45	; 0x2d
 800d0d4:	4276      	negs	r6, r6
 800d0d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0da:	485a      	ldr	r0, [pc, #360]	; (800d244 <_printf_i+0x23c>)
 800d0dc:	230a      	movs	r3, #10
 800d0de:	e012      	b.n	800d106 <_printf_i+0xfe>
 800d0e0:	682b      	ldr	r3, [r5, #0]
 800d0e2:	6820      	ldr	r0, [r4, #0]
 800d0e4:	1d19      	adds	r1, r3, #4
 800d0e6:	6029      	str	r1, [r5, #0]
 800d0e8:	0605      	lsls	r5, r0, #24
 800d0ea:	d501      	bpl.n	800d0f0 <_printf_i+0xe8>
 800d0ec:	681e      	ldr	r6, [r3, #0]
 800d0ee:	e002      	b.n	800d0f6 <_printf_i+0xee>
 800d0f0:	0641      	lsls	r1, r0, #25
 800d0f2:	d5fb      	bpl.n	800d0ec <_printf_i+0xe4>
 800d0f4:	881e      	ldrh	r6, [r3, #0]
 800d0f6:	4853      	ldr	r0, [pc, #332]	; (800d244 <_printf_i+0x23c>)
 800d0f8:	2f6f      	cmp	r7, #111	; 0x6f
 800d0fa:	bf0c      	ite	eq
 800d0fc:	2308      	moveq	r3, #8
 800d0fe:	230a      	movne	r3, #10
 800d100:	2100      	movs	r1, #0
 800d102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d106:	6865      	ldr	r5, [r4, #4]
 800d108:	60a5      	str	r5, [r4, #8]
 800d10a:	2d00      	cmp	r5, #0
 800d10c:	bfa2      	ittt	ge
 800d10e:	6821      	ldrge	r1, [r4, #0]
 800d110:	f021 0104 	bicge.w	r1, r1, #4
 800d114:	6021      	strge	r1, [r4, #0]
 800d116:	b90e      	cbnz	r6, 800d11c <_printf_i+0x114>
 800d118:	2d00      	cmp	r5, #0
 800d11a:	d04b      	beq.n	800d1b4 <_printf_i+0x1ac>
 800d11c:	4615      	mov	r5, r2
 800d11e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d122:	fb03 6711 	mls	r7, r3, r1, r6
 800d126:	5dc7      	ldrb	r7, [r0, r7]
 800d128:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d12c:	4637      	mov	r7, r6
 800d12e:	42bb      	cmp	r3, r7
 800d130:	460e      	mov	r6, r1
 800d132:	d9f4      	bls.n	800d11e <_printf_i+0x116>
 800d134:	2b08      	cmp	r3, #8
 800d136:	d10b      	bne.n	800d150 <_printf_i+0x148>
 800d138:	6823      	ldr	r3, [r4, #0]
 800d13a:	07de      	lsls	r6, r3, #31
 800d13c:	d508      	bpl.n	800d150 <_printf_i+0x148>
 800d13e:	6923      	ldr	r3, [r4, #16]
 800d140:	6861      	ldr	r1, [r4, #4]
 800d142:	4299      	cmp	r1, r3
 800d144:	bfde      	ittt	le
 800d146:	2330      	movle	r3, #48	; 0x30
 800d148:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d14c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d150:	1b52      	subs	r2, r2, r5
 800d152:	6122      	str	r2, [r4, #16]
 800d154:	f8cd a000 	str.w	sl, [sp]
 800d158:	464b      	mov	r3, r9
 800d15a:	aa03      	add	r2, sp, #12
 800d15c:	4621      	mov	r1, r4
 800d15e:	4640      	mov	r0, r8
 800d160:	f7ff fee4 	bl	800cf2c <_printf_common>
 800d164:	3001      	adds	r0, #1
 800d166:	d14a      	bne.n	800d1fe <_printf_i+0x1f6>
 800d168:	f04f 30ff 	mov.w	r0, #4294967295
 800d16c:	b004      	add	sp, #16
 800d16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d172:	6823      	ldr	r3, [r4, #0]
 800d174:	f043 0320 	orr.w	r3, r3, #32
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	4833      	ldr	r0, [pc, #204]	; (800d248 <_printf_i+0x240>)
 800d17c:	2778      	movs	r7, #120	; 0x78
 800d17e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d182:	6823      	ldr	r3, [r4, #0]
 800d184:	6829      	ldr	r1, [r5, #0]
 800d186:	061f      	lsls	r7, r3, #24
 800d188:	f851 6b04 	ldr.w	r6, [r1], #4
 800d18c:	d402      	bmi.n	800d194 <_printf_i+0x18c>
 800d18e:	065f      	lsls	r7, r3, #25
 800d190:	bf48      	it	mi
 800d192:	b2b6      	uxthmi	r6, r6
 800d194:	07df      	lsls	r7, r3, #31
 800d196:	bf48      	it	mi
 800d198:	f043 0320 	orrmi.w	r3, r3, #32
 800d19c:	6029      	str	r1, [r5, #0]
 800d19e:	bf48      	it	mi
 800d1a0:	6023      	strmi	r3, [r4, #0]
 800d1a2:	b91e      	cbnz	r6, 800d1ac <_printf_i+0x1a4>
 800d1a4:	6823      	ldr	r3, [r4, #0]
 800d1a6:	f023 0320 	bic.w	r3, r3, #32
 800d1aa:	6023      	str	r3, [r4, #0]
 800d1ac:	2310      	movs	r3, #16
 800d1ae:	e7a7      	b.n	800d100 <_printf_i+0xf8>
 800d1b0:	4824      	ldr	r0, [pc, #144]	; (800d244 <_printf_i+0x23c>)
 800d1b2:	e7e4      	b.n	800d17e <_printf_i+0x176>
 800d1b4:	4615      	mov	r5, r2
 800d1b6:	e7bd      	b.n	800d134 <_printf_i+0x12c>
 800d1b8:	682b      	ldr	r3, [r5, #0]
 800d1ba:	6826      	ldr	r6, [r4, #0]
 800d1bc:	6961      	ldr	r1, [r4, #20]
 800d1be:	1d18      	adds	r0, r3, #4
 800d1c0:	6028      	str	r0, [r5, #0]
 800d1c2:	0635      	lsls	r5, r6, #24
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	d501      	bpl.n	800d1cc <_printf_i+0x1c4>
 800d1c8:	6019      	str	r1, [r3, #0]
 800d1ca:	e002      	b.n	800d1d2 <_printf_i+0x1ca>
 800d1cc:	0670      	lsls	r0, r6, #25
 800d1ce:	d5fb      	bpl.n	800d1c8 <_printf_i+0x1c0>
 800d1d0:	8019      	strh	r1, [r3, #0]
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	6123      	str	r3, [r4, #16]
 800d1d6:	4615      	mov	r5, r2
 800d1d8:	e7bc      	b.n	800d154 <_printf_i+0x14c>
 800d1da:	682b      	ldr	r3, [r5, #0]
 800d1dc:	1d1a      	adds	r2, r3, #4
 800d1de:	602a      	str	r2, [r5, #0]
 800d1e0:	681d      	ldr	r5, [r3, #0]
 800d1e2:	6862      	ldr	r2, [r4, #4]
 800d1e4:	2100      	movs	r1, #0
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	f7f3 f812 	bl	8000210 <memchr>
 800d1ec:	b108      	cbz	r0, 800d1f2 <_printf_i+0x1ea>
 800d1ee:	1b40      	subs	r0, r0, r5
 800d1f0:	6060      	str	r0, [r4, #4]
 800d1f2:	6863      	ldr	r3, [r4, #4]
 800d1f4:	6123      	str	r3, [r4, #16]
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1fc:	e7aa      	b.n	800d154 <_printf_i+0x14c>
 800d1fe:	6923      	ldr	r3, [r4, #16]
 800d200:	462a      	mov	r2, r5
 800d202:	4649      	mov	r1, r9
 800d204:	4640      	mov	r0, r8
 800d206:	47d0      	blx	sl
 800d208:	3001      	adds	r0, #1
 800d20a:	d0ad      	beq.n	800d168 <_printf_i+0x160>
 800d20c:	6823      	ldr	r3, [r4, #0]
 800d20e:	079b      	lsls	r3, r3, #30
 800d210:	d413      	bmi.n	800d23a <_printf_i+0x232>
 800d212:	68e0      	ldr	r0, [r4, #12]
 800d214:	9b03      	ldr	r3, [sp, #12]
 800d216:	4298      	cmp	r0, r3
 800d218:	bfb8      	it	lt
 800d21a:	4618      	movlt	r0, r3
 800d21c:	e7a6      	b.n	800d16c <_printf_i+0x164>
 800d21e:	2301      	movs	r3, #1
 800d220:	4632      	mov	r2, r6
 800d222:	4649      	mov	r1, r9
 800d224:	4640      	mov	r0, r8
 800d226:	47d0      	blx	sl
 800d228:	3001      	adds	r0, #1
 800d22a:	d09d      	beq.n	800d168 <_printf_i+0x160>
 800d22c:	3501      	adds	r5, #1
 800d22e:	68e3      	ldr	r3, [r4, #12]
 800d230:	9903      	ldr	r1, [sp, #12]
 800d232:	1a5b      	subs	r3, r3, r1
 800d234:	42ab      	cmp	r3, r5
 800d236:	dcf2      	bgt.n	800d21e <_printf_i+0x216>
 800d238:	e7eb      	b.n	800d212 <_printf_i+0x20a>
 800d23a:	2500      	movs	r5, #0
 800d23c:	f104 0619 	add.w	r6, r4, #25
 800d240:	e7f5      	b.n	800d22e <_printf_i+0x226>
 800d242:	bf00      	nop
 800d244:	0800eaca 	.word	0x0800eaca
 800d248:	0800eadb 	.word	0x0800eadb

0800d24c <__swbuf_r>:
 800d24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24e:	460e      	mov	r6, r1
 800d250:	4614      	mov	r4, r2
 800d252:	4605      	mov	r5, r0
 800d254:	b118      	cbz	r0, 800d25e <__swbuf_r+0x12>
 800d256:	6a03      	ldr	r3, [r0, #32]
 800d258:	b90b      	cbnz	r3, 800d25e <__swbuf_r+0x12>
 800d25a:	f7fe fa89 	bl	800b770 <__sinit>
 800d25e:	69a3      	ldr	r3, [r4, #24]
 800d260:	60a3      	str	r3, [r4, #8]
 800d262:	89a3      	ldrh	r3, [r4, #12]
 800d264:	071a      	lsls	r2, r3, #28
 800d266:	d525      	bpl.n	800d2b4 <__swbuf_r+0x68>
 800d268:	6923      	ldr	r3, [r4, #16]
 800d26a:	b31b      	cbz	r3, 800d2b4 <__swbuf_r+0x68>
 800d26c:	6823      	ldr	r3, [r4, #0]
 800d26e:	6922      	ldr	r2, [r4, #16]
 800d270:	1a98      	subs	r0, r3, r2
 800d272:	6963      	ldr	r3, [r4, #20]
 800d274:	b2f6      	uxtb	r6, r6
 800d276:	4283      	cmp	r3, r0
 800d278:	4637      	mov	r7, r6
 800d27a:	dc04      	bgt.n	800d286 <__swbuf_r+0x3a>
 800d27c:	4621      	mov	r1, r4
 800d27e:	4628      	mov	r0, r5
 800d280:	f7ff fc9c 	bl	800cbbc <_fflush_r>
 800d284:	b9e0      	cbnz	r0, 800d2c0 <__swbuf_r+0x74>
 800d286:	68a3      	ldr	r3, [r4, #8]
 800d288:	3b01      	subs	r3, #1
 800d28a:	60a3      	str	r3, [r4, #8]
 800d28c:	6823      	ldr	r3, [r4, #0]
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	6022      	str	r2, [r4, #0]
 800d292:	701e      	strb	r6, [r3, #0]
 800d294:	6962      	ldr	r2, [r4, #20]
 800d296:	1c43      	adds	r3, r0, #1
 800d298:	429a      	cmp	r2, r3
 800d29a:	d004      	beq.n	800d2a6 <__swbuf_r+0x5a>
 800d29c:	89a3      	ldrh	r3, [r4, #12]
 800d29e:	07db      	lsls	r3, r3, #31
 800d2a0:	d506      	bpl.n	800d2b0 <__swbuf_r+0x64>
 800d2a2:	2e0a      	cmp	r6, #10
 800d2a4:	d104      	bne.n	800d2b0 <__swbuf_r+0x64>
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	f7ff fc87 	bl	800cbbc <_fflush_r>
 800d2ae:	b938      	cbnz	r0, 800d2c0 <__swbuf_r+0x74>
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	f000 f806 	bl	800d2c8 <__swsetup_r>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d0d5      	beq.n	800d26c <__swbuf_r+0x20>
 800d2c0:	f04f 37ff 	mov.w	r7, #4294967295
 800d2c4:	e7f4      	b.n	800d2b0 <__swbuf_r+0x64>
	...

0800d2c8 <__swsetup_r>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	4b2a      	ldr	r3, [pc, #168]	; (800d374 <__swsetup_r+0xac>)
 800d2cc:	4605      	mov	r5, r0
 800d2ce:	6818      	ldr	r0, [r3, #0]
 800d2d0:	460c      	mov	r4, r1
 800d2d2:	b118      	cbz	r0, 800d2dc <__swsetup_r+0x14>
 800d2d4:	6a03      	ldr	r3, [r0, #32]
 800d2d6:	b90b      	cbnz	r3, 800d2dc <__swsetup_r+0x14>
 800d2d8:	f7fe fa4a 	bl	800b770 <__sinit>
 800d2dc:	89a3      	ldrh	r3, [r4, #12]
 800d2de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2e2:	0718      	lsls	r0, r3, #28
 800d2e4:	d422      	bmi.n	800d32c <__swsetup_r+0x64>
 800d2e6:	06d9      	lsls	r1, r3, #27
 800d2e8:	d407      	bmi.n	800d2fa <__swsetup_r+0x32>
 800d2ea:	2309      	movs	r3, #9
 800d2ec:	602b      	str	r3, [r5, #0]
 800d2ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2f2:	81a3      	strh	r3, [r4, #12]
 800d2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f8:	e034      	b.n	800d364 <__swsetup_r+0x9c>
 800d2fa:	0758      	lsls	r0, r3, #29
 800d2fc:	d512      	bpl.n	800d324 <__swsetup_r+0x5c>
 800d2fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d300:	b141      	cbz	r1, 800d314 <__swsetup_r+0x4c>
 800d302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d306:	4299      	cmp	r1, r3
 800d308:	d002      	beq.n	800d310 <__swsetup_r+0x48>
 800d30a:	4628      	mov	r0, r5
 800d30c:	f7fe fb60 	bl	800b9d0 <_free_r>
 800d310:	2300      	movs	r3, #0
 800d312:	6363      	str	r3, [r4, #52]	; 0x34
 800d314:	89a3      	ldrh	r3, [r4, #12]
 800d316:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d31a:	81a3      	strh	r3, [r4, #12]
 800d31c:	2300      	movs	r3, #0
 800d31e:	6063      	str	r3, [r4, #4]
 800d320:	6923      	ldr	r3, [r4, #16]
 800d322:	6023      	str	r3, [r4, #0]
 800d324:	89a3      	ldrh	r3, [r4, #12]
 800d326:	f043 0308 	orr.w	r3, r3, #8
 800d32a:	81a3      	strh	r3, [r4, #12]
 800d32c:	6923      	ldr	r3, [r4, #16]
 800d32e:	b94b      	cbnz	r3, 800d344 <__swsetup_r+0x7c>
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d33a:	d003      	beq.n	800d344 <__swsetup_r+0x7c>
 800d33c:	4621      	mov	r1, r4
 800d33e:	4628      	mov	r0, r5
 800d340:	f000 f884 	bl	800d44c <__smakebuf_r>
 800d344:	89a0      	ldrh	r0, [r4, #12]
 800d346:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d34a:	f010 0301 	ands.w	r3, r0, #1
 800d34e:	d00a      	beq.n	800d366 <__swsetup_r+0x9e>
 800d350:	2300      	movs	r3, #0
 800d352:	60a3      	str	r3, [r4, #8]
 800d354:	6963      	ldr	r3, [r4, #20]
 800d356:	425b      	negs	r3, r3
 800d358:	61a3      	str	r3, [r4, #24]
 800d35a:	6923      	ldr	r3, [r4, #16]
 800d35c:	b943      	cbnz	r3, 800d370 <__swsetup_r+0xa8>
 800d35e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d362:	d1c4      	bne.n	800d2ee <__swsetup_r+0x26>
 800d364:	bd38      	pop	{r3, r4, r5, pc}
 800d366:	0781      	lsls	r1, r0, #30
 800d368:	bf58      	it	pl
 800d36a:	6963      	ldrpl	r3, [r4, #20]
 800d36c:	60a3      	str	r3, [r4, #8]
 800d36e:	e7f4      	b.n	800d35a <__swsetup_r+0x92>
 800d370:	2000      	movs	r0, #0
 800d372:	e7f7      	b.n	800d364 <__swsetup_r+0x9c>
 800d374:	20000228 	.word	0x20000228

0800d378 <_raise_r>:
 800d378:	291f      	cmp	r1, #31
 800d37a:	b538      	push	{r3, r4, r5, lr}
 800d37c:	4604      	mov	r4, r0
 800d37e:	460d      	mov	r5, r1
 800d380:	d904      	bls.n	800d38c <_raise_r+0x14>
 800d382:	2316      	movs	r3, #22
 800d384:	6003      	str	r3, [r0, #0]
 800d386:	f04f 30ff 	mov.w	r0, #4294967295
 800d38a:	bd38      	pop	{r3, r4, r5, pc}
 800d38c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d38e:	b112      	cbz	r2, 800d396 <_raise_r+0x1e>
 800d390:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d394:	b94b      	cbnz	r3, 800d3aa <_raise_r+0x32>
 800d396:	4620      	mov	r0, r4
 800d398:	f000 f830 	bl	800d3fc <_getpid_r>
 800d39c:	462a      	mov	r2, r5
 800d39e:	4601      	mov	r1, r0
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3a6:	f000 b817 	b.w	800d3d8 <_kill_r>
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d00a      	beq.n	800d3c4 <_raise_r+0x4c>
 800d3ae:	1c59      	adds	r1, r3, #1
 800d3b0:	d103      	bne.n	800d3ba <_raise_r+0x42>
 800d3b2:	2316      	movs	r3, #22
 800d3b4:	6003      	str	r3, [r0, #0]
 800d3b6:	2001      	movs	r0, #1
 800d3b8:	e7e7      	b.n	800d38a <_raise_r+0x12>
 800d3ba:	2400      	movs	r4, #0
 800d3bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	4798      	blx	r3
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	e7e0      	b.n	800d38a <_raise_r+0x12>

0800d3c8 <raise>:
 800d3c8:	4b02      	ldr	r3, [pc, #8]	; (800d3d4 <raise+0xc>)
 800d3ca:	4601      	mov	r1, r0
 800d3cc:	6818      	ldr	r0, [r3, #0]
 800d3ce:	f7ff bfd3 	b.w	800d378 <_raise_r>
 800d3d2:	bf00      	nop
 800d3d4:	20000228 	.word	0x20000228

0800d3d8 <_kill_r>:
 800d3d8:	b538      	push	{r3, r4, r5, lr}
 800d3da:	4d07      	ldr	r5, [pc, #28]	; (800d3f8 <_kill_r+0x20>)
 800d3dc:	2300      	movs	r3, #0
 800d3de:	4604      	mov	r4, r0
 800d3e0:	4608      	mov	r0, r1
 800d3e2:	4611      	mov	r1, r2
 800d3e4:	602b      	str	r3, [r5, #0]
 800d3e6:	f7f7 fdcd 	bl	8004f84 <_kill>
 800d3ea:	1c43      	adds	r3, r0, #1
 800d3ec:	d102      	bne.n	800d3f4 <_kill_r+0x1c>
 800d3ee:	682b      	ldr	r3, [r5, #0]
 800d3f0:	b103      	cbz	r3, 800d3f4 <_kill_r+0x1c>
 800d3f2:	6023      	str	r3, [r4, #0]
 800d3f4:	bd38      	pop	{r3, r4, r5, pc}
 800d3f6:	bf00      	nop
 800d3f8:	20000a0c 	.word	0x20000a0c

0800d3fc <_getpid_r>:
 800d3fc:	f7f7 bdba 	b.w	8004f74 <_getpid>

0800d400 <__swhatbuf_r>:
 800d400:	b570      	push	{r4, r5, r6, lr}
 800d402:	460c      	mov	r4, r1
 800d404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d408:	2900      	cmp	r1, #0
 800d40a:	b096      	sub	sp, #88	; 0x58
 800d40c:	4615      	mov	r5, r2
 800d40e:	461e      	mov	r6, r3
 800d410:	da0d      	bge.n	800d42e <__swhatbuf_r+0x2e>
 800d412:	89a3      	ldrh	r3, [r4, #12]
 800d414:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d418:	f04f 0100 	mov.w	r1, #0
 800d41c:	bf0c      	ite	eq
 800d41e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d422:	2340      	movne	r3, #64	; 0x40
 800d424:	2000      	movs	r0, #0
 800d426:	6031      	str	r1, [r6, #0]
 800d428:	602b      	str	r3, [r5, #0]
 800d42a:	b016      	add	sp, #88	; 0x58
 800d42c:	bd70      	pop	{r4, r5, r6, pc}
 800d42e:	466a      	mov	r2, sp
 800d430:	f000 f848 	bl	800d4c4 <_fstat_r>
 800d434:	2800      	cmp	r0, #0
 800d436:	dbec      	blt.n	800d412 <__swhatbuf_r+0x12>
 800d438:	9901      	ldr	r1, [sp, #4]
 800d43a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d43e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d442:	4259      	negs	r1, r3
 800d444:	4159      	adcs	r1, r3
 800d446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d44a:	e7eb      	b.n	800d424 <__swhatbuf_r+0x24>

0800d44c <__smakebuf_r>:
 800d44c:	898b      	ldrh	r3, [r1, #12]
 800d44e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d450:	079d      	lsls	r5, r3, #30
 800d452:	4606      	mov	r6, r0
 800d454:	460c      	mov	r4, r1
 800d456:	d507      	bpl.n	800d468 <__smakebuf_r+0x1c>
 800d458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d45c:	6023      	str	r3, [r4, #0]
 800d45e:	6123      	str	r3, [r4, #16]
 800d460:	2301      	movs	r3, #1
 800d462:	6163      	str	r3, [r4, #20]
 800d464:	b002      	add	sp, #8
 800d466:	bd70      	pop	{r4, r5, r6, pc}
 800d468:	ab01      	add	r3, sp, #4
 800d46a:	466a      	mov	r2, sp
 800d46c:	f7ff ffc8 	bl	800d400 <__swhatbuf_r>
 800d470:	9900      	ldr	r1, [sp, #0]
 800d472:	4605      	mov	r5, r0
 800d474:	4630      	mov	r0, r6
 800d476:	f7fd fa49 	bl	800a90c <_malloc_r>
 800d47a:	b948      	cbnz	r0, 800d490 <__smakebuf_r+0x44>
 800d47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d480:	059a      	lsls	r2, r3, #22
 800d482:	d4ef      	bmi.n	800d464 <__smakebuf_r+0x18>
 800d484:	f023 0303 	bic.w	r3, r3, #3
 800d488:	f043 0302 	orr.w	r3, r3, #2
 800d48c:	81a3      	strh	r3, [r4, #12]
 800d48e:	e7e3      	b.n	800d458 <__smakebuf_r+0xc>
 800d490:	89a3      	ldrh	r3, [r4, #12]
 800d492:	6020      	str	r0, [r4, #0]
 800d494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d498:	81a3      	strh	r3, [r4, #12]
 800d49a:	9b00      	ldr	r3, [sp, #0]
 800d49c:	6163      	str	r3, [r4, #20]
 800d49e:	9b01      	ldr	r3, [sp, #4]
 800d4a0:	6120      	str	r0, [r4, #16]
 800d4a2:	b15b      	cbz	r3, 800d4bc <__smakebuf_r+0x70>
 800d4a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	f000 f81d 	bl	800d4e8 <_isatty_r>
 800d4ae:	b128      	cbz	r0, 800d4bc <__smakebuf_r+0x70>
 800d4b0:	89a3      	ldrh	r3, [r4, #12]
 800d4b2:	f023 0303 	bic.w	r3, r3, #3
 800d4b6:	f043 0301 	orr.w	r3, r3, #1
 800d4ba:	81a3      	strh	r3, [r4, #12]
 800d4bc:	89a3      	ldrh	r3, [r4, #12]
 800d4be:	431d      	orrs	r5, r3
 800d4c0:	81a5      	strh	r5, [r4, #12]
 800d4c2:	e7cf      	b.n	800d464 <__smakebuf_r+0x18>

0800d4c4 <_fstat_r>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	4d07      	ldr	r5, [pc, #28]	; (800d4e4 <_fstat_r+0x20>)
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	4608      	mov	r0, r1
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	602b      	str	r3, [r5, #0]
 800d4d2:	f7f7 fdb6 	bl	8005042 <_fstat>
 800d4d6:	1c43      	adds	r3, r0, #1
 800d4d8:	d102      	bne.n	800d4e0 <_fstat_r+0x1c>
 800d4da:	682b      	ldr	r3, [r5, #0]
 800d4dc:	b103      	cbz	r3, 800d4e0 <_fstat_r+0x1c>
 800d4de:	6023      	str	r3, [r4, #0]
 800d4e0:	bd38      	pop	{r3, r4, r5, pc}
 800d4e2:	bf00      	nop
 800d4e4:	20000a0c 	.word	0x20000a0c

0800d4e8 <_isatty_r>:
 800d4e8:	b538      	push	{r3, r4, r5, lr}
 800d4ea:	4d06      	ldr	r5, [pc, #24]	; (800d504 <_isatty_r+0x1c>)
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	4608      	mov	r0, r1
 800d4f2:	602b      	str	r3, [r5, #0]
 800d4f4:	f7f7 fdb5 	bl	8005062 <_isatty>
 800d4f8:	1c43      	adds	r3, r0, #1
 800d4fa:	d102      	bne.n	800d502 <_isatty_r+0x1a>
 800d4fc:	682b      	ldr	r3, [r5, #0]
 800d4fe:	b103      	cbz	r3, 800d502 <_isatty_r+0x1a>
 800d500:	6023      	str	r3, [r4, #0]
 800d502:	bd38      	pop	{r3, r4, r5, pc}
 800d504:	20000a0c 	.word	0x20000a0c

0800d508 <pow>:
 800d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50a:	ed2d 8b02 	vpush	{d8}
 800d50e:	eeb0 8a40 	vmov.f32	s16, s0
 800d512:	eef0 8a60 	vmov.f32	s17, s1
 800d516:	ec55 4b11 	vmov	r4, r5, d1
 800d51a:	f000 f971 	bl	800d800 <__ieee754_pow>
 800d51e:	4622      	mov	r2, r4
 800d520:	462b      	mov	r3, r5
 800d522:	4620      	mov	r0, r4
 800d524:	4629      	mov	r1, r5
 800d526:	ec57 6b10 	vmov	r6, r7, d0
 800d52a:	f7f3 fb17 	bl	8000b5c <__aeabi_dcmpun>
 800d52e:	2800      	cmp	r0, #0
 800d530:	d13b      	bne.n	800d5aa <pow+0xa2>
 800d532:	ec51 0b18 	vmov	r0, r1, d8
 800d536:	2200      	movs	r2, #0
 800d538:	2300      	movs	r3, #0
 800d53a:	f7f3 fadd 	bl	8000af8 <__aeabi_dcmpeq>
 800d53e:	b1b8      	cbz	r0, 800d570 <pow+0x68>
 800d540:	2200      	movs	r2, #0
 800d542:	2300      	movs	r3, #0
 800d544:	4620      	mov	r0, r4
 800d546:	4629      	mov	r1, r5
 800d548:	f7f3 fad6 	bl	8000af8 <__aeabi_dcmpeq>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	d146      	bne.n	800d5de <pow+0xd6>
 800d550:	ec45 4b10 	vmov	d0, r4, r5
 800d554:	f000 f868 	bl	800d628 <finite>
 800d558:	b338      	cbz	r0, 800d5aa <pow+0xa2>
 800d55a:	2200      	movs	r2, #0
 800d55c:	2300      	movs	r3, #0
 800d55e:	4620      	mov	r0, r4
 800d560:	4629      	mov	r1, r5
 800d562:	f7f3 fad3 	bl	8000b0c <__aeabi_dcmplt>
 800d566:	b300      	cbz	r0, 800d5aa <pow+0xa2>
 800d568:	f7fe f9ec 	bl	800b944 <__errno>
 800d56c:	2322      	movs	r3, #34	; 0x22
 800d56e:	e01b      	b.n	800d5a8 <pow+0xa0>
 800d570:	ec47 6b10 	vmov	d0, r6, r7
 800d574:	f000 f858 	bl	800d628 <finite>
 800d578:	b9e0      	cbnz	r0, 800d5b4 <pow+0xac>
 800d57a:	eeb0 0a48 	vmov.f32	s0, s16
 800d57e:	eef0 0a68 	vmov.f32	s1, s17
 800d582:	f000 f851 	bl	800d628 <finite>
 800d586:	b1a8      	cbz	r0, 800d5b4 <pow+0xac>
 800d588:	ec45 4b10 	vmov	d0, r4, r5
 800d58c:	f000 f84c 	bl	800d628 <finite>
 800d590:	b180      	cbz	r0, 800d5b4 <pow+0xac>
 800d592:	4632      	mov	r2, r6
 800d594:	463b      	mov	r3, r7
 800d596:	4630      	mov	r0, r6
 800d598:	4639      	mov	r1, r7
 800d59a:	f7f3 fadf 	bl	8000b5c <__aeabi_dcmpun>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d0e2      	beq.n	800d568 <pow+0x60>
 800d5a2:	f7fe f9cf 	bl	800b944 <__errno>
 800d5a6:	2321      	movs	r3, #33	; 0x21
 800d5a8:	6003      	str	r3, [r0, #0]
 800d5aa:	ecbd 8b02 	vpop	{d8}
 800d5ae:	ec47 6b10 	vmov	d0, r6, r7
 800d5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	4639      	mov	r1, r7
 800d5bc:	f7f3 fa9c 	bl	8000af8 <__aeabi_dcmpeq>
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	d0f2      	beq.n	800d5aa <pow+0xa2>
 800d5c4:	eeb0 0a48 	vmov.f32	s0, s16
 800d5c8:	eef0 0a68 	vmov.f32	s1, s17
 800d5cc:	f000 f82c 	bl	800d628 <finite>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	d0ea      	beq.n	800d5aa <pow+0xa2>
 800d5d4:	ec45 4b10 	vmov	d0, r4, r5
 800d5d8:	f000 f826 	bl	800d628 <finite>
 800d5dc:	e7c3      	b.n	800d566 <pow+0x5e>
 800d5de:	4f01      	ldr	r7, [pc, #4]	; (800d5e4 <pow+0xdc>)
 800d5e0:	2600      	movs	r6, #0
 800d5e2:	e7e2      	b.n	800d5aa <pow+0xa2>
 800d5e4:	3ff00000 	.word	0x3ff00000

0800d5e8 <atan2f>:
 800d5e8:	f000 be3e 	b.w	800e268 <__ieee754_atan2f>

0800d5ec <sqrtf>:
 800d5ec:	b508      	push	{r3, lr}
 800d5ee:	ed2d 8b02 	vpush	{d8}
 800d5f2:	eeb0 8a40 	vmov.f32	s16, s0
 800d5f6:	f000 f8fd 	bl	800d7f4 <__ieee754_sqrtf>
 800d5fa:	eeb4 8a48 	vcmp.f32	s16, s16
 800d5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d602:	d60c      	bvs.n	800d61e <sqrtf+0x32>
 800d604:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d624 <sqrtf+0x38>
 800d608:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d610:	d505      	bpl.n	800d61e <sqrtf+0x32>
 800d612:	f7fe f997 	bl	800b944 <__errno>
 800d616:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d61a:	2321      	movs	r3, #33	; 0x21
 800d61c:	6003      	str	r3, [r0, #0]
 800d61e:	ecbd 8b02 	vpop	{d8}
 800d622:	bd08      	pop	{r3, pc}
 800d624:	00000000 	.word	0x00000000

0800d628 <finite>:
 800d628:	b082      	sub	sp, #8
 800d62a:	ed8d 0b00 	vstr	d0, [sp]
 800d62e:	9801      	ldr	r0, [sp, #4]
 800d630:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d634:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d638:	0fc0      	lsrs	r0, r0, #31
 800d63a:	b002      	add	sp, #8
 800d63c:	4770      	bx	lr
	...

0800d640 <__ieee754_sqrt>:
 800d640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d644:	ec55 4b10 	vmov	r4, r5, d0
 800d648:	4e67      	ldr	r6, [pc, #412]	; (800d7e8 <__ieee754_sqrt+0x1a8>)
 800d64a:	43ae      	bics	r6, r5
 800d64c:	ee10 0a10 	vmov	r0, s0
 800d650:	ee10 2a10 	vmov	r2, s0
 800d654:	4629      	mov	r1, r5
 800d656:	462b      	mov	r3, r5
 800d658:	d10d      	bne.n	800d676 <__ieee754_sqrt+0x36>
 800d65a:	f7f2 ffe5 	bl	8000628 <__aeabi_dmul>
 800d65e:	4602      	mov	r2, r0
 800d660:	460b      	mov	r3, r1
 800d662:	4620      	mov	r0, r4
 800d664:	4629      	mov	r1, r5
 800d666:	f7f2 fe29 	bl	80002bc <__adddf3>
 800d66a:	4604      	mov	r4, r0
 800d66c:	460d      	mov	r5, r1
 800d66e:	ec45 4b10 	vmov	d0, r4, r5
 800d672:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d676:	2d00      	cmp	r5, #0
 800d678:	dc0b      	bgt.n	800d692 <__ieee754_sqrt+0x52>
 800d67a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d67e:	4326      	orrs	r6, r4
 800d680:	d0f5      	beq.n	800d66e <__ieee754_sqrt+0x2e>
 800d682:	b135      	cbz	r5, 800d692 <__ieee754_sqrt+0x52>
 800d684:	f7f2 fe18 	bl	80002b8 <__aeabi_dsub>
 800d688:	4602      	mov	r2, r0
 800d68a:	460b      	mov	r3, r1
 800d68c:	f7f3 f8f6 	bl	800087c <__aeabi_ddiv>
 800d690:	e7eb      	b.n	800d66a <__ieee754_sqrt+0x2a>
 800d692:	1509      	asrs	r1, r1, #20
 800d694:	f000 808d 	beq.w	800d7b2 <__ieee754_sqrt+0x172>
 800d698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d69c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d6a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6a4:	07c9      	lsls	r1, r1, #31
 800d6a6:	bf5c      	itt	pl
 800d6a8:	005b      	lslpl	r3, r3, #1
 800d6aa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d6ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d6b2:	bf58      	it	pl
 800d6b4:	0052      	lslpl	r2, r2, #1
 800d6b6:	2500      	movs	r5, #0
 800d6b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d6bc:	1076      	asrs	r6, r6, #1
 800d6be:	0052      	lsls	r2, r2, #1
 800d6c0:	f04f 0e16 	mov.w	lr, #22
 800d6c4:	46ac      	mov	ip, r5
 800d6c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d6ca:	eb0c 0001 	add.w	r0, ip, r1
 800d6ce:	4298      	cmp	r0, r3
 800d6d0:	bfde      	ittt	le
 800d6d2:	1a1b      	suble	r3, r3, r0
 800d6d4:	eb00 0c01 	addle.w	ip, r0, r1
 800d6d8:	186d      	addle	r5, r5, r1
 800d6da:	005b      	lsls	r3, r3, #1
 800d6dc:	f1be 0e01 	subs.w	lr, lr, #1
 800d6e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d6e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d6e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d6ec:	d1ed      	bne.n	800d6ca <__ieee754_sqrt+0x8a>
 800d6ee:	4674      	mov	r4, lr
 800d6f0:	2720      	movs	r7, #32
 800d6f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d6f6:	4563      	cmp	r3, ip
 800d6f8:	eb01 000e 	add.w	r0, r1, lr
 800d6fc:	dc02      	bgt.n	800d704 <__ieee754_sqrt+0xc4>
 800d6fe:	d113      	bne.n	800d728 <__ieee754_sqrt+0xe8>
 800d700:	4290      	cmp	r0, r2
 800d702:	d811      	bhi.n	800d728 <__ieee754_sqrt+0xe8>
 800d704:	2800      	cmp	r0, #0
 800d706:	eb00 0e01 	add.w	lr, r0, r1
 800d70a:	da57      	bge.n	800d7bc <__ieee754_sqrt+0x17c>
 800d70c:	f1be 0f00 	cmp.w	lr, #0
 800d710:	db54      	blt.n	800d7bc <__ieee754_sqrt+0x17c>
 800d712:	f10c 0801 	add.w	r8, ip, #1
 800d716:	eba3 030c 	sub.w	r3, r3, ip
 800d71a:	4290      	cmp	r0, r2
 800d71c:	bf88      	it	hi
 800d71e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d722:	1a12      	subs	r2, r2, r0
 800d724:	440c      	add	r4, r1
 800d726:	46c4      	mov	ip, r8
 800d728:	005b      	lsls	r3, r3, #1
 800d72a:	3f01      	subs	r7, #1
 800d72c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d730:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d734:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d738:	d1dd      	bne.n	800d6f6 <__ieee754_sqrt+0xb6>
 800d73a:	4313      	orrs	r3, r2
 800d73c:	d01b      	beq.n	800d776 <__ieee754_sqrt+0x136>
 800d73e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d7ec <__ieee754_sqrt+0x1ac>
 800d742:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d7f0 <__ieee754_sqrt+0x1b0>
 800d746:	e9da 0100 	ldrd	r0, r1, [sl]
 800d74a:	e9db 2300 	ldrd	r2, r3, [fp]
 800d74e:	f7f2 fdb3 	bl	80002b8 <__aeabi_dsub>
 800d752:	e9da 8900 	ldrd	r8, r9, [sl]
 800d756:	4602      	mov	r2, r0
 800d758:	460b      	mov	r3, r1
 800d75a:	4640      	mov	r0, r8
 800d75c:	4649      	mov	r1, r9
 800d75e:	f7f3 f9df 	bl	8000b20 <__aeabi_dcmple>
 800d762:	b140      	cbz	r0, 800d776 <__ieee754_sqrt+0x136>
 800d764:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d768:	e9da 0100 	ldrd	r0, r1, [sl]
 800d76c:	e9db 2300 	ldrd	r2, r3, [fp]
 800d770:	d126      	bne.n	800d7c0 <__ieee754_sqrt+0x180>
 800d772:	3501      	adds	r5, #1
 800d774:	463c      	mov	r4, r7
 800d776:	106a      	asrs	r2, r5, #1
 800d778:	0863      	lsrs	r3, r4, #1
 800d77a:	07e9      	lsls	r1, r5, #31
 800d77c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d780:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d784:	bf48      	it	mi
 800d786:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d78a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d78e:	461c      	mov	r4, r3
 800d790:	e76d      	b.n	800d66e <__ieee754_sqrt+0x2e>
 800d792:	0ad3      	lsrs	r3, r2, #11
 800d794:	3815      	subs	r0, #21
 800d796:	0552      	lsls	r2, r2, #21
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d0fa      	beq.n	800d792 <__ieee754_sqrt+0x152>
 800d79c:	02dc      	lsls	r4, r3, #11
 800d79e:	d50a      	bpl.n	800d7b6 <__ieee754_sqrt+0x176>
 800d7a0:	f1c1 0420 	rsb	r4, r1, #32
 800d7a4:	fa22 f404 	lsr.w	r4, r2, r4
 800d7a8:	1e4d      	subs	r5, r1, #1
 800d7aa:	408a      	lsls	r2, r1
 800d7ac:	4323      	orrs	r3, r4
 800d7ae:	1b41      	subs	r1, r0, r5
 800d7b0:	e772      	b.n	800d698 <__ieee754_sqrt+0x58>
 800d7b2:	4608      	mov	r0, r1
 800d7b4:	e7f0      	b.n	800d798 <__ieee754_sqrt+0x158>
 800d7b6:	005b      	lsls	r3, r3, #1
 800d7b8:	3101      	adds	r1, #1
 800d7ba:	e7ef      	b.n	800d79c <__ieee754_sqrt+0x15c>
 800d7bc:	46e0      	mov	r8, ip
 800d7be:	e7aa      	b.n	800d716 <__ieee754_sqrt+0xd6>
 800d7c0:	f7f2 fd7c 	bl	80002bc <__adddf3>
 800d7c4:	e9da 8900 	ldrd	r8, r9, [sl]
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	4640      	mov	r0, r8
 800d7ce:	4649      	mov	r1, r9
 800d7d0:	f7f3 f99c 	bl	8000b0c <__aeabi_dcmplt>
 800d7d4:	b120      	cbz	r0, 800d7e0 <__ieee754_sqrt+0x1a0>
 800d7d6:	1ca0      	adds	r0, r4, #2
 800d7d8:	bf08      	it	eq
 800d7da:	3501      	addeq	r5, #1
 800d7dc:	3402      	adds	r4, #2
 800d7de:	e7ca      	b.n	800d776 <__ieee754_sqrt+0x136>
 800d7e0:	3401      	adds	r4, #1
 800d7e2:	f024 0401 	bic.w	r4, r4, #1
 800d7e6:	e7c6      	b.n	800d776 <__ieee754_sqrt+0x136>
 800d7e8:	7ff00000 	.word	0x7ff00000
 800d7ec:	20000230 	.word	0x20000230
 800d7f0:	20000238 	.word	0x20000238

0800d7f4 <__ieee754_sqrtf>:
 800d7f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d7f8:	4770      	bx	lr
 800d7fa:	0000      	movs	r0, r0
 800d7fc:	0000      	movs	r0, r0
	...

0800d800 <__ieee754_pow>:
 800d800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d804:	ed2d 8b06 	vpush	{d8-d10}
 800d808:	b089      	sub	sp, #36	; 0x24
 800d80a:	ed8d 1b00 	vstr	d1, [sp]
 800d80e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d812:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d816:	ea58 0102 	orrs.w	r1, r8, r2
 800d81a:	ec57 6b10 	vmov	r6, r7, d0
 800d81e:	d115      	bne.n	800d84c <__ieee754_pow+0x4c>
 800d820:	19b3      	adds	r3, r6, r6
 800d822:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d826:	4152      	adcs	r2, r2
 800d828:	4299      	cmp	r1, r3
 800d82a:	4b89      	ldr	r3, [pc, #548]	; (800da50 <__ieee754_pow+0x250>)
 800d82c:	4193      	sbcs	r3, r2
 800d82e:	f080 84d1 	bcs.w	800e1d4 <__ieee754_pow+0x9d4>
 800d832:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d836:	4630      	mov	r0, r6
 800d838:	4639      	mov	r1, r7
 800d83a:	f7f2 fd3f 	bl	80002bc <__adddf3>
 800d83e:	ec41 0b10 	vmov	d0, r0, r1
 800d842:	b009      	add	sp, #36	; 0x24
 800d844:	ecbd 8b06 	vpop	{d8-d10}
 800d848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84c:	4b81      	ldr	r3, [pc, #516]	; (800da54 <__ieee754_pow+0x254>)
 800d84e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d852:	429c      	cmp	r4, r3
 800d854:	ee10 aa10 	vmov	sl, s0
 800d858:	463d      	mov	r5, r7
 800d85a:	dc06      	bgt.n	800d86a <__ieee754_pow+0x6a>
 800d85c:	d101      	bne.n	800d862 <__ieee754_pow+0x62>
 800d85e:	2e00      	cmp	r6, #0
 800d860:	d1e7      	bne.n	800d832 <__ieee754_pow+0x32>
 800d862:	4598      	cmp	r8, r3
 800d864:	dc01      	bgt.n	800d86a <__ieee754_pow+0x6a>
 800d866:	d10f      	bne.n	800d888 <__ieee754_pow+0x88>
 800d868:	b172      	cbz	r2, 800d888 <__ieee754_pow+0x88>
 800d86a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d86e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d872:	ea55 050a 	orrs.w	r5, r5, sl
 800d876:	d1dc      	bne.n	800d832 <__ieee754_pow+0x32>
 800d878:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d87c:	18db      	adds	r3, r3, r3
 800d87e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d882:	4152      	adcs	r2, r2
 800d884:	429d      	cmp	r5, r3
 800d886:	e7d0      	b.n	800d82a <__ieee754_pow+0x2a>
 800d888:	2d00      	cmp	r5, #0
 800d88a:	da3b      	bge.n	800d904 <__ieee754_pow+0x104>
 800d88c:	4b72      	ldr	r3, [pc, #456]	; (800da58 <__ieee754_pow+0x258>)
 800d88e:	4598      	cmp	r8, r3
 800d890:	dc51      	bgt.n	800d936 <__ieee754_pow+0x136>
 800d892:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d896:	4598      	cmp	r8, r3
 800d898:	f340 84ab 	ble.w	800e1f2 <__ieee754_pow+0x9f2>
 800d89c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d8a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d8a4:	2b14      	cmp	r3, #20
 800d8a6:	dd0f      	ble.n	800d8c8 <__ieee754_pow+0xc8>
 800d8a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d8ac:	fa22 f103 	lsr.w	r1, r2, r3
 800d8b0:	fa01 f303 	lsl.w	r3, r1, r3
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	f040 849c 	bne.w	800e1f2 <__ieee754_pow+0x9f2>
 800d8ba:	f001 0101 	and.w	r1, r1, #1
 800d8be:	f1c1 0302 	rsb	r3, r1, #2
 800d8c2:	9304      	str	r3, [sp, #16]
 800d8c4:	b182      	cbz	r2, 800d8e8 <__ieee754_pow+0xe8>
 800d8c6:	e05f      	b.n	800d988 <__ieee754_pow+0x188>
 800d8c8:	2a00      	cmp	r2, #0
 800d8ca:	d15b      	bne.n	800d984 <__ieee754_pow+0x184>
 800d8cc:	f1c3 0314 	rsb	r3, r3, #20
 800d8d0:	fa48 f103 	asr.w	r1, r8, r3
 800d8d4:	fa01 f303 	lsl.w	r3, r1, r3
 800d8d8:	4543      	cmp	r3, r8
 800d8da:	f040 8487 	bne.w	800e1ec <__ieee754_pow+0x9ec>
 800d8de:	f001 0101 	and.w	r1, r1, #1
 800d8e2:	f1c1 0302 	rsb	r3, r1, #2
 800d8e6:	9304      	str	r3, [sp, #16]
 800d8e8:	4b5c      	ldr	r3, [pc, #368]	; (800da5c <__ieee754_pow+0x25c>)
 800d8ea:	4598      	cmp	r8, r3
 800d8ec:	d132      	bne.n	800d954 <__ieee754_pow+0x154>
 800d8ee:	f1b9 0f00 	cmp.w	r9, #0
 800d8f2:	f280 8477 	bge.w	800e1e4 <__ieee754_pow+0x9e4>
 800d8f6:	4959      	ldr	r1, [pc, #356]	; (800da5c <__ieee754_pow+0x25c>)
 800d8f8:	4632      	mov	r2, r6
 800d8fa:	463b      	mov	r3, r7
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	f7f2 ffbd 	bl	800087c <__aeabi_ddiv>
 800d902:	e79c      	b.n	800d83e <__ieee754_pow+0x3e>
 800d904:	2300      	movs	r3, #0
 800d906:	9304      	str	r3, [sp, #16]
 800d908:	2a00      	cmp	r2, #0
 800d90a:	d13d      	bne.n	800d988 <__ieee754_pow+0x188>
 800d90c:	4b51      	ldr	r3, [pc, #324]	; (800da54 <__ieee754_pow+0x254>)
 800d90e:	4598      	cmp	r8, r3
 800d910:	d1ea      	bne.n	800d8e8 <__ieee754_pow+0xe8>
 800d912:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d916:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d91a:	ea53 030a 	orrs.w	r3, r3, sl
 800d91e:	f000 8459 	beq.w	800e1d4 <__ieee754_pow+0x9d4>
 800d922:	4b4f      	ldr	r3, [pc, #316]	; (800da60 <__ieee754_pow+0x260>)
 800d924:	429c      	cmp	r4, r3
 800d926:	dd08      	ble.n	800d93a <__ieee754_pow+0x13a>
 800d928:	f1b9 0f00 	cmp.w	r9, #0
 800d92c:	f2c0 8456 	blt.w	800e1dc <__ieee754_pow+0x9dc>
 800d930:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d934:	e783      	b.n	800d83e <__ieee754_pow+0x3e>
 800d936:	2302      	movs	r3, #2
 800d938:	e7e5      	b.n	800d906 <__ieee754_pow+0x106>
 800d93a:	f1b9 0f00 	cmp.w	r9, #0
 800d93e:	f04f 0000 	mov.w	r0, #0
 800d942:	f04f 0100 	mov.w	r1, #0
 800d946:	f6bf af7a 	bge.w	800d83e <__ieee754_pow+0x3e>
 800d94a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d94e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d952:	e774      	b.n	800d83e <__ieee754_pow+0x3e>
 800d954:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d958:	d106      	bne.n	800d968 <__ieee754_pow+0x168>
 800d95a:	4632      	mov	r2, r6
 800d95c:	463b      	mov	r3, r7
 800d95e:	4630      	mov	r0, r6
 800d960:	4639      	mov	r1, r7
 800d962:	f7f2 fe61 	bl	8000628 <__aeabi_dmul>
 800d966:	e76a      	b.n	800d83e <__ieee754_pow+0x3e>
 800d968:	4b3e      	ldr	r3, [pc, #248]	; (800da64 <__ieee754_pow+0x264>)
 800d96a:	4599      	cmp	r9, r3
 800d96c:	d10c      	bne.n	800d988 <__ieee754_pow+0x188>
 800d96e:	2d00      	cmp	r5, #0
 800d970:	db0a      	blt.n	800d988 <__ieee754_pow+0x188>
 800d972:	ec47 6b10 	vmov	d0, r6, r7
 800d976:	b009      	add	sp, #36	; 0x24
 800d978:	ecbd 8b06 	vpop	{d8-d10}
 800d97c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d980:	f7ff be5e 	b.w	800d640 <__ieee754_sqrt>
 800d984:	2300      	movs	r3, #0
 800d986:	9304      	str	r3, [sp, #16]
 800d988:	ec47 6b10 	vmov	d0, r6, r7
 800d98c:	f000 fc62 	bl	800e254 <fabs>
 800d990:	ec51 0b10 	vmov	r0, r1, d0
 800d994:	f1ba 0f00 	cmp.w	sl, #0
 800d998:	d129      	bne.n	800d9ee <__ieee754_pow+0x1ee>
 800d99a:	b124      	cbz	r4, 800d9a6 <__ieee754_pow+0x1a6>
 800d99c:	4b2f      	ldr	r3, [pc, #188]	; (800da5c <__ieee754_pow+0x25c>)
 800d99e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d123      	bne.n	800d9ee <__ieee754_pow+0x1ee>
 800d9a6:	f1b9 0f00 	cmp.w	r9, #0
 800d9aa:	da05      	bge.n	800d9b8 <__ieee754_pow+0x1b8>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	492a      	ldr	r1, [pc, #168]	; (800da5c <__ieee754_pow+0x25c>)
 800d9b4:	f7f2 ff62 	bl	800087c <__aeabi_ddiv>
 800d9b8:	2d00      	cmp	r5, #0
 800d9ba:	f6bf af40 	bge.w	800d83e <__ieee754_pow+0x3e>
 800d9be:	9b04      	ldr	r3, [sp, #16]
 800d9c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d9c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d9c8:	431c      	orrs	r4, r3
 800d9ca:	d108      	bne.n	800d9de <__ieee754_pow+0x1de>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	4610      	mov	r0, r2
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	f7f2 fc70 	bl	80002b8 <__aeabi_dsub>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	460b      	mov	r3, r1
 800d9dc:	e78f      	b.n	800d8fe <__ieee754_pow+0xfe>
 800d9de:	9b04      	ldr	r3, [sp, #16]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	f47f af2c 	bne.w	800d83e <__ieee754_pow+0x3e>
 800d9e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	e727      	b.n	800d83e <__ieee754_pow+0x3e>
 800d9ee:	0feb      	lsrs	r3, r5, #31
 800d9f0:	3b01      	subs	r3, #1
 800d9f2:	9306      	str	r3, [sp, #24]
 800d9f4:	9a06      	ldr	r2, [sp, #24]
 800d9f6:	9b04      	ldr	r3, [sp, #16]
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	d102      	bne.n	800da02 <__ieee754_pow+0x202>
 800d9fc:	4632      	mov	r2, r6
 800d9fe:	463b      	mov	r3, r7
 800da00:	e7e6      	b.n	800d9d0 <__ieee754_pow+0x1d0>
 800da02:	4b19      	ldr	r3, [pc, #100]	; (800da68 <__ieee754_pow+0x268>)
 800da04:	4598      	cmp	r8, r3
 800da06:	f340 80fb 	ble.w	800dc00 <__ieee754_pow+0x400>
 800da0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800da0e:	4598      	cmp	r8, r3
 800da10:	4b13      	ldr	r3, [pc, #76]	; (800da60 <__ieee754_pow+0x260>)
 800da12:	dd0c      	ble.n	800da2e <__ieee754_pow+0x22e>
 800da14:	429c      	cmp	r4, r3
 800da16:	dc0f      	bgt.n	800da38 <__ieee754_pow+0x238>
 800da18:	f1b9 0f00 	cmp.w	r9, #0
 800da1c:	da0f      	bge.n	800da3e <__ieee754_pow+0x23e>
 800da1e:	2000      	movs	r0, #0
 800da20:	b009      	add	sp, #36	; 0x24
 800da22:	ecbd 8b06 	vpop	{d8-d10}
 800da26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da2a:	f000 be3e 	b.w	800e6aa <__math_oflow>
 800da2e:	429c      	cmp	r4, r3
 800da30:	dbf2      	blt.n	800da18 <__ieee754_pow+0x218>
 800da32:	4b0a      	ldr	r3, [pc, #40]	; (800da5c <__ieee754_pow+0x25c>)
 800da34:	429c      	cmp	r4, r3
 800da36:	dd19      	ble.n	800da6c <__ieee754_pow+0x26c>
 800da38:	f1b9 0f00 	cmp.w	r9, #0
 800da3c:	dcef      	bgt.n	800da1e <__ieee754_pow+0x21e>
 800da3e:	2000      	movs	r0, #0
 800da40:	b009      	add	sp, #36	; 0x24
 800da42:	ecbd 8b06 	vpop	{d8-d10}
 800da46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4a:	f000 be25 	b.w	800e698 <__math_uflow>
 800da4e:	bf00      	nop
 800da50:	fff00000 	.word	0xfff00000
 800da54:	7ff00000 	.word	0x7ff00000
 800da58:	433fffff 	.word	0x433fffff
 800da5c:	3ff00000 	.word	0x3ff00000
 800da60:	3fefffff 	.word	0x3fefffff
 800da64:	3fe00000 	.word	0x3fe00000
 800da68:	41e00000 	.word	0x41e00000
 800da6c:	4b60      	ldr	r3, [pc, #384]	; (800dbf0 <__ieee754_pow+0x3f0>)
 800da6e:	2200      	movs	r2, #0
 800da70:	f7f2 fc22 	bl	80002b8 <__aeabi_dsub>
 800da74:	a354      	add	r3, pc, #336	; (adr r3, 800dbc8 <__ieee754_pow+0x3c8>)
 800da76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7a:	4604      	mov	r4, r0
 800da7c:	460d      	mov	r5, r1
 800da7e:	f7f2 fdd3 	bl	8000628 <__aeabi_dmul>
 800da82:	a353      	add	r3, pc, #332	; (adr r3, 800dbd0 <__ieee754_pow+0x3d0>)
 800da84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da88:	4606      	mov	r6, r0
 800da8a:	460f      	mov	r7, r1
 800da8c:	4620      	mov	r0, r4
 800da8e:	4629      	mov	r1, r5
 800da90:	f7f2 fdca 	bl	8000628 <__aeabi_dmul>
 800da94:	4b57      	ldr	r3, [pc, #348]	; (800dbf4 <__ieee754_pow+0x3f4>)
 800da96:	4682      	mov	sl, r0
 800da98:	468b      	mov	fp, r1
 800da9a:	2200      	movs	r2, #0
 800da9c:	4620      	mov	r0, r4
 800da9e:	4629      	mov	r1, r5
 800daa0:	f7f2 fdc2 	bl	8000628 <__aeabi_dmul>
 800daa4:	4602      	mov	r2, r0
 800daa6:	460b      	mov	r3, r1
 800daa8:	a14b      	add	r1, pc, #300	; (adr r1, 800dbd8 <__ieee754_pow+0x3d8>)
 800daaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800daae:	f7f2 fc03 	bl	80002b8 <__aeabi_dsub>
 800dab2:	4622      	mov	r2, r4
 800dab4:	462b      	mov	r3, r5
 800dab6:	f7f2 fdb7 	bl	8000628 <__aeabi_dmul>
 800daba:	4602      	mov	r2, r0
 800dabc:	460b      	mov	r3, r1
 800dabe:	2000      	movs	r0, #0
 800dac0:	494d      	ldr	r1, [pc, #308]	; (800dbf8 <__ieee754_pow+0x3f8>)
 800dac2:	f7f2 fbf9 	bl	80002b8 <__aeabi_dsub>
 800dac6:	4622      	mov	r2, r4
 800dac8:	4680      	mov	r8, r0
 800daca:	4689      	mov	r9, r1
 800dacc:	462b      	mov	r3, r5
 800dace:	4620      	mov	r0, r4
 800dad0:	4629      	mov	r1, r5
 800dad2:	f7f2 fda9 	bl	8000628 <__aeabi_dmul>
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	4640      	mov	r0, r8
 800dadc:	4649      	mov	r1, r9
 800dade:	f7f2 fda3 	bl	8000628 <__aeabi_dmul>
 800dae2:	a33f      	add	r3, pc, #252	; (adr r3, 800dbe0 <__ieee754_pow+0x3e0>)
 800dae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae8:	f7f2 fd9e 	bl	8000628 <__aeabi_dmul>
 800daec:	4602      	mov	r2, r0
 800daee:	460b      	mov	r3, r1
 800daf0:	4650      	mov	r0, sl
 800daf2:	4659      	mov	r1, fp
 800daf4:	f7f2 fbe0 	bl	80002b8 <__aeabi_dsub>
 800daf8:	4602      	mov	r2, r0
 800dafa:	460b      	mov	r3, r1
 800dafc:	4680      	mov	r8, r0
 800dafe:	4689      	mov	r9, r1
 800db00:	4630      	mov	r0, r6
 800db02:	4639      	mov	r1, r7
 800db04:	f7f2 fbda 	bl	80002bc <__adddf3>
 800db08:	2000      	movs	r0, #0
 800db0a:	4632      	mov	r2, r6
 800db0c:	463b      	mov	r3, r7
 800db0e:	4604      	mov	r4, r0
 800db10:	460d      	mov	r5, r1
 800db12:	f7f2 fbd1 	bl	80002b8 <__aeabi_dsub>
 800db16:	4602      	mov	r2, r0
 800db18:	460b      	mov	r3, r1
 800db1a:	4640      	mov	r0, r8
 800db1c:	4649      	mov	r1, r9
 800db1e:	f7f2 fbcb 	bl	80002b8 <__aeabi_dsub>
 800db22:	9b04      	ldr	r3, [sp, #16]
 800db24:	9a06      	ldr	r2, [sp, #24]
 800db26:	3b01      	subs	r3, #1
 800db28:	4313      	orrs	r3, r2
 800db2a:	4682      	mov	sl, r0
 800db2c:	468b      	mov	fp, r1
 800db2e:	f040 81e7 	bne.w	800df00 <__ieee754_pow+0x700>
 800db32:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800dbe8 <__ieee754_pow+0x3e8>
 800db36:	eeb0 8a47 	vmov.f32	s16, s14
 800db3a:	eef0 8a67 	vmov.f32	s17, s15
 800db3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800db42:	2600      	movs	r6, #0
 800db44:	4632      	mov	r2, r6
 800db46:	463b      	mov	r3, r7
 800db48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db4c:	f7f2 fbb4 	bl	80002b8 <__aeabi_dsub>
 800db50:	4622      	mov	r2, r4
 800db52:	462b      	mov	r3, r5
 800db54:	f7f2 fd68 	bl	8000628 <__aeabi_dmul>
 800db58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db5c:	4680      	mov	r8, r0
 800db5e:	4689      	mov	r9, r1
 800db60:	4650      	mov	r0, sl
 800db62:	4659      	mov	r1, fp
 800db64:	f7f2 fd60 	bl	8000628 <__aeabi_dmul>
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	4640      	mov	r0, r8
 800db6e:	4649      	mov	r1, r9
 800db70:	f7f2 fba4 	bl	80002bc <__adddf3>
 800db74:	4632      	mov	r2, r6
 800db76:	463b      	mov	r3, r7
 800db78:	4680      	mov	r8, r0
 800db7a:	4689      	mov	r9, r1
 800db7c:	4620      	mov	r0, r4
 800db7e:	4629      	mov	r1, r5
 800db80:	f7f2 fd52 	bl	8000628 <__aeabi_dmul>
 800db84:	460b      	mov	r3, r1
 800db86:	4604      	mov	r4, r0
 800db88:	460d      	mov	r5, r1
 800db8a:	4602      	mov	r2, r0
 800db8c:	4649      	mov	r1, r9
 800db8e:	4640      	mov	r0, r8
 800db90:	f7f2 fb94 	bl	80002bc <__adddf3>
 800db94:	4b19      	ldr	r3, [pc, #100]	; (800dbfc <__ieee754_pow+0x3fc>)
 800db96:	4299      	cmp	r1, r3
 800db98:	ec45 4b19 	vmov	d9, r4, r5
 800db9c:	4606      	mov	r6, r0
 800db9e:	460f      	mov	r7, r1
 800dba0:	468b      	mov	fp, r1
 800dba2:	f340 82f0 	ble.w	800e186 <__ieee754_pow+0x986>
 800dba6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dbaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dbae:	4303      	orrs	r3, r0
 800dbb0:	f000 81e4 	beq.w	800df7c <__ieee754_pow+0x77c>
 800dbb4:	ec51 0b18 	vmov	r0, r1, d8
 800dbb8:	2200      	movs	r2, #0
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f7f2 ffa6 	bl	8000b0c <__aeabi_dcmplt>
 800dbc0:	3800      	subs	r0, #0
 800dbc2:	bf18      	it	ne
 800dbc4:	2001      	movne	r0, #1
 800dbc6:	e72b      	b.n	800da20 <__ieee754_pow+0x220>
 800dbc8:	60000000 	.word	0x60000000
 800dbcc:	3ff71547 	.word	0x3ff71547
 800dbd0:	f85ddf44 	.word	0xf85ddf44
 800dbd4:	3e54ae0b 	.word	0x3e54ae0b
 800dbd8:	55555555 	.word	0x55555555
 800dbdc:	3fd55555 	.word	0x3fd55555
 800dbe0:	652b82fe 	.word	0x652b82fe
 800dbe4:	3ff71547 	.word	0x3ff71547
 800dbe8:	00000000 	.word	0x00000000
 800dbec:	bff00000 	.word	0xbff00000
 800dbf0:	3ff00000 	.word	0x3ff00000
 800dbf4:	3fd00000 	.word	0x3fd00000
 800dbf8:	3fe00000 	.word	0x3fe00000
 800dbfc:	408fffff 	.word	0x408fffff
 800dc00:	4bd5      	ldr	r3, [pc, #852]	; (800df58 <__ieee754_pow+0x758>)
 800dc02:	402b      	ands	r3, r5
 800dc04:	2200      	movs	r2, #0
 800dc06:	b92b      	cbnz	r3, 800dc14 <__ieee754_pow+0x414>
 800dc08:	4bd4      	ldr	r3, [pc, #848]	; (800df5c <__ieee754_pow+0x75c>)
 800dc0a:	f7f2 fd0d 	bl	8000628 <__aeabi_dmul>
 800dc0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dc12:	460c      	mov	r4, r1
 800dc14:	1523      	asrs	r3, r4, #20
 800dc16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dc1a:	4413      	add	r3, r2
 800dc1c:	9305      	str	r3, [sp, #20]
 800dc1e:	4bd0      	ldr	r3, [pc, #832]	; (800df60 <__ieee754_pow+0x760>)
 800dc20:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dc24:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dc28:	429c      	cmp	r4, r3
 800dc2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dc2e:	dd08      	ble.n	800dc42 <__ieee754_pow+0x442>
 800dc30:	4bcc      	ldr	r3, [pc, #816]	; (800df64 <__ieee754_pow+0x764>)
 800dc32:	429c      	cmp	r4, r3
 800dc34:	f340 8162 	ble.w	800defc <__ieee754_pow+0x6fc>
 800dc38:	9b05      	ldr	r3, [sp, #20]
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	9305      	str	r3, [sp, #20]
 800dc3e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dc42:	2400      	movs	r4, #0
 800dc44:	00e3      	lsls	r3, r4, #3
 800dc46:	9307      	str	r3, [sp, #28]
 800dc48:	4bc7      	ldr	r3, [pc, #796]	; (800df68 <__ieee754_pow+0x768>)
 800dc4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dc4e:	ed93 7b00 	vldr	d7, [r3]
 800dc52:	4629      	mov	r1, r5
 800dc54:	ec53 2b17 	vmov	r2, r3, d7
 800dc58:	eeb0 9a47 	vmov.f32	s18, s14
 800dc5c:	eef0 9a67 	vmov.f32	s19, s15
 800dc60:	4682      	mov	sl, r0
 800dc62:	f7f2 fb29 	bl	80002b8 <__aeabi_dsub>
 800dc66:	4652      	mov	r2, sl
 800dc68:	4606      	mov	r6, r0
 800dc6a:	460f      	mov	r7, r1
 800dc6c:	462b      	mov	r3, r5
 800dc6e:	ec51 0b19 	vmov	r0, r1, d9
 800dc72:	f7f2 fb23 	bl	80002bc <__adddf3>
 800dc76:	4602      	mov	r2, r0
 800dc78:	460b      	mov	r3, r1
 800dc7a:	2000      	movs	r0, #0
 800dc7c:	49bb      	ldr	r1, [pc, #748]	; (800df6c <__ieee754_pow+0x76c>)
 800dc7e:	f7f2 fdfd 	bl	800087c <__aeabi_ddiv>
 800dc82:	ec41 0b1a 	vmov	d10, r0, r1
 800dc86:	4602      	mov	r2, r0
 800dc88:	460b      	mov	r3, r1
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	4639      	mov	r1, r7
 800dc8e:	f7f2 fccb 	bl	8000628 <__aeabi_dmul>
 800dc92:	2300      	movs	r3, #0
 800dc94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc98:	9302      	str	r3, [sp, #8]
 800dc9a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dc9e:	46ab      	mov	fp, r5
 800dca0:	106d      	asrs	r5, r5, #1
 800dca2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dca6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dcaa:	ec41 0b18 	vmov	d8, r0, r1
 800dcae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	4640      	mov	r0, r8
 800dcb6:	4649      	mov	r1, r9
 800dcb8:	4614      	mov	r4, r2
 800dcba:	461d      	mov	r5, r3
 800dcbc:	f7f2 fcb4 	bl	8000628 <__aeabi_dmul>
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	4639      	mov	r1, r7
 800dcc8:	f7f2 faf6 	bl	80002b8 <__aeabi_dsub>
 800dccc:	ec53 2b19 	vmov	r2, r3, d9
 800dcd0:	4606      	mov	r6, r0
 800dcd2:	460f      	mov	r7, r1
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	f7f2 faee 	bl	80002b8 <__aeabi_dsub>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	460b      	mov	r3, r1
 800dce0:	4650      	mov	r0, sl
 800dce2:	4659      	mov	r1, fp
 800dce4:	f7f2 fae8 	bl	80002b8 <__aeabi_dsub>
 800dce8:	4642      	mov	r2, r8
 800dcea:	464b      	mov	r3, r9
 800dcec:	f7f2 fc9c 	bl	8000628 <__aeabi_dmul>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	4639      	mov	r1, r7
 800dcf8:	f7f2 fade 	bl	80002b8 <__aeabi_dsub>
 800dcfc:	ec53 2b1a 	vmov	r2, r3, d10
 800dd00:	f7f2 fc92 	bl	8000628 <__aeabi_dmul>
 800dd04:	ec53 2b18 	vmov	r2, r3, d8
 800dd08:	ec41 0b19 	vmov	d9, r0, r1
 800dd0c:	ec51 0b18 	vmov	r0, r1, d8
 800dd10:	f7f2 fc8a 	bl	8000628 <__aeabi_dmul>
 800dd14:	a37c      	add	r3, pc, #496	; (adr r3, 800df08 <__ieee754_pow+0x708>)
 800dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	460d      	mov	r5, r1
 800dd1e:	f7f2 fc83 	bl	8000628 <__aeabi_dmul>
 800dd22:	a37b      	add	r3, pc, #492	; (adr r3, 800df10 <__ieee754_pow+0x710>)
 800dd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd28:	f7f2 fac8 	bl	80002bc <__adddf3>
 800dd2c:	4622      	mov	r2, r4
 800dd2e:	462b      	mov	r3, r5
 800dd30:	f7f2 fc7a 	bl	8000628 <__aeabi_dmul>
 800dd34:	a378      	add	r3, pc, #480	; (adr r3, 800df18 <__ieee754_pow+0x718>)
 800dd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3a:	f7f2 fabf 	bl	80002bc <__adddf3>
 800dd3e:	4622      	mov	r2, r4
 800dd40:	462b      	mov	r3, r5
 800dd42:	f7f2 fc71 	bl	8000628 <__aeabi_dmul>
 800dd46:	a376      	add	r3, pc, #472	; (adr r3, 800df20 <__ieee754_pow+0x720>)
 800dd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4c:	f7f2 fab6 	bl	80002bc <__adddf3>
 800dd50:	4622      	mov	r2, r4
 800dd52:	462b      	mov	r3, r5
 800dd54:	f7f2 fc68 	bl	8000628 <__aeabi_dmul>
 800dd58:	a373      	add	r3, pc, #460	; (adr r3, 800df28 <__ieee754_pow+0x728>)
 800dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5e:	f7f2 faad 	bl	80002bc <__adddf3>
 800dd62:	4622      	mov	r2, r4
 800dd64:	462b      	mov	r3, r5
 800dd66:	f7f2 fc5f 	bl	8000628 <__aeabi_dmul>
 800dd6a:	a371      	add	r3, pc, #452	; (adr r3, 800df30 <__ieee754_pow+0x730>)
 800dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd70:	f7f2 faa4 	bl	80002bc <__adddf3>
 800dd74:	4622      	mov	r2, r4
 800dd76:	4606      	mov	r6, r0
 800dd78:	460f      	mov	r7, r1
 800dd7a:	462b      	mov	r3, r5
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	4629      	mov	r1, r5
 800dd80:	f7f2 fc52 	bl	8000628 <__aeabi_dmul>
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	4630      	mov	r0, r6
 800dd8a:	4639      	mov	r1, r7
 800dd8c:	f7f2 fc4c 	bl	8000628 <__aeabi_dmul>
 800dd90:	4642      	mov	r2, r8
 800dd92:	4604      	mov	r4, r0
 800dd94:	460d      	mov	r5, r1
 800dd96:	464b      	mov	r3, r9
 800dd98:	ec51 0b18 	vmov	r0, r1, d8
 800dd9c:	f7f2 fa8e 	bl	80002bc <__adddf3>
 800dda0:	ec53 2b19 	vmov	r2, r3, d9
 800dda4:	f7f2 fc40 	bl	8000628 <__aeabi_dmul>
 800dda8:	4622      	mov	r2, r4
 800ddaa:	462b      	mov	r3, r5
 800ddac:	f7f2 fa86 	bl	80002bc <__adddf3>
 800ddb0:	4642      	mov	r2, r8
 800ddb2:	4682      	mov	sl, r0
 800ddb4:	468b      	mov	fp, r1
 800ddb6:	464b      	mov	r3, r9
 800ddb8:	4640      	mov	r0, r8
 800ddba:	4649      	mov	r1, r9
 800ddbc:	f7f2 fc34 	bl	8000628 <__aeabi_dmul>
 800ddc0:	4b6b      	ldr	r3, [pc, #428]	; (800df70 <__ieee754_pow+0x770>)
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	4606      	mov	r6, r0
 800ddc6:	460f      	mov	r7, r1
 800ddc8:	f7f2 fa78 	bl	80002bc <__adddf3>
 800ddcc:	4652      	mov	r2, sl
 800ddce:	465b      	mov	r3, fp
 800ddd0:	f7f2 fa74 	bl	80002bc <__adddf3>
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	4604      	mov	r4, r0
 800ddd8:	460d      	mov	r5, r1
 800ddda:	4602      	mov	r2, r0
 800dddc:	460b      	mov	r3, r1
 800ddde:	4640      	mov	r0, r8
 800dde0:	4649      	mov	r1, r9
 800dde2:	f7f2 fc21 	bl	8000628 <__aeabi_dmul>
 800dde6:	4b62      	ldr	r3, [pc, #392]	; (800df70 <__ieee754_pow+0x770>)
 800dde8:	4680      	mov	r8, r0
 800ddea:	4689      	mov	r9, r1
 800ddec:	2200      	movs	r2, #0
 800ddee:	4620      	mov	r0, r4
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	f7f2 fa61 	bl	80002b8 <__aeabi_dsub>
 800ddf6:	4632      	mov	r2, r6
 800ddf8:	463b      	mov	r3, r7
 800ddfa:	f7f2 fa5d 	bl	80002b8 <__aeabi_dsub>
 800ddfe:	4602      	mov	r2, r0
 800de00:	460b      	mov	r3, r1
 800de02:	4650      	mov	r0, sl
 800de04:	4659      	mov	r1, fp
 800de06:	f7f2 fa57 	bl	80002b8 <__aeabi_dsub>
 800de0a:	ec53 2b18 	vmov	r2, r3, d8
 800de0e:	f7f2 fc0b 	bl	8000628 <__aeabi_dmul>
 800de12:	4622      	mov	r2, r4
 800de14:	4606      	mov	r6, r0
 800de16:	460f      	mov	r7, r1
 800de18:	462b      	mov	r3, r5
 800de1a:	ec51 0b19 	vmov	r0, r1, d9
 800de1e:	f7f2 fc03 	bl	8000628 <__aeabi_dmul>
 800de22:	4602      	mov	r2, r0
 800de24:	460b      	mov	r3, r1
 800de26:	4630      	mov	r0, r6
 800de28:	4639      	mov	r1, r7
 800de2a:	f7f2 fa47 	bl	80002bc <__adddf3>
 800de2e:	4606      	mov	r6, r0
 800de30:	460f      	mov	r7, r1
 800de32:	4602      	mov	r2, r0
 800de34:	460b      	mov	r3, r1
 800de36:	4640      	mov	r0, r8
 800de38:	4649      	mov	r1, r9
 800de3a:	f7f2 fa3f 	bl	80002bc <__adddf3>
 800de3e:	a33e      	add	r3, pc, #248	; (adr r3, 800df38 <__ieee754_pow+0x738>)
 800de40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de44:	2000      	movs	r0, #0
 800de46:	4604      	mov	r4, r0
 800de48:	460d      	mov	r5, r1
 800de4a:	f7f2 fbed 	bl	8000628 <__aeabi_dmul>
 800de4e:	4642      	mov	r2, r8
 800de50:	ec41 0b18 	vmov	d8, r0, r1
 800de54:	464b      	mov	r3, r9
 800de56:	4620      	mov	r0, r4
 800de58:	4629      	mov	r1, r5
 800de5a:	f7f2 fa2d 	bl	80002b8 <__aeabi_dsub>
 800de5e:	4602      	mov	r2, r0
 800de60:	460b      	mov	r3, r1
 800de62:	4630      	mov	r0, r6
 800de64:	4639      	mov	r1, r7
 800de66:	f7f2 fa27 	bl	80002b8 <__aeabi_dsub>
 800de6a:	a335      	add	r3, pc, #212	; (adr r3, 800df40 <__ieee754_pow+0x740>)
 800de6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de70:	f7f2 fbda 	bl	8000628 <__aeabi_dmul>
 800de74:	a334      	add	r3, pc, #208	; (adr r3, 800df48 <__ieee754_pow+0x748>)
 800de76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7a:	4606      	mov	r6, r0
 800de7c:	460f      	mov	r7, r1
 800de7e:	4620      	mov	r0, r4
 800de80:	4629      	mov	r1, r5
 800de82:	f7f2 fbd1 	bl	8000628 <__aeabi_dmul>
 800de86:	4602      	mov	r2, r0
 800de88:	460b      	mov	r3, r1
 800de8a:	4630      	mov	r0, r6
 800de8c:	4639      	mov	r1, r7
 800de8e:	f7f2 fa15 	bl	80002bc <__adddf3>
 800de92:	9a07      	ldr	r2, [sp, #28]
 800de94:	4b37      	ldr	r3, [pc, #220]	; (800df74 <__ieee754_pow+0x774>)
 800de96:	4413      	add	r3, r2
 800de98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9c:	f7f2 fa0e 	bl	80002bc <__adddf3>
 800dea0:	4682      	mov	sl, r0
 800dea2:	9805      	ldr	r0, [sp, #20]
 800dea4:	468b      	mov	fp, r1
 800dea6:	f7f2 fb55 	bl	8000554 <__aeabi_i2d>
 800deaa:	9a07      	ldr	r2, [sp, #28]
 800deac:	4b32      	ldr	r3, [pc, #200]	; (800df78 <__ieee754_pow+0x778>)
 800deae:	4413      	add	r3, r2
 800deb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800deb4:	4606      	mov	r6, r0
 800deb6:	460f      	mov	r7, r1
 800deb8:	4652      	mov	r2, sl
 800deba:	465b      	mov	r3, fp
 800debc:	ec51 0b18 	vmov	r0, r1, d8
 800dec0:	f7f2 f9fc 	bl	80002bc <__adddf3>
 800dec4:	4642      	mov	r2, r8
 800dec6:	464b      	mov	r3, r9
 800dec8:	f7f2 f9f8 	bl	80002bc <__adddf3>
 800decc:	4632      	mov	r2, r6
 800dece:	463b      	mov	r3, r7
 800ded0:	f7f2 f9f4 	bl	80002bc <__adddf3>
 800ded4:	2000      	movs	r0, #0
 800ded6:	4632      	mov	r2, r6
 800ded8:	463b      	mov	r3, r7
 800deda:	4604      	mov	r4, r0
 800dedc:	460d      	mov	r5, r1
 800dede:	f7f2 f9eb 	bl	80002b8 <__aeabi_dsub>
 800dee2:	4642      	mov	r2, r8
 800dee4:	464b      	mov	r3, r9
 800dee6:	f7f2 f9e7 	bl	80002b8 <__aeabi_dsub>
 800deea:	ec53 2b18 	vmov	r2, r3, d8
 800deee:	f7f2 f9e3 	bl	80002b8 <__aeabi_dsub>
 800def2:	4602      	mov	r2, r0
 800def4:	460b      	mov	r3, r1
 800def6:	4650      	mov	r0, sl
 800def8:	4659      	mov	r1, fp
 800defa:	e610      	b.n	800db1e <__ieee754_pow+0x31e>
 800defc:	2401      	movs	r4, #1
 800defe:	e6a1      	b.n	800dc44 <__ieee754_pow+0x444>
 800df00:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800df50 <__ieee754_pow+0x750>
 800df04:	e617      	b.n	800db36 <__ieee754_pow+0x336>
 800df06:	bf00      	nop
 800df08:	4a454eef 	.word	0x4a454eef
 800df0c:	3fca7e28 	.word	0x3fca7e28
 800df10:	93c9db65 	.word	0x93c9db65
 800df14:	3fcd864a 	.word	0x3fcd864a
 800df18:	a91d4101 	.word	0xa91d4101
 800df1c:	3fd17460 	.word	0x3fd17460
 800df20:	518f264d 	.word	0x518f264d
 800df24:	3fd55555 	.word	0x3fd55555
 800df28:	db6fabff 	.word	0xdb6fabff
 800df2c:	3fdb6db6 	.word	0x3fdb6db6
 800df30:	33333303 	.word	0x33333303
 800df34:	3fe33333 	.word	0x3fe33333
 800df38:	e0000000 	.word	0xe0000000
 800df3c:	3feec709 	.word	0x3feec709
 800df40:	dc3a03fd 	.word	0xdc3a03fd
 800df44:	3feec709 	.word	0x3feec709
 800df48:	145b01f5 	.word	0x145b01f5
 800df4c:	be3e2fe0 	.word	0xbe3e2fe0
 800df50:	00000000 	.word	0x00000000
 800df54:	3ff00000 	.word	0x3ff00000
 800df58:	7ff00000 	.word	0x7ff00000
 800df5c:	43400000 	.word	0x43400000
 800df60:	0003988e 	.word	0x0003988e
 800df64:	000bb679 	.word	0x000bb679
 800df68:	0800eaf0 	.word	0x0800eaf0
 800df6c:	3ff00000 	.word	0x3ff00000
 800df70:	40080000 	.word	0x40080000
 800df74:	0800eb10 	.word	0x0800eb10
 800df78:	0800eb00 	.word	0x0800eb00
 800df7c:	a3b3      	add	r3, pc, #716	; (adr r3, 800e24c <__ieee754_pow+0xa4c>)
 800df7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df82:	4640      	mov	r0, r8
 800df84:	4649      	mov	r1, r9
 800df86:	f7f2 f999 	bl	80002bc <__adddf3>
 800df8a:	4622      	mov	r2, r4
 800df8c:	ec41 0b1a 	vmov	d10, r0, r1
 800df90:	462b      	mov	r3, r5
 800df92:	4630      	mov	r0, r6
 800df94:	4639      	mov	r1, r7
 800df96:	f7f2 f98f 	bl	80002b8 <__aeabi_dsub>
 800df9a:	4602      	mov	r2, r0
 800df9c:	460b      	mov	r3, r1
 800df9e:	ec51 0b1a 	vmov	r0, r1, d10
 800dfa2:	f7f2 fdd1 	bl	8000b48 <__aeabi_dcmpgt>
 800dfa6:	2800      	cmp	r0, #0
 800dfa8:	f47f ae04 	bne.w	800dbb4 <__ieee754_pow+0x3b4>
 800dfac:	4aa2      	ldr	r2, [pc, #648]	; (800e238 <__ieee754_pow+0xa38>)
 800dfae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	f340 8107 	ble.w	800e1c6 <__ieee754_pow+0x9c6>
 800dfb8:	151b      	asrs	r3, r3, #20
 800dfba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dfbe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dfc2:	fa4a fa03 	asr.w	sl, sl, r3
 800dfc6:	44da      	add	sl, fp
 800dfc8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800dfcc:	489b      	ldr	r0, [pc, #620]	; (800e23c <__ieee754_pow+0xa3c>)
 800dfce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dfd2:	4108      	asrs	r0, r1
 800dfd4:	ea00 030a 	and.w	r3, r0, sl
 800dfd8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800dfdc:	f1c1 0114 	rsb	r1, r1, #20
 800dfe0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dfe4:	fa4a fa01 	asr.w	sl, sl, r1
 800dfe8:	f1bb 0f00 	cmp.w	fp, #0
 800dfec:	f04f 0200 	mov.w	r2, #0
 800dff0:	4620      	mov	r0, r4
 800dff2:	4629      	mov	r1, r5
 800dff4:	bfb8      	it	lt
 800dff6:	f1ca 0a00 	rsblt	sl, sl, #0
 800dffa:	f7f2 f95d 	bl	80002b8 <__aeabi_dsub>
 800dffe:	ec41 0b19 	vmov	d9, r0, r1
 800e002:	4642      	mov	r2, r8
 800e004:	464b      	mov	r3, r9
 800e006:	ec51 0b19 	vmov	r0, r1, d9
 800e00a:	f7f2 f957 	bl	80002bc <__adddf3>
 800e00e:	a37a      	add	r3, pc, #488	; (adr r3, 800e1f8 <__ieee754_pow+0x9f8>)
 800e010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e014:	2000      	movs	r0, #0
 800e016:	4604      	mov	r4, r0
 800e018:	460d      	mov	r5, r1
 800e01a:	f7f2 fb05 	bl	8000628 <__aeabi_dmul>
 800e01e:	ec53 2b19 	vmov	r2, r3, d9
 800e022:	4606      	mov	r6, r0
 800e024:	460f      	mov	r7, r1
 800e026:	4620      	mov	r0, r4
 800e028:	4629      	mov	r1, r5
 800e02a:	f7f2 f945 	bl	80002b8 <__aeabi_dsub>
 800e02e:	4602      	mov	r2, r0
 800e030:	460b      	mov	r3, r1
 800e032:	4640      	mov	r0, r8
 800e034:	4649      	mov	r1, r9
 800e036:	f7f2 f93f 	bl	80002b8 <__aeabi_dsub>
 800e03a:	a371      	add	r3, pc, #452	; (adr r3, 800e200 <__ieee754_pow+0xa00>)
 800e03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e040:	f7f2 faf2 	bl	8000628 <__aeabi_dmul>
 800e044:	a370      	add	r3, pc, #448	; (adr r3, 800e208 <__ieee754_pow+0xa08>)
 800e046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04a:	4680      	mov	r8, r0
 800e04c:	4689      	mov	r9, r1
 800e04e:	4620      	mov	r0, r4
 800e050:	4629      	mov	r1, r5
 800e052:	f7f2 fae9 	bl	8000628 <__aeabi_dmul>
 800e056:	4602      	mov	r2, r0
 800e058:	460b      	mov	r3, r1
 800e05a:	4640      	mov	r0, r8
 800e05c:	4649      	mov	r1, r9
 800e05e:	f7f2 f92d 	bl	80002bc <__adddf3>
 800e062:	4604      	mov	r4, r0
 800e064:	460d      	mov	r5, r1
 800e066:	4602      	mov	r2, r0
 800e068:	460b      	mov	r3, r1
 800e06a:	4630      	mov	r0, r6
 800e06c:	4639      	mov	r1, r7
 800e06e:	f7f2 f925 	bl	80002bc <__adddf3>
 800e072:	4632      	mov	r2, r6
 800e074:	463b      	mov	r3, r7
 800e076:	4680      	mov	r8, r0
 800e078:	4689      	mov	r9, r1
 800e07a:	f7f2 f91d 	bl	80002b8 <__aeabi_dsub>
 800e07e:	4602      	mov	r2, r0
 800e080:	460b      	mov	r3, r1
 800e082:	4620      	mov	r0, r4
 800e084:	4629      	mov	r1, r5
 800e086:	f7f2 f917 	bl	80002b8 <__aeabi_dsub>
 800e08a:	4642      	mov	r2, r8
 800e08c:	4606      	mov	r6, r0
 800e08e:	460f      	mov	r7, r1
 800e090:	464b      	mov	r3, r9
 800e092:	4640      	mov	r0, r8
 800e094:	4649      	mov	r1, r9
 800e096:	f7f2 fac7 	bl	8000628 <__aeabi_dmul>
 800e09a:	a35d      	add	r3, pc, #372	; (adr r3, 800e210 <__ieee754_pow+0xa10>)
 800e09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a0:	4604      	mov	r4, r0
 800e0a2:	460d      	mov	r5, r1
 800e0a4:	f7f2 fac0 	bl	8000628 <__aeabi_dmul>
 800e0a8:	a35b      	add	r3, pc, #364	; (adr r3, 800e218 <__ieee754_pow+0xa18>)
 800e0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ae:	f7f2 f903 	bl	80002b8 <__aeabi_dsub>
 800e0b2:	4622      	mov	r2, r4
 800e0b4:	462b      	mov	r3, r5
 800e0b6:	f7f2 fab7 	bl	8000628 <__aeabi_dmul>
 800e0ba:	a359      	add	r3, pc, #356	; (adr r3, 800e220 <__ieee754_pow+0xa20>)
 800e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c0:	f7f2 f8fc 	bl	80002bc <__adddf3>
 800e0c4:	4622      	mov	r2, r4
 800e0c6:	462b      	mov	r3, r5
 800e0c8:	f7f2 faae 	bl	8000628 <__aeabi_dmul>
 800e0cc:	a356      	add	r3, pc, #344	; (adr r3, 800e228 <__ieee754_pow+0xa28>)
 800e0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d2:	f7f2 f8f1 	bl	80002b8 <__aeabi_dsub>
 800e0d6:	4622      	mov	r2, r4
 800e0d8:	462b      	mov	r3, r5
 800e0da:	f7f2 faa5 	bl	8000628 <__aeabi_dmul>
 800e0de:	a354      	add	r3, pc, #336	; (adr r3, 800e230 <__ieee754_pow+0xa30>)
 800e0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e4:	f7f2 f8ea 	bl	80002bc <__adddf3>
 800e0e8:	4622      	mov	r2, r4
 800e0ea:	462b      	mov	r3, r5
 800e0ec:	f7f2 fa9c 	bl	8000628 <__aeabi_dmul>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	4640      	mov	r0, r8
 800e0f6:	4649      	mov	r1, r9
 800e0f8:	f7f2 f8de 	bl	80002b8 <__aeabi_dsub>
 800e0fc:	4604      	mov	r4, r0
 800e0fe:	460d      	mov	r5, r1
 800e100:	4602      	mov	r2, r0
 800e102:	460b      	mov	r3, r1
 800e104:	4640      	mov	r0, r8
 800e106:	4649      	mov	r1, r9
 800e108:	f7f2 fa8e 	bl	8000628 <__aeabi_dmul>
 800e10c:	2200      	movs	r2, #0
 800e10e:	ec41 0b19 	vmov	d9, r0, r1
 800e112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e116:	4620      	mov	r0, r4
 800e118:	4629      	mov	r1, r5
 800e11a:	f7f2 f8cd 	bl	80002b8 <__aeabi_dsub>
 800e11e:	4602      	mov	r2, r0
 800e120:	460b      	mov	r3, r1
 800e122:	ec51 0b19 	vmov	r0, r1, d9
 800e126:	f7f2 fba9 	bl	800087c <__aeabi_ddiv>
 800e12a:	4632      	mov	r2, r6
 800e12c:	4604      	mov	r4, r0
 800e12e:	460d      	mov	r5, r1
 800e130:	463b      	mov	r3, r7
 800e132:	4640      	mov	r0, r8
 800e134:	4649      	mov	r1, r9
 800e136:	f7f2 fa77 	bl	8000628 <__aeabi_dmul>
 800e13a:	4632      	mov	r2, r6
 800e13c:	463b      	mov	r3, r7
 800e13e:	f7f2 f8bd 	bl	80002bc <__adddf3>
 800e142:	4602      	mov	r2, r0
 800e144:	460b      	mov	r3, r1
 800e146:	4620      	mov	r0, r4
 800e148:	4629      	mov	r1, r5
 800e14a:	f7f2 f8b5 	bl	80002b8 <__aeabi_dsub>
 800e14e:	4642      	mov	r2, r8
 800e150:	464b      	mov	r3, r9
 800e152:	f7f2 f8b1 	bl	80002b8 <__aeabi_dsub>
 800e156:	460b      	mov	r3, r1
 800e158:	4602      	mov	r2, r0
 800e15a:	4939      	ldr	r1, [pc, #228]	; (800e240 <__ieee754_pow+0xa40>)
 800e15c:	2000      	movs	r0, #0
 800e15e:	f7f2 f8ab 	bl	80002b8 <__aeabi_dsub>
 800e162:	ec41 0b10 	vmov	d0, r0, r1
 800e166:	ee10 3a90 	vmov	r3, s1
 800e16a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e16e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e172:	da2b      	bge.n	800e1cc <__ieee754_pow+0x9cc>
 800e174:	4650      	mov	r0, sl
 800e176:	f000 f9f3 	bl	800e560 <scalbn>
 800e17a:	ec51 0b10 	vmov	r0, r1, d0
 800e17e:	ec53 2b18 	vmov	r2, r3, d8
 800e182:	f7ff bbee 	b.w	800d962 <__ieee754_pow+0x162>
 800e186:	4b2f      	ldr	r3, [pc, #188]	; (800e244 <__ieee754_pow+0xa44>)
 800e188:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e18c:	429e      	cmp	r6, r3
 800e18e:	f77f af0d 	ble.w	800dfac <__ieee754_pow+0x7ac>
 800e192:	4b2d      	ldr	r3, [pc, #180]	; (800e248 <__ieee754_pow+0xa48>)
 800e194:	440b      	add	r3, r1
 800e196:	4303      	orrs	r3, r0
 800e198:	d009      	beq.n	800e1ae <__ieee754_pow+0x9ae>
 800e19a:	ec51 0b18 	vmov	r0, r1, d8
 800e19e:	2200      	movs	r2, #0
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	f7f2 fcb3 	bl	8000b0c <__aeabi_dcmplt>
 800e1a6:	3800      	subs	r0, #0
 800e1a8:	bf18      	it	ne
 800e1aa:	2001      	movne	r0, #1
 800e1ac:	e448      	b.n	800da40 <__ieee754_pow+0x240>
 800e1ae:	4622      	mov	r2, r4
 800e1b0:	462b      	mov	r3, r5
 800e1b2:	f7f2 f881 	bl	80002b8 <__aeabi_dsub>
 800e1b6:	4642      	mov	r2, r8
 800e1b8:	464b      	mov	r3, r9
 800e1ba:	f7f2 fcbb 	bl	8000b34 <__aeabi_dcmpge>
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	f43f aef4 	beq.w	800dfac <__ieee754_pow+0x7ac>
 800e1c4:	e7e9      	b.n	800e19a <__ieee754_pow+0x99a>
 800e1c6:	f04f 0a00 	mov.w	sl, #0
 800e1ca:	e71a      	b.n	800e002 <__ieee754_pow+0x802>
 800e1cc:	ec51 0b10 	vmov	r0, r1, d0
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	e7d4      	b.n	800e17e <__ieee754_pow+0x97e>
 800e1d4:	491a      	ldr	r1, [pc, #104]	; (800e240 <__ieee754_pow+0xa40>)
 800e1d6:	2000      	movs	r0, #0
 800e1d8:	f7ff bb31 	b.w	800d83e <__ieee754_pow+0x3e>
 800e1dc:	2000      	movs	r0, #0
 800e1de:	2100      	movs	r1, #0
 800e1e0:	f7ff bb2d 	b.w	800d83e <__ieee754_pow+0x3e>
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	4639      	mov	r1, r7
 800e1e8:	f7ff bb29 	b.w	800d83e <__ieee754_pow+0x3e>
 800e1ec:	9204      	str	r2, [sp, #16]
 800e1ee:	f7ff bb7b 	b.w	800d8e8 <__ieee754_pow+0xe8>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f7ff bb65 	b.w	800d8c2 <__ieee754_pow+0xc2>
 800e1f8:	00000000 	.word	0x00000000
 800e1fc:	3fe62e43 	.word	0x3fe62e43
 800e200:	fefa39ef 	.word	0xfefa39ef
 800e204:	3fe62e42 	.word	0x3fe62e42
 800e208:	0ca86c39 	.word	0x0ca86c39
 800e20c:	be205c61 	.word	0xbe205c61
 800e210:	72bea4d0 	.word	0x72bea4d0
 800e214:	3e663769 	.word	0x3e663769
 800e218:	c5d26bf1 	.word	0xc5d26bf1
 800e21c:	3ebbbd41 	.word	0x3ebbbd41
 800e220:	af25de2c 	.word	0xaf25de2c
 800e224:	3f11566a 	.word	0x3f11566a
 800e228:	16bebd93 	.word	0x16bebd93
 800e22c:	3f66c16c 	.word	0x3f66c16c
 800e230:	5555553e 	.word	0x5555553e
 800e234:	3fc55555 	.word	0x3fc55555
 800e238:	3fe00000 	.word	0x3fe00000
 800e23c:	fff00000 	.word	0xfff00000
 800e240:	3ff00000 	.word	0x3ff00000
 800e244:	4090cbff 	.word	0x4090cbff
 800e248:	3f6f3400 	.word	0x3f6f3400
 800e24c:	652b82fe 	.word	0x652b82fe
 800e250:	3c971547 	.word	0x3c971547

0800e254 <fabs>:
 800e254:	ec51 0b10 	vmov	r0, r1, d0
 800e258:	ee10 2a10 	vmov	r2, s0
 800e25c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e260:	ec43 2b10 	vmov	d0, r2, r3
 800e264:	4770      	bx	lr
	...

0800e268 <__ieee754_atan2f>:
 800e268:	ee10 2a90 	vmov	r2, s1
 800e26c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800e270:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e274:	b510      	push	{r4, lr}
 800e276:	eef0 7a40 	vmov.f32	s15, s0
 800e27a:	dc06      	bgt.n	800e28a <__ieee754_atan2f+0x22>
 800e27c:	ee10 0a10 	vmov	r0, s0
 800e280:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e284:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e288:	dd04      	ble.n	800e294 <__ieee754_atan2f+0x2c>
 800e28a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e28e:	eeb0 0a67 	vmov.f32	s0, s15
 800e292:	bd10      	pop	{r4, pc}
 800e294:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800e298:	d103      	bne.n	800e2a2 <__ieee754_atan2f+0x3a>
 800e29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e29e:	f000 b883 	b.w	800e3a8 <atanf>
 800e2a2:	1794      	asrs	r4, r2, #30
 800e2a4:	f004 0402 	and.w	r4, r4, #2
 800e2a8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800e2ac:	b943      	cbnz	r3, 800e2c0 <__ieee754_atan2f+0x58>
 800e2ae:	2c02      	cmp	r4, #2
 800e2b0:	d05e      	beq.n	800e370 <__ieee754_atan2f+0x108>
 800e2b2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e384 <__ieee754_atan2f+0x11c>
 800e2b6:	2c03      	cmp	r4, #3
 800e2b8:	bf08      	it	eq
 800e2ba:	eef0 7a47 	vmoveq.f32	s15, s14
 800e2be:	e7e6      	b.n	800e28e <__ieee754_atan2f+0x26>
 800e2c0:	b941      	cbnz	r1, 800e2d4 <__ieee754_atan2f+0x6c>
 800e2c2:	eddf 7a31 	vldr	s15, [pc, #196]	; 800e388 <__ieee754_atan2f+0x120>
 800e2c6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800e38c <__ieee754_atan2f+0x124>
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	bfb8      	it	lt
 800e2ce:	eef0 7a47 	vmovlt.f32	s15, s14
 800e2d2:	e7dc      	b.n	800e28e <__ieee754_atan2f+0x26>
 800e2d4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e2d8:	d110      	bne.n	800e2fc <__ieee754_atan2f+0x94>
 800e2da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e2de:	f104 34ff 	add.w	r4, r4, #4294967295
 800e2e2:	d107      	bne.n	800e2f4 <__ieee754_atan2f+0x8c>
 800e2e4:	2c02      	cmp	r4, #2
 800e2e6:	d846      	bhi.n	800e376 <__ieee754_atan2f+0x10e>
 800e2e8:	4b29      	ldr	r3, [pc, #164]	; (800e390 <__ieee754_atan2f+0x128>)
 800e2ea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e2ee:	edd3 7a00 	vldr	s15, [r3]
 800e2f2:	e7cc      	b.n	800e28e <__ieee754_atan2f+0x26>
 800e2f4:	2c02      	cmp	r4, #2
 800e2f6:	d841      	bhi.n	800e37c <__ieee754_atan2f+0x114>
 800e2f8:	4b26      	ldr	r3, [pc, #152]	; (800e394 <__ieee754_atan2f+0x12c>)
 800e2fa:	e7f6      	b.n	800e2ea <__ieee754_atan2f+0x82>
 800e2fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e300:	d0df      	beq.n	800e2c2 <__ieee754_atan2f+0x5a>
 800e302:	1a5b      	subs	r3, r3, r1
 800e304:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800e308:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800e30c:	da1a      	bge.n	800e344 <__ieee754_atan2f+0xdc>
 800e30e:	2a00      	cmp	r2, #0
 800e310:	da01      	bge.n	800e316 <__ieee754_atan2f+0xae>
 800e312:	313c      	adds	r1, #60	; 0x3c
 800e314:	db19      	blt.n	800e34a <__ieee754_atan2f+0xe2>
 800e316:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800e31a:	f000 f919 	bl	800e550 <fabsf>
 800e31e:	f000 f843 	bl	800e3a8 <atanf>
 800e322:	eef0 7a40 	vmov.f32	s15, s0
 800e326:	2c01      	cmp	r4, #1
 800e328:	d012      	beq.n	800e350 <__ieee754_atan2f+0xe8>
 800e32a:	2c02      	cmp	r4, #2
 800e32c:	d017      	beq.n	800e35e <__ieee754_atan2f+0xf6>
 800e32e:	2c00      	cmp	r4, #0
 800e330:	d0ad      	beq.n	800e28e <__ieee754_atan2f+0x26>
 800e332:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800e398 <__ieee754_atan2f+0x130>
 800e336:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e33a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800e39c <__ieee754_atan2f+0x134>
 800e33e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e342:	e7a4      	b.n	800e28e <__ieee754_atan2f+0x26>
 800e344:	eddf 7a10 	vldr	s15, [pc, #64]	; 800e388 <__ieee754_atan2f+0x120>
 800e348:	e7ed      	b.n	800e326 <__ieee754_atan2f+0xbe>
 800e34a:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e3a0 <__ieee754_atan2f+0x138>
 800e34e:	e7ea      	b.n	800e326 <__ieee754_atan2f+0xbe>
 800e350:	ee17 3a90 	vmov	r3, s15
 800e354:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e358:	ee07 3a90 	vmov	s15, r3
 800e35c:	e797      	b.n	800e28e <__ieee754_atan2f+0x26>
 800e35e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800e398 <__ieee754_atan2f+0x130>
 800e362:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e366:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800e39c <__ieee754_atan2f+0x134>
 800e36a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e36e:	e78e      	b.n	800e28e <__ieee754_atan2f+0x26>
 800e370:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800e39c <__ieee754_atan2f+0x134>
 800e374:	e78b      	b.n	800e28e <__ieee754_atan2f+0x26>
 800e376:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e3a4 <__ieee754_atan2f+0x13c>
 800e37a:	e788      	b.n	800e28e <__ieee754_atan2f+0x26>
 800e37c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e3a0 <__ieee754_atan2f+0x138>
 800e380:	e785      	b.n	800e28e <__ieee754_atan2f+0x26>
 800e382:	bf00      	nop
 800e384:	c0490fdb 	.word	0xc0490fdb
 800e388:	3fc90fdb 	.word	0x3fc90fdb
 800e38c:	bfc90fdb 	.word	0xbfc90fdb
 800e390:	0800eb20 	.word	0x0800eb20
 800e394:	0800eb2c 	.word	0x0800eb2c
 800e398:	33bbbd2e 	.word	0x33bbbd2e
 800e39c:	40490fdb 	.word	0x40490fdb
 800e3a0:	00000000 	.word	0x00000000
 800e3a4:	3f490fdb 	.word	0x3f490fdb

0800e3a8 <atanf>:
 800e3a8:	b538      	push	{r3, r4, r5, lr}
 800e3aa:	ee10 5a10 	vmov	r5, s0
 800e3ae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e3b2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800e3b6:	eef0 7a40 	vmov.f32	s15, s0
 800e3ba:	db10      	blt.n	800e3de <atanf+0x36>
 800e3bc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e3c0:	dd04      	ble.n	800e3cc <atanf+0x24>
 800e3c2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e3c6:	eeb0 0a67 	vmov.f32	s0, s15
 800e3ca:	bd38      	pop	{r3, r4, r5, pc}
 800e3cc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800e504 <atanf+0x15c>
 800e3d0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800e508 <atanf+0x160>
 800e3d4:	2d00      	cmp	r5, #0
 800e3d6:	bfd8      	it	le
 800e3d8:	eef0 7a47 	vmovle.f32	s15, s14
 800e3dc:	e7f3      	b.n	800e3c6 <atanf+0x1e>
 800e3de:	4b4b      	ldr	r3, [pc, #300]	; (800e50c <atanf+0x164>)
 800e3e0:	429c      	cmp	r4, r3
 800e3e2:	dc10      	bgt.n	800e406 <atanf+0x5e>
 800e3e4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800e3e8:	da0a      	bge.n	800e400 <atanf+0x58>
 800e3ea:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e510 <atanf+0x168>
 800e3ee:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e3f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e3f6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3fe:	dce2      	bgt.n	800e3c6 <atanf+0x1e>
 800e400:	f04f 33ff 	mov.w	r3, #4294967295
 800e404:	e013      	b.n	800e42e <atanf+0x86>
 800e406:	f000 f8a3 	bl	800e550 <fabsf>
 800e40a:	4b42      	ldr	r3, [pc, #264]	; (800e514 <atanf+0x16c>)
 800e40c:	429c      	cmp	r4, r3
 800e40e:	dc4f      	bgt.n	800e4b0 <atanf+0x108>
 800e410:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800e414:	429c      	cmp	r4, r3
 800e416:	dc41      	bgt.n	800e49c <atanf+0xf4>
 800e418:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e41c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e420:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e424:	2300      	movs	r3, #0
 800e426:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e42a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e42e:	1c5a      	adds	r2, r3, #1
 800e430:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e434:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e518 <atanf+0x170>
 800e438:	eddf 5a38 	vldr	s11, [pc, #224]	; 800e51c <atanf+0x174>
 800e43c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800e520 <atanf+0x178>
 800e440:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e444:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e448:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e524 <atanf+0x17c>
 800e44c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e450:	eddf 5a35 	vldr	s11, [pc, #212]	; 800e528 <atanf+0x180>
 800e454:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e458:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e52c <atanf+0x184>
 800e45c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e460:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e530 <atanf+0x188>
 800e464:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e468:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800e534 <atanf+0x18c>
 800e46c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e470:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800e538 <atanf+0x190>
 800e474:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e478:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800e53c <atanf+0x194>
 800e47c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e480:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800e540 <atanf+0x198>
 800e484:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e488:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e48c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e490:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e494:	d121      	bne.n	800e4da <atanf+0x132>
 800e496:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e49a:	e794      	b.n	800e3c6 <atanf+0x1e>
 800e49c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e4a0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e4a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e4ae:	e7be      	b.n	800e42e <atanf+0x86>
 800e4b0:	4b24      	ldr	r3, [pc, #144]	; (800e544 <atanf+0x19c>)
 800e4b2:	429c      	cmp	r4, r3
 800e4b4:	dc0b      	bgt.n	800e4ce <atanf+0x126>
 800e4b6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800e4ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e4be:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e4c2:	2302      	movs	r3, #2
 800e4c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e4c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4cc:	e7af      	b.n	800e42e <atanf+0x86>
 800e4ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e4d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e4d6:	2303      	movs	r3, #3
 800e4d8:	e7a9      	b.n	800e42e <atanf+0x86>
 800e4da:	4a1b      	ldr	r2, [pc, #108]	; (800e548 <atanf+0x1a0>)
 800e4dc:	491b      	ldr	r1, [pc, #108]	; (800e54c <atanf+0x1a4>)
 800e4de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e4e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e4e6:	edd3 6a00 	vldr	s13, [r3]
 800e4ea:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e4ee:	2d00      	cmp	r5, #0
 800e4f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e4f4:	edd2 7a00 	vldr	s15, [r2]
 800e4f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e4fc:	bfb8      	it	lt
 800e4fe:	eef1 7a67 	vneglt.f32	s15, s15
 800e502:	e760      	b.n	800e3c6 <atanf+0x1e>
 800e504:	3fc90fdb 	.word	0x3fc90fdb
 800e508:	bfc90fdb 	.word	0xbfc90fdb
 800e50c:	3edfffff 	.word	0x3edfffff
 800e510:	7149f2ca 	.word	0x7149f2ca
 800e514:	3f97ffff 	.word	0x3f97ffff
 800e518:	3c8569d7 	.word	0x3c8569d7
 800e51c:	3d4bda59 	.word	0x3d4bda59
 800e520:	bd6ef16b 	.word	0xbd6ef16b
 800e524:	3d886b35 	.word	0x3d886b35
 800e528:	3dba2e6e 	.word	0x3dba2e6e
 800e52c:	3e124925 	.word	0x3e124925
 800e530:	3eaaaaab 	.word	0x3eaaaaab
 800e534:	bd15a221 	.word	0xbd15a221
 800e538:	bd9d8795 	.word	0xbd9d8795
 800e53c:	bde38e38 	.word	0xbde38e38
 800e540:	be4ccccd 	.word	0xbe4ccccd
 800e544:	401bffff 	.word	0x401bffff
 800e548:	0800eb38 	.word	0x0800eb38
 800e54c:	0800eb48 	.word	0x0800eb48

0800e550 <fabsf>:
 800e550:	ee10 3a10 	vmov	r3, s0
 800e554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e558:	ee00 3a10 	vmov	s0, r3
 800e55c:	4770      	bx	lr
	...

0800e560 <scalbn>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	ec55 4b10 	vmov	r4, r5, d0
 800e566:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e56a:	4606      	mov	r6, r0
 800e56c:	462b      	mov	r3, r5
 800e56e:	b999      	cbnz	r1, 800e598 <scalbn+0x38>
 800e570:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e574:	4323      	orrs	r3, r4
 800e576:	d03f      	beq.n	800e5f8 <scalbn+0x98>
 800e578:	4b35      	ldr	r3, [pc, #212]	; (800e650 <scalbn+0xf0>)
 800e57a:	4629      	mov	r1, r5
 800e57c:	ee10 0a10 	vmov	r0, s0
 800e580:	2200      	movs	r2, #0
 800e582:	f7f2 f851 	bl	8000628 <__aeabi_dmul>
 800e586:	4b33      	ldr	r3, [pc, #204]	; (800e654 <scalbn+0xf4>)
 800e588:	429e      	cmp	r6, r3
 800e58a:	4604      	mov	r4, r0
 800e58c:	460d      	mov	r5, r1
 800e58e:	da10      	bge.n	800e5b2 <scalbn+0x52>
 800e590:	a327      	add	r3, pc, #156	; (adr r3, 800e630 <scalbn+0xd0>)
 800e592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e596:	e01f      	b.n	800e5d8 <scalbn+0x78>
 800e598:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e59c:	4291      	cmp	r1, r2
 800e59e:	d10c      	bne.n	800e5ba <scalbn+0x5a>
 800e5a0:	ee10 2a10 	vmov	r2, s0
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	4629      	mov	r1, r5
 800e5a8:	f7f1 fe88 	bl	80002bc <__adddf3>
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	460d      	mov	r5, r1
 800e5b0:	e022      	b.n	800e5f8 <scalbn+0x98>
 800e5b2:	460b      	mov	r3, r1
 800e5b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e5b8:	3936      	subs	r1, #54	; 0x36
 800e5ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e5be:	4296      	cmp	r6, r2
 800e5c0:	dd0d      	ble.n	800e5de <scalbn+0x7e>
 800e5c2:	2d00      	cmp	r5, #0
 800e5c4:	a11c      	add	r1, pc, #112	; (adr r1, 800e638 <scalbn+0xd8>)
 800e5c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5ca:	da02      	bge.n	800e5d2 <scalbn+0x72>
 800e5cc:	a11c      	add	r1, pc, #112	; (adr r1, 800e640 <scalbn+0xe0>)
 800e5ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5d2:	a319      	add	r3, pc, #100	; (adr r3, 800e638 <scalbn+0xd8>)
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	f7f2 f826 	bl	8000628 <__aeabi_dmul>
 800e5dc:	e7e6      	b.n	800e5ac <scalbn+0x4c>
 800e5de:	1872      	adds	r2, r6, r1
 800e5e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e5e4:	428a      	cmp	r2, r1
 800e5e6:	dcec      	bgt.n	800e5c2 <scalbn+0x62>
 800e5e8:	2a00      	cmp	r2, #0
 800e5ea:	dd08      	ble.n	800e5fe <scalbn+0x9e>
 800e5ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e5f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e5f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e5f8:	ec45 4b10 	vmov	d0, r4, r5
 800e5fc:	bd70      	pop	{r4, r5, r6, pc}
 800e5fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e602:	da08      	bge.n	800e616 <scalbn+0xb6>
 800e604:	2d00      	cmp	r5, #0
 800e606:	a10a      	add	r1, pc, #40	; (adr r1, 800e630 <scalbn+0xd0>)
 800e608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e60c:	dac0      	bge.n	800e590 <scalbn+0x30>
 800e60e:	a10e      	add	r1, pc, #56	; (adr r1, 800e648 <scalbn+0xe8>)
 800e610:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e614:	e7bc      	b.n	800e590 <scalbn+0x30>
 800e616:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e61a:	3236      	adds	r2, #54	; 0x36
 800e61c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e620:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e624:	4620      	mov	r0, r4
 800e626:	4b0c      	ldr	r3, [pc, #48]	; (800e658 <scalbn+0xf8>)
 800e628:	2200      	movs	r2, #0
 800e62a:	e7d5      	b.n	800e5d8 <scalbn+0x78>
 800e62c:	f3af 8000 	nop.w
 800e630:	c2f8f359 	.word	0xc2f8f359
 800e634:	01a56e1f 	.word	0x01a56e1f
 800e638:	8800759c 	.word	0x8800759c
 800e63c:	7e37e43c 	.word	0x7e37e43c
 800e640:	8800759c 	.word	0x8800759c
 800e644:	fe37e43c 	.word	0xfe37e43c
 800e648:	c2f8f359 	.word	0xc2f8f359
 800e64c:	81a56e1f 	.word	0x81a56e1f
 800e650:	43500000 	.word	0x43500000
 800e654:	ffff3cb0 	.word	0xffff3cb0
 800e658:	3c900000 	.word	0x3c900000

0800e65c <with_errno>:
 800e65c:	b570      	push	{r4, r5, r6, lr}
 800e65e:	4604      	mov	r4, r0
 800e660:	460d      	mov	r5, r1
 800e662:	4616      	mov	r6, r2
 800e664:	f7fd f96e 	bl	800b944 <__errno>
 800e668:	4629      	mov	r1, r5
 800e66a:	6006      	str	r6, [r0, #0]
 800e66c:	4620      	mov	r0, r4
 800e66e:	bd70      	pop	{r4, r5, r6, pc}

0800e670 <xflow>:
 800e670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e672:	4614      	mov	r4, r2
 800e674:	461d      	mov	r5, r3
 800e676:	b108      	cbz	r0, 800e67c <xflow+0xc>
 800e678:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e67c:	e9cd 2300 	strd	r2, r3, [sp]
 800e680:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e684:	4620      	mov	r0, r4
 800e686:	4629      	mov	r1, r5
 800e688:	f7f1 ffce 	bl	8000628 <__aeabi_dmul>
 800e68c:	2222      	movs	r2, #34	; 0x22
 800e68e:	b003      	add	sp, #12
 800e690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e694:	f7ff bfe2 	b.w	800e65c <with_errno>

0800e698 <__math_uflow>:
 800e698:	b508      	push	{r3, lr}
 800e69a:	2200      	movs	r2, #0
 800e69c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e6a0:	f7ff ffe6 	bl	800e670 <xflow>
 800e6a4:	ec41 0b10 	vmov	d0, r0, r1
 800e6a8:	bd08      	pop	{r3, pc}

0800e6aa <__math_oflow>:
 800e6aa:	b508      	push	{r3, lr}
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e6b2:	f7ff ffdd 	bl	800e670 <xflow>
 800e6b6:	ec41 0b10 	vmov	d0, r0, r1
 800e6ba:	bd08      	pop	{r3, pc}

0800e6bc <_init>:
 800e6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6be:	bf00      	nop
 800e6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6c2:	bc08      	pop	{r3}
 800e6c4:	469e      	mov	lr, r3
 800e6c6:	4770      	bx	lr

0800e6c8 <_fini>:
 800e6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ca:	bf00      	nop
 800e6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6ce:	bc08      	pop	{r3}
 800e6d0:	469e      	mov	lr, r3
 800e6d2:	4770      	bx	lr
